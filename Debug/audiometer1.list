
audiometer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f60  08003b04  08003b04  00013b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a64  08004a64  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08004a64  08004a64  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a64  08004a64  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a64  08004a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  2000007c  08004ae8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  08004ae8  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000914a  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001620  00000000  00000000  000291ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000920  00000000  00000000  0002a810  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000888  00000000  00000000  0002b130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013c3d  00000000  00000000  0002b9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006f0a  00000000  00000000  0003f5f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006c82b  00000000  00000000  000464ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b2d2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a04  00000000  00000000  000b2da8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003aec 	.word	0x08003aec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08003aec 	.word	0x08003aec

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_frsub>:
 800092c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000930:	e002      	b.n	8000938 <__addsf3>
 8000932:	bf00      	nop

08000934 <__aeabi_fsub>:
 8000934:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000938 <__addsf3>:
 8000938:	0042      	lsls	r2, r0, #1
 800093a:	bf1f      	itttt	ne
 800093c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000940:	ea92 0f03 	teqne	r2, r3
 8000944:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000948:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800094c:	d06a      	beq.n	8000a24 <__addsf3+0xec>
 800094e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000952:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000956:	bfc1      	itttt	gt
 8000958:	18d2      	addgt	r2, r2, r3
 800095a:	4041      	eorgt	r1, r0
 800095c:	4048      	eorgt	r0, r1
 800095e:	4041      	eorgt	r1, r0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
 8000964:	2b19      	cmp	r3, #25
 8000966:	bf88      	it	hi
 8000968:	4770      	bxhi	lr
 800096a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800096e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000972:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800097e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000982:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4249      	negne	r1, r1
 800098a:	ea92 0f03 	teq	r2, r3
 800098e:	d03f      	beq.n	8000a10 <__addsf3+0xd8>
 8000990:	f1a2 0201 	sub.w	r2, r2, #1
 8000994:	fa41 fc03 	asr.w	ip, r1, r3
 8000998:	eb10 000c 	adds.w	r0, r0, ip
 800099c:	f1c3 0320 	rsb	r3, r3, #32
 80009a0:	fa01 f103 	lsl.w	r1, r1, r3
 80009a4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009a8:	d502      	bpl.n	80009b0 <__addsf3+0x78>
 80009aa:	4249      	negs	r1, r1
 80009ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009b4:	d313      	bcc.n	80009de <__addsf3+0xa6>
 80009b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ba:	d306      	bcc.n	80009ca <__addsf3+0x92>
 80009bc:	0840      	lsrs	r0, r0, #1
 80009be:	ea4f 0131 	mov.w	r1, r1, rrx
 80009c2:	f102 0201 	add.w	r2, r2, #1
 80009c6:	2afe      	cmp	r2, #254	; 0xfe
 80009c8:	d251      	bcs.n	8000a6e <__addsf3+0x136>
 80009ca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d2:	bf08      	it	eq
 80009d4:	f020 0001 	biceq.w	r0, r0, #1
 80009d8:	ea40 0003 	orr.w	r0, r0, r3
 80009dc:	4770      	bx	lr
 80009de:	0049      	lsls	r1, r1, #1
 80009e0:	eb40 0000 	adc.w	r0, r0, r0
 80009e4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80009e8:	f1a2 0201 	sub.w	r2, r2, #1
 80009ec:	d1ed      	bne.n	80009ca <__addsf3+0x92>
 80009ee:	fab0 fc80 	clz	ip, r0
 80009f2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009f6:	ebb2 020c 	subs.w	r2, r2, ip
 80009fa:	fa00 f00c 	lsl.w	r0, r0, ip
 80009fe:	bfaa      	itet	ge
 8000a00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a04:	4252      	neglt	r2, r2
 8000a06:	4318      	orrge	r0, r3
 8000a08:	bfbc      	itt	lt
 8000a0a:	40d0      	lsrlt	r0, r2
 8000a0c:	4318      	orrlt	r0, r3
 8000a0e:	4770      	bx	lr
 8000a10:	f092 0f00 	teq	r2, #0
 8000a14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a18:	bf06      	itte	eq
 8000a1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a1e:	3201      	addeq	r2, #1
 8000a20:	3b01      	subne	r3, #1
 8000a22:	e7b5      	b.n	8000990 <__addsf3+0x58>
 8000a24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a2c:	bf18      	it	ne
 8000a2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a32:	d021      	beq.n	8000a78 <__addsf3+0x140>
 8000a34:	ea92 0f03 	teq	r2, r3
 8000a38:	d004      	beq.n	8000a44 <__addsf3+0x10c>
 8000a3a:	f092 0f00 	teq	r2, #0
 8000a3e:	bf08      	it	eq
 8000a40:	4608      	moveq	r0, r1
 8000a42:	4770      	bx	lr
 8000a44:	ea90 0f01 	teq	r0, r1
 8000a48:	bf1c      	itt	ne
 8000a4a:	2000      	movne	r0, #0
 8000a4c:	4770      	bxne	lr
 8000a4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a52:	d104      	bne.n	8000a5e <__addsf3+0x126>
 8000a54:	0040      	lsls	r0, r0, #1
 8000a56:	bf28      	it	cs
 8000a58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a5c:	4770      	bx	lr
 8000a5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a62:	bf3c      	itt	cc
 8000a64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bxcc	lr
 8000a6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a76:	4770      	bx	lr
 8000a78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a7c:	bf16      	itet	ne
 8000a7e:	4608      	movne	r0, r1
 8000a80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a84:	4601      	movne	r1, r0
 8000a86:	0242      	lsls	r2, r0, #9
 8000a88:	bf06      	itte	eq
 8000a8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a8e:	ea90 0f01 	teqeq	r0, r1
 8000a92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_ui2f>:
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e004      	b.n	8000aa8 <__aeabi_i2f+0x8>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_i2f>:
 8000aa0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000aa4:	bf48      	it	mi
 8000aa6:	4240      	negmi	r0, r0
 8000aa8:	ea5f 0c00 	movs.w	ip, r0
 8000aac:	bf08      	it	eq
 8000aae:	4770      	bxeq	lr
 8000ab0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ab4:	4601      	mov	r1, r0
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	e01c      	b.n	8000af6 <__aeabi_l2f+0x2a>

08000abc <__aeabi_ul2f>:
 8000abc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f04f 0300 	mov.w	r3, #0
 8000ac8:	e00a      	b.n	8000ae0 <__aeabi_l2f+0x14>
 8000aca:	bf00      	nop

08000acc <__aeabi_l2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__aeabi_l2f+0x14>
 8000ada:	4240      	negs	r0, r0
 8000adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae0:	ea5f 0c01 	movs.w	ip, r1
 8000ae4:	bf02      	ittt	eq
 8000ae6:	4684      	moveq	ip, r0
 8000ae8:	4601      	moveq	r1, r0
 8000aea:	2000      	moveq	r0, #0
 8000aec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000af0:	bf08      	it	eq
 8000af2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000af6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000afa:	fabc f28c 	clz	r2, ip
 8000afe:	3a08      	subs	r2, #8
 8000b00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b04:	db10      	blt.n	8000b28 <__aeabi_l2f+0x5c>
 8000b06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b10:	f1c2 0220 	rsb	r2, r2, #32
 8000b14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b18:	fa20 f202 	lsr.w	r2, r0, r2
 8000b1c:	eb43 0002 	adc.w	r0, r3, r2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f102 0220 	add.w	r2, r2, #32
 8000b2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b38:	fa21 f202 	lsr.w	r2, r1, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b46:	4770      	bx	lr

08000b48 <my_i2c_master_write>:
	 unsigned int *data; /*!< Pointer to data font data array */
} FontDef;


void my_i2c_master_write(uint16_t address ,uint16_t reg,uint16_t data)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af04      	add	r7, sp, #16
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
 8000b52:	460b      	mov	r3, r1
 8000b54:	80bb      	strh	r3, [r7, #4]
 8000b56:	4613      	mov	r3, r2
 8000b58:	807b      	strh	r3, [r7, #2]

	HAL_I2C_Mem_Write(&hi2c1,address,reg,1,&data,1,500);
 8000b5a:	88ba      	ldrh	r2, [r7, #4]
 8000b5c:	88f9      	ldrh	r1, [r7, #6]
 8000b5e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b62:	9302      	str	r3, [sp, #8]
 8000b64:	2301      	movs	r3, #1
 8000b66:	9301      	str	r3, [sp, #4]
 8000b68:	1cbb      	adds	r3, r7, #2
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	4803      	ldr	r0, [pc, #12]	; (8000b7c <my_i2c_master_write+0x34>)
 8000b70:	f001 fa48 	bl	8002004 <HAL_I2C_Mem_Write>

	//HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)

}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200000a4 	.word	0x200000a4

08000b80 <ssd1306_WriteCommand>:




// Send a byte to the command register
void ssd1306_WriteCommand(unsigned char byte) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
	my_i2c_master_write(SSD1306_I2C_ADDR,0x00,byte);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	461a      	mov	r2, r3
 8000b90:	2100      	movs	r1, #0
 8000b92:	2078      	movs	r0, #120	; 0x78
 8000b94:	f7ff ffd8 	bl	8000b48 <my_i2c_master_write>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(unsigned char* buffer, unsigned char size) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	70fb      	strb	r3, [r7, #3]
	int cc=0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
	for(cc=0;cc<size;cc++)
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	e00c      	b.n	8000bd0 <ssd1306_WriteData+0x30>
	{
		my_i2c_master_write(SSD1306_I2C_ADDR,0x40,buffer[cc]);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	4413      	add	r3, r2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	2140      	movs	r1, #64	; 0x40
 8000bc4:	2078      	movs	r0, #120	; 0x78
 8000bc6:	f7ff ffbf 	bl	8000b48 <my_i2c_master_write>
	for(cc=0;cc<size;cc++)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	dbee      	blt.n	8000bb6 <ssd1306_WriteData+0x16>
	}
}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <ssd1306_Fill>:



// Initialize the oled screen
void ssd1306_Fill(SSD1306_COLOR color) {
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    unsigned int i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e00d      	b.n	8000c0c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00: 0xFF;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <ssd1306_Fill+0x1a>
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	e000      	b.n	8000bfc <ssd1306_Fill+0x1c>
 8000bfa:	21ff      	movs	r1, #255	; 0xff
 8000bfc:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <ssd1306_Fill+0x40>)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4413      	add	r3, r2
 8000c02:	460a      	mov	r2, r1
 8000c04:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c12:	d3ed      	bcc.n	8000bf0 <ssd1306_Fill+0x10>
    }
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000104 	.word	0x20000104

08000c24 <ssd1306_UpdateScreen>:


// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
    unsigned char i;
    for(i = 0; i < 8; i++) {
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	71fb      	strb	r3, [r7, #7]
 8000c2e:	e016      	b.n	8000c5e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	3b50      	subs	r3, #80	; 0x50
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ffa2 	bl	8000b80 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff ff9f 	bl	8000b80 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000c42:	2010      	movs	r0, #16
 8000c44:	f7ff ff9c 	bl	8000b80 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	01db      	lsls	r3, r3, #7
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <ssd1306_UpdateScreen+0x48>)
 8000c4e:	4413      	add	r3, r2
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffa4 	bl	8000ba0 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b07      	cmp	r3, #7
 8000c62:	d9e5      	bls.n	8000c30 <ssd1306_UpdateScreen+0xc>
    }
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000104 	.word	0x20000104

08000c70 <delay_ms>:



void delay_ms(int d)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	HAL_Delay(d);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 fdc8 	bl	8001810 <HAL_Delay>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <ssd1306_Init>:
void ssd1306_Init(void) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0

    // Wait for the screen to boot
    delay_ms(100);
 8000c8c:	2064      	movs	r0, #100	; 0x64
 8000c8e:	f7ff ffef 	bl	8000c70 <delay_ms>

    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8000c92:	20ae      	movs	r0, #174	; 0xae
 8000c94:	f7ff ff74 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000c98:	2020      	movs	r0, #32
 8000c9a:	f7ff ff71 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff ff6e 	bl	8000b80 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ca4:	20b0      	movs	r0, #176	; 0xb0
 8000ca6:	f7ff ff6b 	bl	8000b80 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000caa:	20c8      	movs	r0, #200	; 0xc8
 8000cac:	f7ff ff68 	bl	8000b80 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff ff65 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000cb6:	2010      	movs	r0, #16
 8000cb8:	f7ff ff62 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000cbc:	2040      	movs	r0, #64	; 0x40
 8000cbe:	f7ff ff5f 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8000cc2:	2081      	movs	r0, #129	; 0x81
 8000cc4:	f7ff ff5c 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8000cc8:	20ff      	movs	r0, #255	; 0xff
 8000cca:	f7ff ff59 	bl	8000b80 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000cce:	20a1      	movs	r0, #161	; 0xa1
 8000cd0:	f7ff ff56 	bl	8000b80 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000cd4:	20a6      	movs	r0, #166	; 0xa6
 8000cd6:	f7ff ff53 	bl	8000b80 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000cda:	20a8      	movs	r0, #168	; 0xa8
 8000cdc:	f7ff ff50 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8000ce0:	203f      	movs	r0, #63	; 0x3f
 8000ce2:	f7ff ff4d 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ce6:	20a4      	movs	r0, #164	; 0xa4
 8000ce8:	f7ff ff4a 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000cec:	20d3      	movs	r0, #211	; 0xd3
 8000cee:	f7ff ff47 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff ff44 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000cf8:	20d5      	movs	r0, #213	; 0xd5
 8000cfa:	f7ff ff41 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000cfe:	20f0      	movs	r0, #240	; 0xf0
 8000d00:	f7ff ff3e 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000d04:	20d9      	movs	r0, #217	; 0xd9
 8000d06:	f7ff ff3b 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000d0a:	2022      	movs	r0, #34	; 0x22
 8000d0c:	f7ff ff38 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000d10:	20da      	movs	r0, #218	; 0xda
 8000d12:	f7ff ff35 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8000d16:	2012      	movs	r0, #18
 8000d18:	f7ff ff32 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000d1c:	20db      	movs	r0, #219	; 0xdb
 8000d1e:	f7ff ff2f 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000d22:	2020      	movs	r0, #32
 8000d24:	f7ff ff2c 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000d28:	208d      	movs	r0, #141	; 0x8d
 8000d2a:	f7ff ff29 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000d2e:	2014      	movs	r0, #20
 8000d30:	f7ff ff26 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000d34:	20af      	movs	r0, #175	; 0xaf
 8000d36:	f7ff ff23 	bl	8000b80 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff ff50 	bl	8000be0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000d40:	f7ff ff70 	bl	8000c24 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <ssd1306_Init+0xd4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <ssd1306_Init+0xd4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	605a      	str	r2, [r3, #4]

    SSD1306.Initialized = 1;
 8000d50:	4b02      	ldr	r3, [pc, #8]	; (8000d5c <ssd1306_Init+0xd4>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	725a      	strb	r2, [r3, #9]
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200000f8 	.word	0x200000f8

08000d60 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(unsigned char x, unsigned char y, SSD1306_COLOR color) {
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	71bb      	strb	r3, [r7, #6]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db48      	blt.n	8000e0c <ssd1306_DrawPixel+0xac>
 8000d7a:	79bb      	ldrb	r3, [r7, #6]
 8000d7c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d7e:	d845      	bhi.n	8000e0c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8000d80:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <ssd1306_DrawPixel+0xb8>)
 8000d82:	7a1b      	ldrb	r3, [r3, #8]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d006      	beq.n	8000d96 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8000d88:	797b      	ldrb	r3, [r7, #5]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	bf0c      	ite	eq
 8000d8e:	2301      	moveq	r3, #1
 8000d90:	2300      	movne	r3, #0
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if(color == White) {
 8000d96:	797b      	ldrb	r3, [r7, #5]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d11a      	bne.n	8000dd2 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d9c:	79fa      	ldrb	r2, [r7, #7]
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	08db      	lsrs	r3, r3, #3
 8000da2:	b2d8      	uxtb	r0, r3
 8000da4:	4603      	mov	r3, r0
 8000da6:	01db      	lsls	r3, r3, #7
 8000da8:	4413      	add	r3, r2
 8000daa:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <ssd1306_DrawPixel+0xbc>)
 8000dac:	5cd3      	ldrb	r3, [r2, r3]
 8000dae:	b25a      	sxtb	r2, r3
 8000db0:	79bb      	ldrb	r3, [r7, #6]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	2101      	movs	r1, #1
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	b259      	sxtb	r1, r3
 8000dc2:	79fa      	ldrb	r2, [r7, #7]
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	01db      	lsls	r3, r3, #7
 8000dc8:	4413      	add	r3, r2
 8000dca:	b2c9      	uxtb	r1, r1
 8000dcc:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <ssd1306_DrawPixel+0xbc>)
 8000dce:	54d1      	strb	r1, [r2, r3]
 8000dd0:	e01d      	b.n	8000e0e <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	79bb      	ldrb	r3, [r7, #6]
 8000dd6:	08db      	lsrs	r3, r3, #3
 8000dd8:	b2d8      	uxtb	r0, r3
 8000dda:	4603      	mov	r3, r0
 8000ddc:	01db      	lsls	r3, r3, #7
 8000dde:	4413      	add	r3, r2
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <ssd1306_DrawPixel+0xbc>)
 8000de2:	5cd3      	ldrb	r3, [r2, r3]
 8000de4:	b25a      	sxtb	r2, r3
 8000de6:	79bb      	ldrb	r3, [r7, #6]
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	2101      	movs	r1, #1
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	b25b      	sxtb	r3, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	4013      	ands	r3, r2
 8000dfa:	b259      	sxtb	r1, r3
 8000dfc:	79fa      	ldrb	r2, [r7, #7]
 8000dfe:	4603      	mov	r3, r0
 8000e00:	01db      	lsls	r3, r3, #7
 8000e02:	4413      	add	r3, r2
 8000e04:	b2c9      	uxtb	r1, r1
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <ssd1306_DrawPixel+0xbc>)
 8000e08:	54d1      	strb	r1, [r2, r3]
 8000e0a:	e000      	b.n	8000e0e <ssd1306_DrawPixel+0xae>
        return;
 8000e0c:	bf00      	nop
    }
}
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	200000f8 	.word	0x200000f8
 8000e1c:	20000104 	.word	0x20000104

08000e20 <ssd1306_SetCursor>:
void ssd1306_SetCursor(unsigned char x, unsigned char y) {
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	460a      	mov	r2, r1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <ssd1306_SetCursor+0x28>)
 8000e34:	6013      	str	r3, [r2, #0]
    SSD1306.CurrentY = y;
 8000e36:	79bb      	ldrb	r3, [r7, #6]
 8000e38:	4a03      	ldr	r2, [pc, #12]	; (8000e48 <ssd1306_SetCursor+0x28>)
 8000e3a:	6053      	str	r3, [r2, #4]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200000f8 	.word	0x200000f8

08000e4c <ssd1306_ClearScreen>:
 void ssd1306_ClearScreen()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff fec5 	bl	8000be0 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8000e56:	f7ff fee5 	bl	8000c24 <ssd1306_UpdateScreen>
    ssd1306_SetCursor(0,0);
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f7ff ffdf 	bl	8000e20 <ssd1306_SetCursor>
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4604      	mov	r4, r0
 8000e70:	1d38      	adds	r0, r7, #4
 8000e72:	e880 0006 	stmia.w	r0, {r1, r2}
 8000e76:	461a      	mov	r2, r3
 8000e78:	4623      	mov	r3, r4
 8000e7a:	73fb      	strb	r3, [r7, #15]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	73bb      	strb	r3, [r7, #14]
    unsigned int i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	2b1f      	cmp	r3, #31
 8000e84:	d902      	bls.n	8000e8c <ssd1306_WriteChar+0x24>
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	2b7e      	cmp	r3, #126	; 0x7e
 8000e8a:	d901      	bls.n	8000e90 <ssd1306_WriteChar+0x28>
        return 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e082      	b.n	8000f96 <ssd1306_WriteChar+0x12e>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000e90:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	793a      	ldrb	r2, [r7, #4]
 8000e96:	4413      	add	r3, r2
 8000e98:	2b80      	cmp	r3, #128	; 0x80
 8000e9a:	d805      	bhi.n	8000ea8 <ssd1306_WriteChar+0x40>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000e9c:	4b40      	ldr	r3, [pc, #256]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	797a      	ldrb	r2, [r7, #5]
 8000ea2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000ea4:	2b40      	cmp	r3, #64	; 0x40
 8000ea6:	d91a      	bls.n	8000ede <ssd1306_WriteChar+0x76>
    {
        // Not enough space on current line
        if(SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth))
 8000ea8:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	793a      	ldrb	r2, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	2b80      	cmp	r3, #128	; 0x80
 8000eb2:	d912      	bls.n	8000eda <ssd1306_WriteChar+0x72>
        {
            if(SSD1306_HEIGHT > (SSD1306.CurrentY + Font.FontHeight))
 8000eb4:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	797a      	ldrb	r2, [r7, #5]
 8000eba:	4413      	add	r3, r2
 8000ebc:	2b3f      	cmp	r3, #63	; 0x3f
 8000ebe:	d80a      	bhi.n	8000ed6 <ssd1306_WriteChar+0x6e>
            {
                ssd1306_SetCursor(0,SSD1306.CurrentY+Font.FontHeight);
 8000ec0:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	797b      	ldrb	r3, [r7, #5]
 8000ec8:	4413      	add	r3, r2
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4619      	mov	r1, r3
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f7ff ffa6 	bl	8000e20 <ssd1306_SetCursor>
 8000ed4:	e001      	b.n	8000eda <ssd1306_WriteChar+0x72>
            }
            else
            {
                ssd1306_ClearScreen();
 8000ed6:	f7ff ffb9 	bl	8000e4c <ssd1306_ClearScreen>
//            else if(SSD1306_WIDTH > (SSD1306.CurrentX + Font.FontWIDTH))
//            {
//                ssd1306_SetCursor(SSD1306.CurrentX+1,0);
//            }
        }
        return 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e05b      	b.n	8000f96 <ssd1306_WriteChar+0x12e>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	e04c      	b.n	8000f7e <ssd1306_WriteChar+0x116>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	3b20      	subs	r3, #32
 8000eea:	7979      	ldrb	r1, [r7, #5]
 8000eec:	fb01 f303 	mul.w	r3, r1, r3
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	440b      	add	r3, r1
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
 8000f02:	e034      	b.n	8000f6e <ssd1306_WriteChar+0x106>
            if((b << j) & 0x8000)  {
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d012      	beq.n	8000f3a <ssd1306_WriteChar+0xd2>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	4413      	add	r3, r2
 8000f20:	b2d8      	uxtb	r0, r3
 8000f22:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	7bba      	ldrb	r2, [r7, #14]
 8000f32:	4619      	mov	r1, r3
 8000f34:	f7ff ff14 	bl	8000d60 <ssd1306_DrawPixel>
 8000f38:	e016      	b.n	8000f68 <ssd1306_WriteChar+0x100>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	4413      	add	r3, r2
 8000f46:	b2d8      	uxtb	r0, r3
 8000f48:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4413      	add	r3, r2
 8000f54:	b2d9      	uxtb	r1, r3
 8000f56:	7bbb      	ldrb	r3, [r7, #14]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf0c      	ite	eq
 8000f5c:	2301      	moveq	r3, #1
 8000f5e:	2300      	movne	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	461a      	mov	r2, r3
 8000f64:	f7ff fefc 	bl	8000d60 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	61bb      	str	r3, [r7, #24]
 8000f6e:	793b      	ldrb	r3, [r7, #4]
 8000f70:	461a      	mov	r2, r3
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d3c5      	bcc.n	8000f04 <ssd1306_WriteChar+0x9c>
    for(i = 0; i < Font.FontHeight; i++) {
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	797b      	ldrb	r3, [r7, #5]
 8000f80:	461a      	mov	r2, r3
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d3ad      	bcc.n	8000ee4 <ssd1306_WriteChar+0x7c>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	793a      	ldrb	r2, [r7, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a03      	ldr	r2, [pc, #12]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000f92:	6013      	str	r3, [r2, #0]

    // Return written char for validation
    return ch;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd90      	pop	{r4, r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000f8 	.word	0x200000f8

08000fa4 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	1d38      	adds	r0, r7, #4
 8000fae:	e880 0006 	stmia.w	r0, {r1, r2}
 8000fb2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000fb4:	e012      	b.n	8000fdc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	7818      	ldrb	r0, [r3, #0]
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	1d3a      	adds	r2, r7, #4
 8000fbe:	ca06      	ldmia	r2, {r1, r2}
 8000fc0:	f7ff ff52 	bl	8000e68 <ssd1306_WriteChar>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d002      	beq.n	8000fd6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	e008      	b.n	8000fe8 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1e8      	bne.n	8000fb6 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <ssd1306_PutInt>:

// Position the cursor
void ssd1306_PutInt(unsigned int number, FontDef Font, SSD1306_COLOR color)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b09e      	sub	sp, #120	; 0x78
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	1d38      	adds	r0, r7, #4
 8000ffa:	e880 0006 	stmia.w	r0, {r1, r2}
 8000ffe:	70fb      	strb	r3, [r7, #3]
    unsigned char f[100];
    sprintf(f,"%d",number);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	4907      	ldr	r1, [pc, #28]	; (8001024 <ssd1306_PutInt+0x34>)
 8001008:	4618      	mov	r0, r3
 800100a:	f002 f95d 	bl	80032c8 <siprintf>
    ssd1306_WriteString(f, Font,  color);
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	f107 0014 	add.w	r0, r7, #20
 8001014:	1d3a      	adds	r2, r7, #4
 8001016:	ca06      	ldmia	r2, {r1, r2}
 8001018:	f7ff ffc4 	bl	8000fa4 <ssd1306_WriteString>
}
 800101c:	bf00      	nop
 800101e:	3778      	adds	r7, #120	; 0x78
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	08003b04 	.word	0x08003b04

08001028 <my_spi_write16>:

};


void my_spi_write16(SPI_HandleTypeDef *hspi,uint16_t my_data,GPIO_TypeDef *SLAVE_GPIO,uint16_t SLAVE_GPIO_PIN)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	461a      	mov	r2, r3
 8001034:	460b      	mov	r3, r1
 8001036:	817b      	strh	r3, [r7, #10]
 8001038:	4613      	mov	r3, r2
 800103a:	813b      	strh	r3, [r7, #8]


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2110      	movs	r1, #16
 8001040:	4809      	ldr	r0, [pc, #36]	; (8001068 <my_spi_write16+0x40>)
 8001042:	f000 fe6f 	bl	8001d24 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &my_data, 1, 800);
 8001046:	f107 010a 	add.w	r1, r7, #10
 800104a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800104e:	2201      	movs	r2, #1
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f001 ff4a 	bl	8002eea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001056:	2201      	movs	r2, #1
 8001058:	2110      	movs	r1, #16
 800105a:	4803      	ldr	r0, [pc, #12]	; (8001068 <my_spi_write16+0x40>)
 800105c:	f000 fe62 	bl	8001d24 <HAL_GPIO_WritePin>





}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40010800 	.word	0x40010800

0800106c <ad9833_send_command>:
void ad9833_send_command(uint16_t command)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	80fb      	strh	r3, [r7, #6]
	my_spi_write16(&hspi1,command, GPIOB,GPIO_PIN_0);
 8001076:	88f9      	ldrh	r1, [r7, #6]
 8001078:	2301      	movs	r3, #1
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <ad9833_send_command+0x20>)
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <ad9833_send_command+0x24>)
 800107e:	f7ff ffd3 	bl	8001028 <my_spi_write16>

}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40010c00 	.word	0x40010c00
 8001090:	20000504 	.word	0x20000504
 8001094:	00000000 	.word	0x00000000

08001098 <ad9833_set_mode_and_freq>:

}


void ad9833_set_mode_and_freq(char mode,uint32_t freq )
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]


	uint32_t temp = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
	if(mode==0)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d104      	bne.n	80010b8 <ad9833_set_mode_and_freq+0x20>
		ad9833_send_command( (1<<13)  ); ///sin mode
 80010ae:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010b2:	f7ff ffdb 	bl	800106c <ad9833_send_command>
 80010b6:	e016      	b.n	80010e6 <ad9833_set_mode_and_freq+0x4e>
	else if (mode==1)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d104      	bne.n	80010c8 <ad9833_set_mode_and_freq+0x30>
		ad9833_send_command( (1<<13) | (1<<1)); //tri mode
 80010be:	f242 0002 	movw	r0, #8194	; 0x2002
 80010c2:	f7ff ffd3 	bl	800106c <ad9833_send_command>
 80010c6:	e00e      	b.n	80010e6 <ad9833_set_mode_and_freq+0x4e>
	else if (mode==2)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d104      	bne.n	80010d8 <ad9833_set_mode_and_freq+0x40>
			ad9833_send_command( (1<<13) |(1<<5)| (1<<3)); //pulse mode
 80010ce:	f242 0028 	movw	r0, #8232	; 0x2028
 80010d2:	f7ff ffcb 	bl	800106c <ad9833_send_command>
 80010d6:	e006      	b.n	80010e6 <ad9833_set_mode_and_freq+0x4e>
	else if (mode==3)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d103      	bne.n	80010e6 <ad9833_set_mode_and_freq+0x4e>
			ad9833_send_command( (1<<13) |(1<<5)); //pulse2om mode
 80010de:	f242 0020 	movw	r0, #8224	; 0x2020
 80010e2:	f7ff ffc3 	bl	800106c <ad9833_send_command>


	freq =(float) freq*10.73741824;
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f7ff fcd6 	bl	8000a98 <__aeabi_ui2f>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f992 	bl	8000418 <__aeabi_f2d>
 80010f4:	a314      	add	r3, pc, #80	; (adr r3, 8001148 <ad9833_set_mode_and_freq+0xb0>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff f9e5 	bl	80004c8 <__aeabi_dmul>
 80010fe:	4603      	mov	r3, r0
 8001100:	460c      	mov	r4, r1
 8001102:	4618      	mov	r0, r3
 8001104:	4621      	mov	r1, r4
 8001106:	f7ff fbf1 	bl	80008ec <__aeabi_d2uiz>
 800110a:	4603      	mov	r3, r0
 800110c:	603b      	str	r3, [r7, #0]
	temp = freq;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	60fb      	str	r3, [r7, #12]
	//temp = 10000;
	//send lsb first
	ad9833_send_command((temp%(1<<14))| 1<<14);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	b29b      	uxth	r3, r3
 8001116:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800111a:	b29b      	uxth	r3, r3
 800111c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001120:	b29b      	uxth	r3, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ffa2 	bl	800106c <ad9833_send_command>
	ad9833_send_command((temp>>14)| 1<<14);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	0b9b      	lsrs	r3, r3, #14
 800112c:	b29b      	uxth	r3, r3
 800112e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001132:	b29b      	uxth	r3, r3
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff99 	bl	800106c <ad9833_send_command>



	//#268435456/25000000=10.73741824
	//   freg*(fref/2^28 )  // in my case fref is 25mhz
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	bd90      	pop	{r4, r7, pc}
 8001142:	bf00      	nop
 8001144:	f3af 8000 	nop.w
 8001148:	e2308c3a 	.word	0xe2308c3a
 800114c:	4025798e 	.word	0x4025798e

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001154:	f000 fafa 	bl	800174c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001158:	f000 f842 	bl	80011e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115c:	f000 f8e2 	bl	8001324 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001160:	f000 f87a 	bl	8001258 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001164:	f000 f8a6 	bl	80012b4 <MX_SPI1_Init>
//asd
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ssd1306_Init();
 8001168:	f7ff fd8e 	bl	8000c88 <ssd1306_Init>

  ssd1306_Fill(Black);
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff fd37 	bl	8000be0 <ssd1306_Fill>
  ssd1306_WriteString("salam chetori", Font_7x10, White);
 8001172:	4a16      	ldr	r2, [pc, #88]	; (80011cc <main+0x7c>)
 8001174:	2301      	movs	r3, #1
 8001176:	ca06      	ldmia	r2, {r1, r2}
 8001178:	4815      	ldr	r0, [pc, #84]	; (80011d0 <main+0x80>)
 800117a:	f7ff ff13 	bl	8000fa4 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800117e:	f7ff fd51 	bl	8000c24 <ssd1306_UpdateScreen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ssd1306_SetCursor(0, 14);
 8001182:	210e      	movs	r1, #14
 8001184:	2000      	movs	r0, #0
 8001186:	f7ff fe4b 	bl	8000e20 <ssd1306_SetCursor>
	  ssd1306_WriteString("freq = ", Font_7x10, White);
 800118a:	4a10      	ldr	r2, [pc, #64]	; (80011cc <main+0x7c>)
 800118c:	2301      	movs	r3, #1
 800118e:	ca06      	ldmia	r2, {r1, r2}
 8001190:	4810      	ldr	r0, [pc, #64]	; (80011d4 <main+0x84>)
 8001192:	f7ff ff07 	bl	8000fa4 <ssd1306_WriteString>
	  ssd1306_PutInt(pulse ,Font_7x10, White);
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <main+0x88>)
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <main+0x7c>)
 800119c:	2301      	movs	r3, #1
 800119e:	ca06      	ldmia	r2, {r1, r2}
 80011a0:	f7ff ff26 	bl	8000ff0 <ssd1306_PutInt>
	  ssd1306_WriteString("        ", Font_7x10, White);
 80011a4:	4a09      	ldr	r2, [pc, #36]	; (80011cc <main+0x7c>)
 80011a6:	2301      	movs	r3, #1
 80011a8:	ca06      	ldmia	r2, {r1, r2}
 80011aa:	480c      	ldr	r0, [pc, #48]	; (80011dc <main+0x8c>)
 80011ac:	f7ff fefa 	bl	8000fa4 <ssd1306_WriteString>

	  ssd1306_UpdateScreen();
 80011b0:	f7ff fd38 	bl	8000c24 <ssd1306_UpdateScreen>
	  ad9833_set_mode_and_freq(ad9833_sin, pulse );
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <main+0x88>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff ff6c 	bl	8001098 <ad9833_set_mode_and_freq>
	 // ad9833_disable();


	  HAL_Delay(1000);
 80011c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c4:	f000 fb24 	bl	8001810 <HAL_Delay>
	  ssd1306_SetCursor(0, 14);
 80011c8:	e7db      	b.n	8001182 <main+0x32>
 80011ca:	bf00      	nop
 80011cc:	20000000 	.word	0x20000000
 80011d0:	08003b08 	.word	0x08003b08
 80011d4:	08003b18 	.word	0x08003b18
 80011d8:	20000008 	.word	0x20000008
 80011dc:	08003b20 	.word	0x08003b20

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b090      	sub	sp, #64	; 0x40
 80011e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	f107 0318 	add.w	r3, r7, #24
 80011ea:	2228      	movs	r2, #40	; 0x28
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 f862 	bl	80032b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001206:	2301      	movs	r3, #1
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800120a:	2310      	movs	r3, #16
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800120e:	2300      	movs	r3, #0
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001212:	f107 0318 	add.w	r3, r7, #24
 8001216:	4618      	mov	r0, r3
 8001218:	f001 f9fe 	bl	8002618 <HAL_RCC_OscConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001222:	f000 f927 	bl	8001474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001226:	230f      	movs	r3, #15
 8001228:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fc6a 	bl	8002b18 <HAL_RCC_ClockConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800124a:	f000 f913 	bl	8001474 <Error_Handler>
  }
}
 800124e:	bf00      	nop
 8001250:	3740      	adds	r7, #64	; 0x40
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_I2C1_Init+0x50>)
 800125e:	4a13      	ldr	r2, [pc, #76]	; (80012ac <MX_I2C1_Init+0x54>)
 8001260:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001264:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_I2C1_Init+0x58>)
 8001266:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_I2C1_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <MX_I2C1_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001296:	f000 fd8d 	bl	8001db4 <HAL_I2C_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a0:	f000 f8e8 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200000a4 	.word	0x200000a4
 80012ac:	40005400 	.word	0x40005400
 80012b0:	000186a0 	.word	0x000186a0

080012b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <MX_SPI1_Init+0x68>)
 80012ba:	4a19      	ldr	r2, [pc, #100]	; (8001320 <MX_SPI1_Init+0x6c>)
 80012bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <MX_SPI1_Init+0x68>)
 80012c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <MX_SPI1_Init+0x68>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80012cc:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_SPI1_Init+0x68>)
 80012ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_SPI1_Init+0x68>)
 80012d6:	2202      	movs	r2, #2
 80012d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <MX_SPI1_Init+0x68>)
 80012dc:	2200      	movs	r2, #0
 80012de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_SPI1_Init+0x68>)
 80012e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_SPI1_Init+0x68>)
 80012ea:	2230      	movs	r2, #48	; 0x30
 80012ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_SPI1_Init+0x68>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_SPI1_Init+0x68>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <MX_SPI1_Init+0x68>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_SPI1_Init+0x68>)
 8001302:	220a      	movs	r2, #10
 8001304:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_SPI1_Init+0x68>)
 8001308:	f001 fd8e 	bl	8002e28 <HAL_SPI_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001312:	f000 f8af 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000504 	.word	0x20000504
 8001320:	40013000 	.word	0x40013000

08001324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001338:	4b38      	ldr	r3, [pc, #224]	; (800141c <MX_GPIO_Init+0xf8>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a37      	ldr	r2, [pc, #220]	; (800141c <MX_GPIO_Init+0xf8>)
 800133e:	f043 0310 	orr.w	r3, r3, #16
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b35      	ldr	r3, [pc, #212]	; (800141c <MX_GPIO_Init+0xf8>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0310 	and.w	r3, r3, #16
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001350:	4b32      	ldr	r3, [pc, #200]	; (800141c <MX_GPIO_Init+0xf8>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a31      	ldr	r2, [pc, #196]	; (800141c <MX_GPIO_Init+0xf8>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b2f      	ldr	r3, [pc, #188]	; (800141c <MX_GPIO_Init+0xf8>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001368:	4b2c      	ldr	r3, [pc, #176]	; (800141c <MX_GPIO_Init+0xf8>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a2b      	ldr	r2, [pc, #172]	; (800141c <MX_GPIO_Init+0xf8>)
 800136e:	f043 0308 	orr.w	r3, r3, #8
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b29      	ldr	r3, [pc, #164]	; (800141c <MX_GPIO_Init+0xf8>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0308 	and.w	r3, r3, #8
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001386:	4826      	ldr	r0, [pc, #152]	; (8001420 <MX_GPIO_Init+0xfc>)
 8001388:	f000 fccc 	bl	8001d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2110      	movs	r1, #16
 8001390:	4824      	ldr	r0, [pc, #144]	; (8001424 <MX_GPIO_Init+0x100>)
 8001392:	f000 fcc7 	bl	8001d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800139a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2302      	movs	r3, #2
 80013a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	4619      	mov	r1, r3
 80013ae:	481c      	ldr	r0, [pc, #112]	; (8001420 <MX_GPIO_Init+0xfc>)
 80013b0:	f000 fb5e 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80013b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_GPIO_Init+0x104>)
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013be:	2301      	movs	r3, #1
 80013c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	4619      	mov	r1, r3
 80013c8:	4815      	ldr	r0, [pc, #84]	; (8001420 <MX_GPIO_Init+0xfc>)
 80013ca:	f000 fb51 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013ce:	2308      	movs	r3, #8
 80013d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 0310 	add.w	r3, r7, #16
 80013de:	4619      	mov	r1, r3
 80013e0:	4810      	ldr	r0, [pc, #64]	; (8001424 <MX_GPIO_Init+0x100>)
 80013e2:	f000 fb45 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013e6:	2310      	movs	r3, #16
 80013e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2302      	movs	r3, #2
 80013f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	4619      	mov	r1, r3
 80013fc:	4809      	ldr	r0, [pc, #36]	; (8001424 <MX_GPIO_Init+0x100>)
 80013fe:	f000 fb37 	bl	8001a70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	2028      	movs	r0, #40	; 0x28
 8001408:	f000 fafb 	bl	8001a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800140c:	2028      	movs	r0, #40	; 0x28
 800140e:	f000 fb14 	bl	8001a3a <HAL_NVIC_EnableIRQ>

}
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	40011000 	.word	0x40011000
 8001424:	40010800 	.word	0x40010800
 8001428:	10210000 	.word	0x10210000

0800142c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  if(GPIO_Pin == GPIO_PIN_14)
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800143c:	d10d      	bne.n	800145a <HAL_GPIO_EXTI_Callback+0x2e>
  {
	  pulse+=10;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_GPIO_EXTI_Callback+0x40>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	330a      	adds	r3, #10
 8001444:	4a09      	ldr	r2, [pc, #36]	; (800146c <HAL_GPIO_EXTI_Callback+0x40>)
 8001446:	6013      	str	r3, [r2, #0]
	  if(pulse>25000)
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_GPIO_EXTI_Callback+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001450:	4293      	cmp	r3, r2
 8001452:	d902      	bls.n	800145a <HAL_GPIO_EXTI_Callback+0x2e>
		  pulse=0;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_GPIO_EXTI_Callback+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]

  }
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800145a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145e:	4804      	ldr	r0, [pc, #16]	; (8001470 <HAL_GPIO_EXTI_Callback+0x44>)
 8001460:	f000 fc78 	bl	8001d54 <HAL_GPIO_TogglePin>

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000008 	.word	0x20000008
 8001470:	40011000 	.word	0x40011000

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_MspInit+0x5c>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	4a14      	ldr	r2, [pc, #80]	; (80014dc <HAL_MspInit+0x5c>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6193      	str	r3, [r2, #24]
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_MspInit+0x5c>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_MspInit+0x5c>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_MspInit+0x5c>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	61d3      	str	r3, [r2, #28]
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_MspInit+0x5c>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_MspInit+0x60>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_MspInit+0x60>)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40010000 	.word	0x40010000

080014e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b088      	sub	sp, #32
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a15      	ldr	r2, [pc, #84]	; (8001554 <HAL_I2C_MspInit+0x70>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d123      	bne.n	800154c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_I2C_MspInit+0x74>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a13      	ldr	r2, [pc, #76]	; (8001558 <HAL_I2C_MspInit+0x74>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_I2C_MspInit+0x74>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800151c:	23c0      	movs	r3, #192	; 0xc0
 800151e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001520:	2312      	movs	r3, #18
 8001522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	4619      	mov	r1, r3
 800152e:	480b      	ldr	r0, [pc, #44]	; (800155c <HAL_I2C_MspInit+0x78>)
 8001530:	f000 fa9e 	bl	8001a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <HAL_I2C_MspInit+0x74>)
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	4a07      	ldr	r2, [pc, #28]	; (8001558 <HAL_I2C_MspInit+0x74>)
 800153a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800153e:	61d3      	str	r3, [r2, #28]
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_I2C_MspInit+0x74>)
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40005400 	.word	0x40005400
 8001558:	40021000 	.word	0x40021000
 800155c:	40010c00 	.word	0x40010c00

08001560 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <HAL_SPI_MspInit+0x70>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d123      	bne.n	80015c8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <HAL_SPI_MspInit+0x74>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <HAL_SPI_MspInit+0x74>)
 8001586:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_SPI_MspInit+0x74>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_SPI_MspInit+0x74>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <HAL_SPI_MspInit+0x74>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_SPI_MspInit+0x74>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015b0:	23a0      	movs	r3, #160	; 0xa0
 80015b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b8:	2303      	movs	r3, #3
 80015ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	4619      	mov	r1, r3
 80015c2:	4805      	ldr	r0, [pc, #20]	; (80015d8 <HAL_SPI_MspInit+0x78>)
 80015c4:	f000 fa54 	bl	8001a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015c8:	bf00      	nop
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40013000 	.word	0x40013000
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010800 	.word	0x40010800

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <HardFault_Handler+0x4>

080015ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <MemManage_Handler+0x4>

080015f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <BusFault_Handler+0x4>

080015fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <UsageFault_Handler+0x4>

08001600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001628:	f000 f8d6 	bl	80017d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}

08001630 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001634:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001638:	f000 fba4 	bl	8001d84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}

08001640 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <_sbrk+0x50>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <_sbrk+0x16>
		heap_end = &end;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <_sbrk+0x50>)
 8001652:	4a10      	ldr	r2, [pc, #64]	; (8001694 <_sbrk+0x54>)
 8001654:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <_sbrk+0x50>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <_sbrk+0x50>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4413      	add	r3, r2
 8001664:	466a      	mov	r2, sp
 8001666:	4293      	cmp	r3, r2
 8001668:	d907      	bls.n	800167a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800166a:	f001 fdfb 	bl	8003264 <__errno>
 800166e:	4602      	mov	r2, r0
 8001670:	230c      	movs	r3, #12
 8001672:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001678:	e006      	b.n	8001688 <_sbrk+0x48>
	}

	heap_end += incr;
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <_sbrk+0x50>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	4a03      	ldr	r2, [pc, #12]	; (8001690 <_sbrk+0x50>)
 8001684:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001686:	68fb      	ldr	r3, [r7, #12]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000098 	.word	0x20000098
 8001694:	20000568 	.word	0x20000568

08001698 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <SystemInit+0x5c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <SystemInit+0x5c>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <SystemInit+0x5c>)
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	4911      	ldr	r1, [pc, #68]	; (80016f4 <SystemInit+0x5c>)
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <SystemInit+0x60>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <SystemInit+0x5c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <SystemInit+0x5c>)
 80016ba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80016be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <SystemInit+0x5c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <SystemInit+0x5c>)
 80016ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ce:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <SystemInit+0x5c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <SystemInit+0x5c>)
 80016d6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80016da:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <SystemInit+0x5c>)
 80016de:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80016e2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <SystemInit+0x64>)
 80016e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ea:	609a      	str	r2, [r3, #8]
#endif 
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	40021000 	.word	0x40021000
 80016f8:	f8ff0000 	.word	0xf8ff0000
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001700:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001702:	e003      	b.n	800170c <LoopCopyDataInit>

08001704 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001706:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001708:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800170a:	3104      	adds	r1, #4

0800170c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800170c:	480a      	ldr	r0, [pc, #40]	; (8001738 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001710:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001712:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001714:	d3f6      	bcc.n	8001704 <CopyDataInit>
  ldr r2, =_sbss
 8001716:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001718:	e002      	b.n	8001720 <LoopFillZerobss>

0800171a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800171c:	f842 3b04 	str.w	r3, [r2], #4

08001720 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001722:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001724:	d3f9      	bcc.n	800171a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001726:	f7ff ffb7 	bl	8001698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172a:	f001 fda1 	bl	8003270 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800172e:	f7ff fd0f 	bl	8001150 <main>
  bx lr
 8001732:	4770      	bx	lr
  ldr r3, =_sidata
 8001734:	08004a6c 	.word	0x08004a6c
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800173c:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8001740:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8001744:	20000564 	.word	0x20000564

08001748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC1_2_IRQHandler>
	...

0800174c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <HAL_Init+0x28>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a07      	ldr	r2, [pc, #28]	; (8001774 <HAL_Init+0x28>)
 8001756:	f043 0310 	orr.w	r3, r3, #16
 800175a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800175c:	2003      	movs	r0, #3
 800175e:	f000 f945 	bl	80019ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001762:	2000      	movs	r0, #0
 8001764:	f000 f808 	bl	8001778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001768:	f7ff fe8a 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40022000 	.word	0x40022000

08001778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_InitTick+0x54>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_InitTick+0x58>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4619      	mov	r1, r3
 800178a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001792:	fbb2 f3f3 	udiv	r3, r2, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f95d 	bl	8001a56 <HAL_SYSTICK_Config>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00e      	b.n	80017c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b0f      	cmp	r3, #15
 80017aa:	d80a      	bhi.n	80017c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ac:	2200      	movs	r2, #0
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017b4:	f000 f925 	bl	8001a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b8:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <HAL_InitTick+0x5c>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	e000      	b.n	80017c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2000000c 	.word	0x2000000c
 80017d0:	20000014 	.word	0x20000014
 80017d4:	20000010 	.word	0x20000010

080017d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <HAL_IncTick+0x1c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_IncTick+0x20>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a03      	ldr	r2, [pc, #12]	; (80017f8 <HAL_IncTick+0x20>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	20000014 	.word	0x20000014
 80017f8:	2000055c 	.word	0x2000055c

080017fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b02      	ldr	r3, [pc, #8]	; (800180c <HAL_GetTick+0x10>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	2000055c 	.word	0x2000055c

08001810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff fff0 	bl	80017fc <HAL_GetTick>
 800181c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001828:	d005      	beq.n	8001836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_Delay+0x40>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001836:	bf00      	nop
 8001838:	f7ff ffe0 	bl	80017fc <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	429a      	cmp	r2, r3
 8001846:	d8f7      	bhi.n	8001838 <HAL_Delay+0x28>
  {
  }
}
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000014 	.word	0x20000014

08001854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001870:	4013      	ands	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800187c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001886:	4a04      	ldr	r2, [pc, #16]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	60d3      	str	r3, [r2, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <__NVIC_GetPriorityGrouping+0x18>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	f003 0307 	and.w	r3, r3, #7
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	db0b      	blt.n	80018e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	f003 021f 	and.w	r2, r3, #31
 80018d0:	4906      	ldr	r1, [pc, #24]	; (80018ec <__NVIC_EnableIRQ+0x34>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	2001      	movs	r0, #1
 80018da:	fa00 f202 	lsl.w	r2, r0, r2
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	; (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b8:	d301      	bcc.n	80019be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00f      	b.n	80019de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <SysTick_Config+0x40>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c6:	210f      	movs	r1, #15
 80019c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019cc:	f7ff ff90 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <SysTick_Config+0x40>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <SysTick_Config+0x40>)
 80019d8:	2207      	movs	r2, #7
 80019da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	e000e010 	.word	0xe000e010

080019ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff2d 	bl	8001854 <__NVIC_SetPriorityGrouping>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
 8001a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a14:	f7ff ff42 	bl	800189c <__NVIC_GetPriorityGrouping>
 8001a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	6978      	ldr	r0, [r7, #20]
 8001a20:	f7ff ff90 	bl	8001944 <NVIC_EncodePriority>
 8001a24:	4602      	mov	r2, r0
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff5f 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff35 	bl	80018b8 <__NVIC_EnableIRQ>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffa2 	bl	80019a8 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b08b      	sub	sp, #44	; 0x2c
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a82:	e127      	b.n	8001cd4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a84:	2201      	movs	r2, #1
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	f040 8116 	bne.w	8001cce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b12      	cmp	r3, #18
 8001aa8:	d034      	beq.n	8001b14 <HAL_GPIO_Init+0xa4>
 8001aaa:	2b12      	cmp	r3, #18
 8001aac:	d80d      	bhi.n	8001aca <HAL_GPIO_Init+0x5a>
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d02b      	beq.n	8001b0a <HAL_GPIO_Init+0x9a>
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d804      	bhi.n	8001ac0 <HAL_GPIO_Init+0x50>
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d031      	beq.n	8001b1e <HAL_GPIO_Init+0xae>
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d01c      	beq.n	8001af8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001abe:	e048      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	d043      	beq.n	8001b4c <HAL_GPIO_Init+0xdc>
 8001ac4:	2b11      	cmp	r3, #17
 8001ac6:	d01b      	beq.n	8001b00 <HAL_GPIO_Init+0x90>
          break;
 8001ac8:	e043      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001aca:	4a89      	ldr	r2, [pc, #548]	; (8001cf0 <HAL_GPIO_Init+0x280>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d026      	beq.n	8001b1e <HAL_GPIO_Init+0xae>
 8001ad0:	4a87      	ldr	r2, [pc, #540]	; (8001cf0 <HAL_GPIO_Init+0x280>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d806      	bhi.n	8001ae4 <HAL_GPIO_Init+0x74>
 8001ad6:	4a87      	ldr	r2, [pc, #540]	; (8001cf4 <HAL_GPIO_Init+0x284>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d020      	beq.n	8001b1e <HAL_GPIO_Init+0xae>
 8001adc:	4a86      	ldr	r2, [pc, #536]	; (8001cf8 <HAL_GPIO_Init+0x288>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d01d      	beq.n	8001b1e <HAL_GPIO_Init+0xae>
          break;
 8001ae2:	e036      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ae4:	4a85      	ldr	r2, [pc, #532]	; (8001cfc <HAL_GPIO_Init+0x28c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d019      	beq.n	8001b1e <HAL_GPIO_Init+0xae>
 8001aea:	4a85      	ldr	r2, [pc, #532]	; (8001d00 <HAL_GPIO_Init+0x290>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d016      	beq.n	8001b1e <HAL_GPIO_Init+0xae>
 8001af0:	4a84      	ldr	r2, [pc, #528]	; (8001d04 <HAL_GPIO_Init+0x294>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <HAL_GPIO_Init+0xae>
          break;
 8001af6:	e02c      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	623b      	str	r3, [r7, #32]
          break;
 8001afe:	e028      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	3304      	adds	r3, #4
 8001b06:	623b      	str	r3, [r7, #32]
          break;
 8001b08:	e023      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	3308      	adds	r3, #8
 8001b10:	623b      	str	r3, [r7, #32]
          break;
 8001b12:	e01e      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	330c      	adds	r3, #12
 8001b1a:	623b      	str	r3, [r7, #32]
          break;
 8001b1c:	e019      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b26:	2304      	movs	r3, #4
 8001b28:	623b      	str	r3, [r7, #32]
          break;
 8001b2a:	e012      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d105      	bne.n	8001b40 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b34:	2308      	movs	r3, #8
 8001b36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	611a      	str	r2, [r3, #16]
          break;
 8001b3e:	e008      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b40:	2308      	movs	r3, #8
 8001b42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	615a      	str	r2, [r3, #20]
          break;
 8001b4a:	e002      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
          break;
 8001b50:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	2bff      	cmp	r3, #255	; 0xff
 8001b56:	d801      	bhi.n	8001b5c <HAL_GPIO_Init+0xec>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	e001      	b.n	8001b60 <HAL_GPIO_Init+0xf0>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3304      	adds	r3, #4
 8001b60:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2bff      	cmp	r3, #255	; 0xff
 8001b66:	d802      	bhi.n	8001b6e <HAL_GPIO_Init+0xfe>
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_Init+0x104>
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	3b08      	subs	r3, #8
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	210f      	movs	r1, #15
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	401a      	ands	r2, r3
 8001b86:	6a39      	ldr	r1, [r7, #32]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 8096 	beq.w	8001cce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ba2:	4b59      	ldr	r3, [pc, #356]	; (8001d08 <HAL_GPIO_Init+0x298>)
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	4a58      	ldr	r2, [pc, #352]	; (8001d08 <HAL_GPIO_Init+0x298>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6193      	str	r3, [r2, #24]
 8001bae:	4b56      	ldr	r3, [pc, #344]	; (8001d08 <HAL_GPIO_Init+0x298>)
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bba:	4a54      	ldr	r2, [pc, #336]	; (8001d0c <HAL_GPIO_Init+0x29c>)
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	220f      	movs	r2, #15
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4b      	ldr	r2, [pc, #300]	; (8001d10 <HAL_GPIO_Init+0x2a0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0x19e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4a      	ldr	r2, [pc, #296]	; (8001d14 <HAL_GPIO_Init+0x2a4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00d      	beq.n	8001c0a <HAL_GPIO_Init+0x19a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a49      	ldr	r2, [pc, #292]	; (8001d18 <HAL_GPIO_Init+0x2a8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <HAL_GPIO_Init+0x196>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a48      	ldr	r2, [pc, #288]	; (8001d1c <HAL_GPIO_Init+0x2ac>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_GPIO_Init+0x192>
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x1a0>
 8001c02:	2304      	movs	r3, #4
 8001c04:	e004      	b.n	8001c10 <HAL_GPIO_Init+0x1a0>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e002      	b.n	8001c10 <HAL_GPIO_Init+0x1a0>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_GPIO_Init+0x1a0>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c12:	f002 0203 	and.w	r2, r2, #3
 8001c16:	0092      	lsls	r2, r2, #2
 8001c18:	4093      	lsls	r3, r2
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c20:	493a      	ldr	r1, [pc, #232]	; (8001d0c <HAL_GPIO_Init+0x29c>)
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	3302      	adds	r3, #2
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d006      	beq.n	8001c48 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c3a:	4b39      	ldr	r3, [pc, #228]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4938      	ldr	r1, [pc, #224]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
 8001c46:	e006      	b.n	8001c56 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c48:	4b35      	ldr	r3, [pc, #212]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	4933      	ldr	r1, [pc, #204]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d006      	beq.n	8001c70 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c62:	4b2f      	ldr	r3, [pc, #188]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	492e      	ldr	r1, [pc, #184]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	604b      	str	r3, [r1, #4]
 8001c6e:	e006      	b.n	8001c7e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c70:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	4929      	ldr	r1, [pc, #164]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d006      	beq.n	8001c98 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c8a:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	4924      	ldr	r1, [pc, #144]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
 8001c96:	e006      	b.n	8001ca6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	491f      	ldr	r1, [pc, #124]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d006      	beq.n	8001cc0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	491a      	ldr	r1, [pc, #104]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60cb      	str	r3, [r1, #12]
 8001cbe:	e006      	b.n	8001cce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cc0:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	4915      	ldr	r1, [pc, #84]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	fa22 f303 	lsr.w	r3, r2, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f47f aed0 	bne.w	8001a84 <HAL_GPIO_Init+0x14>
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	372c      	adds	r7, #44	; 0x2c
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	10210000 	.word	0x10210000
 8001cf4:	10110000 	.word	0x10110000
 8001cf8:	10120000 	.word	0x10120000
 8001cfc:	10310000 	.word	0x10310000
 8001d00:	10320000 	.word	0x10320000
 8001d04:	10220000 	.word	0x10220000
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40010000 	.word	0x40010000
 8001d10:	40010800 	.word	0x40010800
 8001d14:	40010c00 	.word	0x40010c00
 8001d18:	40011000 	.word	0x40011000
 8001d1c:	40011400 	.word	0x40011400
 8001d20:	40010400 	.word	0x40010400

08001d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
 8001d30:	4613      	mov	r3, r2
 8001d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d34:	787b      	ldrb	r3, [r7, #1]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d3a:	887a      	ldrh	r2, [r7, #2]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d40:	e003      	b.n	8001d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d42:	887b      	ldrh	r3, [r7, #2]
 8001d44:	041a      	lsls	r2, r3, #16
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	611a      	str	r2, [r3, #16]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d6c:	887a      	ldrh	r2, [r7, #2]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001d72:	e002      	b.n	8001d7a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d74:	887a      	ldrh	r2, [r7, #2]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	611a      	str	r2, [r3, #16]
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d006      	beq.n	8001da8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d9a:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fb42 	bl	800142c <HAL_GPIO_EXTI_Callback>
  }
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40010400 	.word	0x40010400

08001db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e10f      	b.n	8001fe6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d106      	bne.n	8001de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fb82 	bl	80014e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2224      	movs	r2, #36	; 0x24
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0201 	bic.w	r2, r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001df8:	f000 ffe4 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 8001dfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4a7b      	ldr	r2, [pc, #492]	; (8001ff0 <HAL_I2C_Init+0x23c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d807      	bhi.n	8001e18 <HAL_I2C_Init+0x64>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4a7a      	ldr	r2, [pc, #488]	; (8001ff4 <HAL_I2C_Init+0x240>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	bf94      	ite	ls
 8001e10:	2301      	movls	r3, #1
 8001e12:	2300      	movhi	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	e006      	b.n	8001e26 <HAL_I2C_Init+0x72>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4a77      	ldr	r2, [pc, #476]	; (8001ff8 <HAL_I2C_Init+0x244>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	bf94      	ite	ls
 8001e20:	2301      	movls	r3, #1
 8001e22:	2300      	movhi	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e0db      	b.n	8001fe6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4a72      	ldr	r2, [pc, #456]	; (8001ffc <HAL_I2C_Init+0x248>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	0c9b      	lsrs	r3, r3, #18
 8001e38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a64      	ldr	r2, [pc, #400]	; (8001ff0 <HAL_I2C_Init+0x23c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d802      	bhi.n	8001e68 <HAL_I2C_Init+0xb4>
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	3301      	adds	r3, #1
 8001e66:	e009      	b.n	8001e7c <HAL_I2C_Init+0xc8>
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	4a63      	ldr	r2, [pc, #396]	; (8002000 <HAL_I2C_Init+0x24c>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	099b      	lsrs	r3, r3, #6
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	430b      	orrs	r3, r1
 8001e82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4956      	ldr	r1, [pc, #344]	; (8001ff0 <HAL_I2C_Init+0x23c>)
 8001e98:	428b      	cmp	r3, r1
 8001e9a:	d80d      	bhi.n	8001eb8 <HAL_I2C_Init+0x104>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	1e59      	subs	r1, r3, #1
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	bf38      	it	cc
 8001eb4:	2304      	movcc	r3, #4
 8001eb6:	e04f      	b.n	8001f58 <HAL_I2C_Init+0x1a4>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d111      	bne.n	8001ee4 <HAL_I2C_Init+0x130>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1e58      	subs	r0, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6859      	ldr	r1, [r3, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	440b      	add	r3, r1
 8001ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bf0c      	ite	eq
 8001edc:	2301      	moveq	r3, #1
 8001ede:	2300      	movne	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	e012      	b.n	8001f0a <HAL_I2C_Init+0x156>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	1e58      	subs	r0, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6859      	ldr	r1, [r3, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	0099      	lsls	r1, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_I2C_Init+0x15e>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e022      	b.n	8001f58 <HAL_I2C_Init+0x1a4>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10e      	bne.n	8001f38 <HAL_I2C_Init+0x184>
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1e58      	subs	r0, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6859      	ldr	r1, [r3, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	440b      	add	r3, r1
 8001f28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f36:	e00f      	b.n	8001f58 <HAL_I2C_Init+0x1a4>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1e58      	subs	r0, r3, #1
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6859      	ldr	r1, [r3, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	0099      	lsls	r1, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f4e:	3301      	adds	r3, #1
 8001f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	6809      	ldr	r1, [r1, #0]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69da      	ldr	r2, [r3, #28]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6911      	ldr	r1, [r2, #16]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68d2      	ldr	r2, [r2, #12]
 8001f92:	4311      	orrs	r1, r2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	000186a0 	.word	0x000186a0
 8001ff4:	001e847f 	.word	0x001e847f
 8001ff8:	003d08ff 	.word	0x003d08ff
 8001ffc:	431bde83 	.word	0x431bde83
 8002000:	10624dd3 	.word	0x10624dd3

08002004 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af02      	add	r7, sp, #8
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	4608      	mov	r0, r1
 800200e:	4611      	mov	r1, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4603      	mov	r3, r0
 8002014:	817b      	strh	r3, [r7, #10]
 8002016:	460b      	mov	r3, r1
 8002018:	813b      	strh	r3, [r7, #8]
 800201a:	4613      	mov	r3, r2
 800201c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800201e:	f7ff fbed 	bl	80017fc <HAL_GetTick>
 8002022:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b20      	cmp	r3, #32
 800202e:	f040 80d9 	bne.w	80021e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	2319      	movs	r3, #25
 8002038:	2201      	movs	r2, #1
 800203a:	496d      	ldr	r1, [pc, #436]	; (80021f0 <HAL_I2C_Mem_Write+0x1ec>)
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 f965 	bl	800230c <I2C_WaitOnFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002048:	2302      	movs	r3, #2
 800204a:	e0cc      	b.n	80021e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_I2C_Mem_Write+0x56>
 8002056:	2302      	movs	r3, #2
 8002058:	e0c5      	b.n	80021e6 <HAL_I2C_Mem_Write+0x1e2>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d007      	beq.n	8002080 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800208e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2221      	movs	r2, #33	; 0x21
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2240      	movs	r2, #64	; 0x40
 800209c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a3a      	ldr	r2, [r7, #32]
 80020aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4a4d      	ldr	r2, [pc, #308]	; (80021f4 <HAL_I2C_Mem_Write+0x1f0>)
 80020c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020c2:	88f8      	ldrh	r0, [r7, #6]
 80020c4:	893a      	ldrh	r2, [r7, #8]
 80020c6:	8979      	ldrh	r1, [r7, #10]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	4603      	mov	r3, r0
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f890 	bl	80021f8 <I2C_RequestMemoryWrite>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d052      	beq.n	8002184 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e081      	b.n	80021e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f000 f9e6 	bl	80024b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00d      	beq.n	800210e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d107      	bne.n	800210a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002108:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e06b      	b.n	80021e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002134:	b29b      	uxth	r3, r3
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b04      	cmp	r3, #4
 800214a:	d11b      	bne.n	8002184 <HAL_I2C_Mem_Write+0x180>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	d017      	beq.n	8002184 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1aa      	bne.n	80020e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f9d2 	bl	800253a <I2C_WaitOnBTFFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00d      	beq.n	80021b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d107      	bne.n	80021b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e016      	b.n	80021e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	e000      	b.n	80021e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80021e4:	2302      	movs	r3, #2
  }
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	00100002 	.word	0x00100002
 80021f4:	ffff0000 	.word	0xffff0000

080021f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	4608      	mov	r0, r1
 8002202:	4611      	mov	r1, r2
 8002204:	461a      	mov	r2, r3
 8002206:	4603      	mov	r3, r0
 8002208:	817b      	strh	r3, [r7, #10]
 800220a:	460b      	mov	r3, r1
 800220c:	813b      	strh	r3, [r7, #8]
 800220e:	4613      	mov	r3, r2
 8002210:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002220:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	2200      	movs	r2, #0
 800222a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 f86c 	bl	800230c <I2C_WaitOnFlagUntilTimeout>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e05f      	b.n	80022fe <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800223e:	897b      	ldrh	r3, [r7, #10]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800224c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	6a3a      	ldr	r2, [r7, #32]
 8002252:	492d      	ldr	r1, [pc, #180]	; (8002308 <I2C_RequestMemoryWrite+0x110>)
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 f8b0 	bl	80023ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e04c      	b.n	80022fe <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800227a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227c:	6a39      	ldr	r1, [r7, #32]
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f91a 	bl	80024b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00d      	beq.n	80022a6 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	2b04      	cmp	r3, #4
 8002290:	d107      	bne.n	80022a2 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e02b      	b.n	80022fe <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d105      	bne.n	80022b8 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022ac:	893b      	ldrh	r3, [r7, #8]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	611a      	str	r2, [r3, #16]
 80022b6:	e021      	b.n	80022fc <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022b8:	893b      	ldrh	r3, [r7, #8]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	b29b      	uxth	r3, r3
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c8:	6a39      	ldr	r1, [r7, #32]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f8f4 	bl	80024b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00d      	beq.n	80022f2 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d107      	bne.n	80022ee <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e005      	b.n	80022fe <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022f2:	893b      	ldrh	r3, [r7, #8]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	00010002 	.word	0x00010002

0800230c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	4613      	mov	r3, r2
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800231c:	e025      	b.n	800236a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002324:	d021      	beq.n	800236a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002326:	f7ff fa69 	bl	80017fc <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	429a      	cmp	r2, r3
 8002334:	d302      	bcc.n	800233c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d116      	bne.n	800236a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f043 0220 	orr.w	r2, r3, #32
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e023      	b.n	80023b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d10d      	bne.n	8002390 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4013      	ands	r3, r2
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	bf0c      	ite	eq
 8002386:	2301      	moveq	r3, #1
 8002388:	2300      	movne	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	e00c      	b.n	80023aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4013      	ands	r3, r2
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf0c      	ite	eq
 80023a2:	2301      	moveq	r3, #1
 80023a4:	2300      	movne	r3, #0
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d0b6      	beq.n	800231e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023c8:	e051      	b.n	800246e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d8:	d123      	bne.n	8002422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f043 0204 	orr.w	r2, r3, #4
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e046      	b.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002428:	d021      	beq.n	800246e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7ff f9e7 	bl	80017fc <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d116      	bne.n	800246e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f043 0220 	orr.w	r2, r3, #32
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e020      	b.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d10c      	bne.n	8002492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	4013      	ands	r3, r2
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	bf14      	ite	ne
 800248a:	2301      	movne	r3, #1
 800248c:	2300      	moveq	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	e00b      	b.n	80024aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	43da      	mvns	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	4013      	ands	r3, r2
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf14      	ite	ne
 80024a4:	2301      	movne	r3, #1
 80024a6:	2300      	moveq	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d18d      	bne.n	80023ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024c4:	e02d      	b.n	8002522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f878 	bl	80025bc <I2C_IsAcknowledgeFailed>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e02d      	b.n	8002532 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024dc:	d021      	beq.n	8002522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024de:	f7ff f98d 	bl	80017fc <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d302      	bcc.n	80024f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d116      	bne.n	8002522 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f043 0220 	orr.w	r2, r3, #32
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e007      	b.n	8002532 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252c:	2b80      	cmp	r3, #128	; 0x80
 800252e:	d1ca      	bne.n	80024c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b084      	sub	sp, #16
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002546:	e02d      	b.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f837 	bl	80025bc <I2C_IsAcknowledgeFailed>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e02d      	b.n	80025b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800255e:	d021      	beq.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002560:	f7ff f94c 	bl	80017fc <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	429a      	cmp	r2, r3
 800256e:	d302      	bcc.n	8002576 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d116      	bne.n	80025a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f043 0220 	orr.w	r2, r3, #32
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e007      	b.n	80025b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d1ca      	bne.n	8002548 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d2:	d11b      	bne.n	800260c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f043 0204 	orr.w	r2, r3, #4
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e26c      	b.n	8002b04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8087 	beq.w	8002746 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002638:	4b92      	ldr	r3, [pc, #584]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b04      	cmp	r3, #4
 8002642:	d00c      	beq.n	800265e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002644:	4b8f      	ldr	r3, [pc, #572]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b08      	cmp	r3, #8
 800264e:	d112      	bne.n	8002676 <HAL_RCC_OscConfig+0x5e>
 8002650:	4b8c      	ldr	r3, [pc, #560]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265c:	d10b      	bne.n	8002676 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265e:	4b89      	ldr	r3, [pc, #548]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d06c      	beq.n	8002744 <HAL_RCC_OscConfig+0x12c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d168      	bne.n	8002744 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e246      	b.n	8002b04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x76>
 8002680:	4b80      	ldr	r3, [pc, #512]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a7f      	ldr	r2, [pc, #508]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	e02e      	b.n	80026ec <HAL_RCC_OscConfig+0xd4>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x98>
 8002696:	4b7b      	ldr	r3, [pc, #492]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a7a      	ldr	r2, [pc, #488]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800269c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b78      	ldr	r3, [pc, #480]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a77      	ldr	r2, [pc, #476]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e01d      	b.n	80026ec <HAL_RCC_OscConfig+0xd4>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0xbc>
 80026ba:	4b72      	ldr	r3, [pc, #456]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a71      	ldr	r2, [pc, #452]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b6f      	ldr	r3, [pc, #444]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6e      	ldr	r2, [pc, #440]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0xd4>
 80026d4:	4b6b      	ldr	r3, [pc, #428]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a6a      	ldr	r2, [pc, #424]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b68      	ldr	r3, [pc, #416]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a67      	ldr	r2, [pc, #412]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80026e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7ff f882 	bl	80017fc <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026fc:	f7ff f87e 	bl	80017fc <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	; 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e1fa      	b.n	8002b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b5d      	ldr	r3, [pc, #372]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0xe4>
 800271a:	e014      	b.n	8002746 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7ff f86e 	bl	80017fc <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002724:	f7ff f86a 	bl	80017fc <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e1e6      	b.n	8002b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	4b53      	ldr	r3, [pc, #332]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x10c>
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d063      	beq.n	800281a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002752:	4b4c      	ldr	r3, [pc, #304]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800275e:	4b49      	ldr	r3, [pc, #292]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b08      	cmp	r3, #8
 8002768:	d11c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x18c>
 800276a:	4b46      	ldr	r3, [pc, #280]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d116      	bne.n	80027a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002776:	4b43      	ldr	r3, [pc, #268]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_RCC_OscConfig+0x176>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d001      	beq.n	800278e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e1ba      	b.n	8002b04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278e:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4939      	ldr	r1, [pc, #228]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a2:	e03a      	b.n	800281a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d020      	beq.n	80027ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ac:	4b36      	ldr	r3, [pc, #216]	; (8002888 <HAL_RCC_OscConfig+0x270>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7ff f823 	bl	80017fc <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ba:	f7ff f81f 	bl	80017fc <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e19b      	b.n	8002b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d8:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4927      	ldr	r1, [pc, #156]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]
 80027ec:	e015      	b.n	800281a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_RCC_OscConfig+0x270>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7ff f802 	bl	80017fc <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fc:	f7fe fffe 	bl	80017fc <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e17a      	b.n	8002b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d03a      	beq.n	800289c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d019      	beq.n	8002862 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282e:	4b17      	ldr	r3, [pc, #92]	; (800288c <HAL_RCC_OscConfig+0x274>)
 8002830:	2201      	movs	r2, #1
 8002832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002834:	f7fe ffe2 	bl	80017fc <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283c:	f7fe ffde 	bl	80017fc <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e15a      	b.n	8002b04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284e:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <HAL_RCC_OscConfig+0x26c>)
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800285a:	2001      	movs	r0, #1
 800285c:	f000 fac6 	bl	8002dec <RCC_Delay>
 8002860:	e01c      	b.n	800289c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <HAL_RCC_OscConfig+0x274>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002868:	f7fe ffc8 	bl	80017fc <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286e:	e00f      	b.n	8002890 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002870:	f7fe ffc4 	bl	80017fc <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d908      	bls.n	8002890 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e140      	b.n	8002b04 <HAL_RCC_OscConfig+0x4ec>
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	42420000 	.word	0x42420000
 800288c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002890:	4b9e      	ldr	r3, [pc, #632]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1e9      	bne.n	8002870 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80a6 	beq.w	80029f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ae:	4b97      	ldr	r3, [pc, #604]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10d      	bne.n	80028d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ba:	4b94      	ldr	r3, [pc, #592]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	4a93      	ldr	r2, [pc, #588]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c4:	61d3      	str	r3, [r2, #28]
 80028c6:	4b91      	ldr	r3, [pc, #580]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d2:	2301      	movs	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	4b8e      	ldr	r3, [pc, #568]	; (8002b10 <HAL_RCC_OscConfig+0x4f8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d118      	bne.n	8002914 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e2:	4b8b      	ldr	r3, [pc, #556]	; (8002b10 <HAL_RCC_OscConfig+0x4f8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a8a      	ldr	r2, [pc, #552]	; (8002b10 <HAL_RCC_OscConfig+0x4f8>)
 80028e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ee:	f7fe ff85 	bl	80017fc <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f6:	f7fe ff81 	bl	80017fc <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b64      	cmp	r3, #100	; 0x64
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e0fd      	b.n	8002b04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	4b81      	ldr	r3, [pc, #516]	; (8002b10 <HAL_RCC_OscConfig+0x4f8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d106      	bne.n	800292a <HAL_RCC_OscConfig+0x312>
 800291c:	4b7b      	ldr	r3, [pc, #492]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4a7a      	ldr	r2, [pc, #488]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6213      	str	r3, [r2, #32]
 8002928:	e02d      	b.n	8002986 <HAL_RCC_OscConfig+0x36e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0x334>
 8002932:	4b76      	ldr	r3, [pc, #472]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4a75      	ldr	r2, [pc, #468]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	6213      	str	r3, [r2, #32]
 800293e:	4b73      	ldr	r3, [pc, #460]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4a72      	ldr	r2, [pc, #456]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	6213      	str	r3, [r2, #32]
 800294a:	e01c      	b.n	8002986 <HAL_RCC_OscConfig+0x36e>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2b05      	cmp	r3, #5
 8002952:	d10c      	bne.n	800296e <HAL_RCC_OscConfig+0x356>
 8002954:	4b6d      	ldr	r3, [pc, #436]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	4a6c      	ldr	r2, [pc, #432]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 800295a:	f043 0304 	orr.w	r3, r3, #4
 800295e:	6213      	str	r3, [r2, #32]
 8002960:	4b6a      	ldr	r3, [pc, #424]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4a69      	ldr	r2, [pc, #420]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6213      	str	r3, [r2, #32]
 800296c:	e00b      	b.n	8002986 <HAL_RCC_OscConfig+0x36e>
 800296e:	4b67      	ldr	r3, [pc, #412]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4a66      	ldr	r2, [pc, #408]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	6213      	str	r3, [r2, #32]
 800297a:	4b64      	ldr	r3, [pc, #400]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a63      	ldr	r2, [pc, #396]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002980:	f023 0304 	bic.w	r3, r3, #4
 8002984:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d015      	beq.n	80029ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298e:	f7fe ff35 	bl	80017fc <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002994:	e00a      	b.n	80029ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002996:	f7fe ff31 	bl	80017fc <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e0ab      	b.n	8002b04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ac:	4b57      	ldr	r3, [pc, #348]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0ee      	beq.n	8002996 <HAL_RCC_OscConfig+0x37e>
 80029b8:	e014      	b.n	80029e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ba:	f7fe ff1f 	bl	80017fc <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fe ff1b 	bl	80017fc <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e095      	b.n	8002b04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d8:	4b4c      	ldr	r3, [pc, #304]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1ee      	bne.n	80029c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d105      	bne.n	80029f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ea:	4b48      	ldr	r3, [pc, #288]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	4a47      	ldr	r2, [pc, #284]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 80029f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8081 	beq.w	8002b02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a00:	4b42      	ldr	r3, [pc, #264]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d061      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d146      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a14:	4b3f      	ldr	r3, [pc, #252]	; (8002b14 <HAL_RCC_OscConfig+0x4fc>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe feef 	bl	80017fc <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fe feeb 	bl	80017fc <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e067      	b.n	8002b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a34:	4b35      	ldr	r3, [pc, #212]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a48:	d108      	bne.n	8002a5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a4a:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	492d      	ldr	r1, [pc, #180]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a5c:	4b2b      	ldr	r3, [pc, #172]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a19      	ldr	r1, [r3, #32]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	4927      	ldr	r1, [pc, #156]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a74:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <HAL_RCC_OscConfig+0x4fc>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7a:	f7fe febf 	bl	80017fc <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a82:	f7fe febb 	bl	80017fc <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e037      	b.n	8002b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a94:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x46a>
 8002aa0:	e02f      	b.n	8002b02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <HAL_RCC_OscConfig+0x4fc>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fea8 	bl	80017fc <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fea4 	bl	80017fc <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e020      	b.n	8002b04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x498>
 8002ace:	e018      	b.n	8002b02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e013      	b.n	8002b04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_RCC_OscConfig+0x4f4>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d106      	bne.n	8002afe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d001      	beq.n	8002b02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40007000 	.word	0x40007000
 8002b14:	42420060 	.word	0x42420060

08002b18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0d0      	b.n	8002cce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b6a      	ldr	r3, [pc, #424]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d910      	bls.n	8002b5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b67      	ldr	r3, [pc, #412]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 0207 	bic.w	r2, r3, #7
 8002b42:	4965      	ldr	r1, [pc, #404]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b63      	ldr	r3, [pc, #396]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0b8      	b.n	8002cce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d020      	beq.n	8002baa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b74:	4b59      	ldr	r3, [pc, #356]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4a58      	ldr	r2, [pc, #352]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b8c:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4a52      	ldr	r2, [pc, #328]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b98:	4b50      	ldr	r3, [pc, #320]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	494d      	ldr	r1, [pc, #308]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d040      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	4b47      	ldr	r3, [pc, #284]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d115      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e07f      	b.n	8002cce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd6:	4b41      	ldr	r3, [pc, #260]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e073      	b.n	8002cce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be6:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e06b      	b.n	8002cce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bf6:	4b39      	ldr	r3, [pc, #228]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f023 0203 	bic.w	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4936      	ldr	r1, [pc, #216]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c08:	f7fe fdf8 	bl	80017fc <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	e00a      	b.n	8002c26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c10:	f7fe fdf4 	bl	80017fc <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e053      	b.n	8002cce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 020c 	and.w	r2, r3, #12
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d1eb      	bne.n	8002c10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c38:	4b27      	ldr	r3, [pc, #156]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d210      	bcs.n	8002c68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c46:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 0207 	bic.w	r2, r3, #7
 8002c4e:	4922      	ldr	r1, [pc, #136]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c56:	4b20      	ldr	r3, [pc, #128]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d001      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e032      	b.n	8002cce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c74:	4b19      	ldr	r3, [pc, #100]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4916      	ldr	r1, [pc, #88]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d009      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c92:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	490e      	ldr	r1, [pc, #56]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ca6:	f000 f821 	bl	8002cec <HAL_RCC_GetSysClockFreq>
 8002caa:	4601      	mov	r1, r0
 8002cac:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb8:	5cd3      	ldrb	r3, [r2, r3]
 8002cba:	fa21 f303 	lsr.w	r3, r1, r3
 8002cbe:	4a09      	ldr	r2, [pc, #36]	; (8002ce4 <HAL_RCC_ClockConfig+0x1cc>)
 8002cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cc2:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <HAL_RCC_ClockConfig+0x1d0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fd56 	bl	8001778 <HAL_InitTick>

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40022000 	.word	0x40022000
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	08004a18 	.word	0x08004a18
 8002ce4:	2000000c 	.word	0x2000000c
 8002ce8:	20000010 	.word	0x20000010

08002cec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cec:	b490      	push	{r4, r7}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cf2:	4b2a      	ldr	r3, [pc, #168]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cf4:	1d3c      	adds	r4, r7, #4
 8002cf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cfc:	4b28      	ldr	r3, [pc, #160]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d16:	4b23      	ldr	r3, [pc, #140]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d002      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0x40>
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d003      	beq.n	8002d32 <HAL_RCC_GetSysClockFreq+0x46>
 8002d2a:	e02d      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d2c:	4b1e      	ldr	r3, [pc, #120]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d2e:	623b      	str	r3, [r7, #32]
      break;
 8002d30:	e02d      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	0c9b      	lsrs	r3, r3, #18
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d3e:	4413      	add	r3, r2
 8002d40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d013      	beq.n	8002d78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d50:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	0c5b      	lsrs	r3, r3, #17
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d5e:	4413      	add	r3, r2
 8002d60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	4a0f      	ldr	r2, [pc, #60]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d6a:	fb02 f203 	mul.w	r2, r2, r3
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
 8002d76:	e004      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	4a0c      	ldr	r2, [pc, #48]	; (8002dac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d7c:	fb02 f303 	mul.w	r3, r2, r3
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	623b      	str	r3, [r7, #32]
      break;
 8002d86:	e002      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d88:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d8a:	623b      	str	r3, [r7, #32]
      break;
 8002d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3728      	adds	r7, #40	; 0x28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc90      	pop	{r4, r7}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	08003b2c 	.word	0x08003b2c
 8002da0:	08003b3c 	.word	0x08003b3c
 8002da4:	40021000 	.word	0x40021000
 8002da8:	007a1200 	.word	0x007a1200
 8002dac:	003d0900 	.word	0x003d0900

08002db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db4:	4b02      	ldr	r3, [pc, #8]	; (8002dc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	2000000c 	.word	0x2000000c

08002dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dc8:	f7ff fff2 	bl	8002db0 <HAL_RCC_GetHCLKFreq>
 8002dcc:	4601      	mov	r1, r0
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	4a03      	ldr	r2, [pc, #12]	; (8002de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dda:	5cd3      	ldrb	r3, [r2, r3]
 8002ddc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40021000 	.word	0x40021000
 8002de8:	08004a28 	.word	0x08004a28

08002dec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <RCC_Delay+0x34>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a0a      	ldr	r2, [pc, #40]	; (8002e24 <RCC_Delay+0x38>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	0a5b      	lsrs	r3, r3, #9
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	fb02 f303 	mul.w	r3, r2, r3
 8002e06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e08:	bf00      	nop
  }
  while (Delay --);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1e5a      	subs	r2, r3, #1
 8002e0e:	60fa      	str	r2, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f9      	bne.n	8002e08 <RCC_Delay+0x1c>
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	2000000c 	.word	0x2000000c
 8002e24:	10624dd3 	.word	0x10624dd3

08002e28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e053      	b.n	8002ee2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7fe fb83 	bl	8001560 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e70:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	ea42 0103 	orr.w	r1, r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	0c1a      	lsrs	r2, r3, #16
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f002 0204 	and.w	r2, r2, #4
 8002ec0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69da      	ldr	r2, [r3, #28]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ed0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b088      	sub	sp, #32
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_SPI_Transmit+0x22>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e11e      	b.n	800314a <HAL_SPI_Transmit+0x260>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f14:	f7fe fc72 	bl	80017fc <HAL_GetTick>
 8002f18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002f1a:	88fb      	ldrh	r3, [r7, #6]
 8002f1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d002      	beq.n	8002f30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f2e:	e103      	b.n	8003138 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <HAL_SPI_Transmit+0x52>
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d102      	bne.n	8002f42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f40:	e0fa      	b.n	8003138 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2203      	movs	r2, #3
 8002f46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	88fa      	ldrh	r2, [r7, #6]
 8002f5a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	88fa      	ldrh	r2, [r7, #6]
 8002f60:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f88:	d107      	bne.n	8002f9a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa4:	2b40      	cmp	r3, #64	; 0x40
 8002fa6:	d007      	beq.n	8002fb8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fc0:	d14b      	bne.n	800305a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_SPI_Transmit+0xe6>
 8002fca:	8afb      	ldrh	r3, [r7, #22]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d13e      	bne.n	800304e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	881a      	ldrh	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	1c9a      	adds	r2, r3, #2
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ff4:	e02b      	b.n	800304e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b02      	cmp	r3, #2
 8003002:	d112      	bne.n	800302a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	881a      	ldrh	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	1c9a      	adds	r2, r3, #2
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	86da      	strh	r2, [r3, #54]	; 0x36
 8003028:	e011      	b.n	800304e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800302a:	f7fe fbe7 	bl	80017fc <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d803      	bhi.n	8003042 <HAL_SPI_Transmit+0x158>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003040:	d102      	bne.n	8003048 <HAL_SPI_Transmit+0x15e>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800304c:	e074      	b.n	8003138 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1ce      	bne.n	8002ff6 <HAL_SPI_Transmit+0x10c>
 8003058:	e04c      	b.n	80030f4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_SPI_Transmit+0x17e>
 8003062:	8afb      	ldrh	r3, [r7, #22]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d140      	bne.n	80030ea <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	330c      	adds	r3, #12
 8003072:	7812      	ldrb	r2, [r2, #0]
 8003074:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003084:	b29b      	uxth	r3, r3
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800308e:	e02c      	b.n	80030ea <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b02      	cmp	r3, #2
 800309c:	d113      	bne.n	80030c6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	330c      	adds	r3, #12
 80030a8:	7812      	ldrb	r2, [r2, #0]
 80030aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80030c4:	e011      	b.n	80030ea <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030c6:	f7fe fb99 	bl	80017fc <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d803      	bhi.n	80030de <HAL_SPI_Transmit+0x1f4>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030dc:	d102      	bne.n	80030e4 <HAL_SPI_Transmit+0x1fa>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80030e8:	e026      	b.n	8003138 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1cd      	bne.n	8003090 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	6839      	ldr	r1, [r7, #0]
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f894 	bl	8003226 <SPI_EndRxTxTransaction>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	77fb      	strb	r3, [r7, #31]
 8003134:	e000      	b.n	8003138 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003136:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003148:	7ffb      	ldrb	r3, [r7, #31]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3720      	adds	r7, #32
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	603b      	str	r3, [r7, #0]
 800315e:	4613      	mov	r3, r2
 8003160:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003162:	e04c      	b.n	80031fe <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800316a:	d048      	beq.n	80031fe <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800316c:	f7fe fb46 	bl	80017fc <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d902      	bls.n	8003182 <SPI_WaitFlagStateUntilTimeout+0x30>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d13d      	bne.n	80031fe <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003190:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800319a:	d111      	bne.n	80031c0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a4:	d004      	beq.n	80031b0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ae:	d107      	bne.n	80031c0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c8:	d10f      	bne.n	80031ea <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e00f      	b.n	800321e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4013      	ands	r3, r2
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	429a      	cmp	r2, r3
 800320c:	bf0c      	ite	eq
 800320e:	2301      	moveq	r3, #1
 8003210:	2300      	movne	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	429a      	cmp	r2, r3
 800321a:	d1a3      	bne.n	8003164 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af02      	add	r7, sp, #8
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2200      	movs	r2, #0
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f7ff ff88 	bl	8003152 <SPI_WaitFlagStateUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d007      	beq.n	8003258 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324c:	f043 0220 	orr.w	r2, r3, #32
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e000      	b.n	800325a <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <__errno>:
 8003264:	4b01      	ldr	r3, [pc, #4]	; (800326c <__errno+0x8>)
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	20000018 	.word	0x20000018

08003270 <__libc_init_array>:
 8003270:	b570      	push	{r4, r5, r6, lr}
 8003272:	2500      	movs	r5, #0
 8003274:	4e0c      	ldr	r6, [pc, #48]	; (80032a8 <__libc_init_array+0x38>)
 8003276:	4c0d      	ldr	r4, [pc, #52]	; (80032ac <__libc_init_array+0x3c>)
 8003278:	1ba4      	subs	r4, r4, r6
 800327a:	10a4      	asrs	r4, r4, #2
 800327c:	42a5      	cmp	r5, r4
 800327e:	d109      	bne.n	8003294 <__libc_init_array+0x24>
 8003280:	f000 fc34 	bl	8003aec <_init>
 8003284:	2500      	movs	r5, #0
 8003286:	4e0a      	ldr	r6, [pc, #40]	; (80032b0 <__libc_init_array+0x40>)
 8003288:	4c0a      	ldr	r4, [pc, #40]	; (80032b4 <__libc_init_array+0x44>)
 800328a:	1ba4      	subs	r4, r4, r6
 800328c:	10a4      	asrs	r4, r4, #2
 800328e:	42a5      	cmp	r5, r4
 8003290:	d105      	bne.n	800329e <__libc_init_array+0x2e>
 8003292:	bd70      	pop	{r4, r5, r6, pc}
 8003294:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003298:	4798      	blx	r3
 800329a:	3501      	adds	r5, #1
 800329c:	e7ee      	b.n	800327c <__libc_init_array+0xc>
 800329e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032a2:	4798      	blx	r3
 80032a4:	3501      	adds	r5, #1
 80032a6:	e7f2      	b.n	800328e <__libc_init_array+0x1e>
 80032a8:	08004a64 	.word	0x08004a64
 80032ac:	08004a64 	.word	0x08004a64
 80032b0:	08004a64 	.word	0x08004a64
 80032b4:	08004a68 	.word	0x08004a68

080032b8 <memset>:
 80032b8:	4603      	mov	r3, r0
 80032ba:	4402      	add	r2, r0
 80032bc:	4293      	cmp	r3, r2
 80032be:	d100      	bne.n	80032c2 <memset+0xa>
 80032c0:	4770      	bx	lr
 80032c2:	f803 1b01 	strb.w	r1, [r3], #1
 80032c6:	e7f9      	b.n	80032bc <memset+0x4>

080032c8 <siprintf>:
 80032c8:	b40e      	push	{r1, r2, r3}
 80032ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032ce:	b500      	push	{lr}
 80032d0:	b09c      	sub	sp, #112	; 0x70
 80032d2:	ab1d      	add	r3, sp, #116	; 0x74
 80032d4:	9002      	str	r0, [sp, #8]
 80032d6:	9006      	str	r0, [sp, #24]
 80032d8:	9107      	str	r1, [sp, #28]
 80032da:	9104      	str	r1, [sp, #16]
 80032dc:	4808      	ldr	r0, [pc, #32]	; (8003300 <siprintf+0x38>)
 80032de:	4909      	ldr	r1, [pc, #36]	; (8003304 <siprintf+0x3c>)
 80032e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80032e4:	9105      	str	r1, [sp, #20]
 80032e6:	6800      	ldr	r0, [r0, #0]
 80032e8:	a902      	add	r1, sp, #8
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	f000 f866 	bl	80033bc <_svfiprintf_r>
 80032f0:	2200      	movs	r2, #0
 80032f2:	9b02      	ldr	r3, [sp, #8]
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	b01c      	add	sp, #112	; 0x70
 80032f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80032fc:	b003      	add	sp, #12
 80032fe:	4770      	bx	lr
 8003300:	20000018 	.word	0x20000018
 8003304:	ffff0208 	.word	0xffff0208

08003308 <__ssputs_r>:
 8003308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800330c:	688e      	ldr	r6, [r1, #8]
 800330e:	4682      	mov	sl, r0
 8003310:	429e      	cmp	r6, r3
 8003312:	460c      	mov	r4, r1
 8003314:	4690      	mov	r8, r2
 8003316:	4699      	mov	r9, r3
 8003318:	d837      	bhi.n	800338a <__ssputs_r+0x82>
 800331a:	898a      	ldrh	r2, [r1, #12]
 800331c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003320:	d031      	beq.n	8003386 <__ssputs_r+0x7e>
 8003322:	2302      	movs	r3, #2
 8003324:	6825      	ldr	r5, [r4, #0]
 8003326:	6909      	ldr	r1, [r1, #16]
 8003328:	1a6f      	subs	r7, r5, r1
 800332a:	6965      	ldr	r5, [r4, #20]
 800332c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003330:	fb95 f5f3 	sdiv	r5, r5, r3
 8003334:	f109 0301 	add.w	r3, r9, #1
 8003338:	443b      	add	r3, r7
 800333a:	429d      	cmp	r5, r3
 800333c:	bf38      	it	cc
 800333e:	461d      	movcc	r5, r3
 8003340:	0553      	lsls	r3, r2, #21
 8003342:	d530      	bpl.n	80033a6 <__ssputs_r+0x9e>
 8003344:	4629      	mov	r1, r5
 8003346:	f000 fb37 	bl	80039b8 <_malloc_r>
 800334a:	4606      	mov	r6, r0
 800334c:	b950      	cbnz	r0, 8003364 <__ssputs_r+0x5c>
 800334e:	230c      	movs	r3, #12
 8003350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003354:	f8ca 3000 	str.w	r3, [sl]
 8003358:	89a3      	ldrh	r3, [r4, #12]
 800335a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800335e:	81a3      	strh	r3, [r4, #12]
 8003360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003364:	463a      	mov	r2, r7
 8003366:	6921      	ldr	r1, [r4, #16]
 8003368:	f000 fab6 	bl	80038d8 <memcpy>
 800336c:	89a3      	ldrh	r3, [r4, #12]
 800336e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003376:	81a3      	strh	r3, [r4, #12]
 8003378:	6126      	str	r6, [r4, #16]
 800337a:	443e      	add	r6, r7
 800337c:	6026      	str	r6, [r4, #0]
 800337e:	464e      	mov	r6, r9
 8003380:	6165      	str	r5, [r4, #20]
 8003382:	1bed      	subs	r5, r5, r7
 8003384:	60a5      	str	r5, [r4, #8]
 8003386:	454e      	cmp	r6, r9
 8003388:	d900      	bls.n	800338c <__ssputs_r+0x84>
 800338a:	464e      	mov	r6, r9
 800338c:	4632      	mov	r2, r6
 800338e:	4641      	mov	r1, r8
 8003390:	6820      	ldr	r0, [r4, #0]
 8003392:	f000 faac 	bl	80038ee <memmove>
 8003396:	68a3      	ldr	r3, [r4, #8]
 8003398:	2000      	movs	r0, #0
 800339a:	1b9b      	subs	r3, r3, r6
 800339c:	60a3      	str	r3, [r4, #8]
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	441e      	add	r6, r3
 80033a2:	6026      	str	r6, [r4, #0]
 80033a4:	e7dc      	b.n	8003360 <__ssputs_r+0x58>
 80033a6:	462a      	mov	r2, r5
 80033a8:	f000 fb60 	bl	8003a6c <_realloc_r>
 80033ac:	4606      	mov	r6, r0
 80033ae:	2800      	cmp	r0, #0
 80033b0:	d1e2      	bne.n	8003378 <__ssputs_r+0x70>
 80033b2:	6921      	ldr	r1, [r4, #16]
 80033b4:	4650      	mov	r0, sl
 80033b6:	f000 fab3 	bl	8003920 <_free_r>
 80033ba:	e7c8      	b.n	800334e <__ssputs_r+0x46>

080033bc <_svfiprintf_r>:
 80033bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c0:	461d      	mov	r5, r3
 80033c2:	898b      	ldrh	r3, [r1, #12]
 80033c4:	b09d      	sub	sp, #116	; 0x74
 80033c6:	061f      	lsls	r7, r3, #24
 80033c8:	4680      	mov	r8, r0
 80033ca:	460c      	mov	r4, r1
 80033cc:	4616      	mov	r6, r2
 80033ce:	d50f      	bpl.n	80033f0 <_svfiprintf_r+0x34>
 80033d0:	690b      	ldr	r3, [r1, #16]
 80033d2:	b96b      	cbnz	r3, 80033f0 <_svfiprintf_r+0x34>
 80033d4:	2140      	movs	r1, #64	; 0x40
 80033d6:	f000 faef 	bl	80039b8 <_malloc_r>
 80033da:	6020      	str	r0, [r4, #0]
 80033dc:	6120      	str	r0, [r4, #16]
 80033de:	b928      	cbnz	r0, 80033ec <_svfiprintf_r+0x30>
 80033e0:	230c      	movs	r3, #12
 80033e2:	f8c8 3000 	str.w	r3, [r8]
 80033e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033ea:	e0c8      	b.n	800357e <_svfiprintf_r+0x1c2>
 80033ec:	2340      	movs	r3, #64	; 0x40
 80033ee:	6163      	str	r3, [r4, #20]
 80033f0:	2300      	movs	r3, #0
 80033f2:	9309      	str	r3, [sp, #36]	; 0x24
 80033f4:	2320      	movs	r3, #32
 80033f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033fa:	2330      	movs	r3, #48	; 0x30
 80033fc:	f04f 0b01 	mov.w	fp, #1
 8003400:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003404:	9503      	str	r5, [sp, #12]
 8003406:	4637      	mov	r7, r6
 8003408:	463d      	mov	r5, r7
 800340a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800340e:	b10b      	cbz	r3, 8003414 <_svfiprintf_r+0x58>
 8003410:	2b25      	cmp	r3, #37	; 0x25
 8003412:	d13e      	bne.n	8003492 <_svfiprintf_r+0xd6>
 8003414:	ebb7 0a06 	subs.w	sl, r7, r6
 8003418:	d00b      	beq.n	8003432 <_svfiprintf_r+0x76>
 800341a:	4653      	mov	r3, sl
 800341c:	4632      	mov	r2, r6
 800341e:	4621      	mov	r1, r4
 8003420:	4640      	mov	r0, r8
 8003422:	f7ff ff71 	bl	8003308 <__ssputs_r>
 8003426:	3001      	adds	r0, #1
 8003428:	f000 80a4 	beq.w	8003574 <_svfiprintf_r+0x1b8>
 800342c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800342e:	4453      	add	r3, sl
 8003430:	9309      	str	r3, [sp, #36]	; 0x24
 8003432:	783b      	ldrb	r3, [r7, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 809d 	beq.w	8003574 <_svfiprintf_r+0x1b8>
 800343a:	2300      	movs	r3, #0
 800343c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003444:	9304      	str	r3, [sp, #16]
 8003446:	9307      	str	r3, [sp, #28]
 8003448:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800344c:	931a      	str	r3, [sp, #104]	; 0x68
 800344e:	462f      	mov	r7, r5
 8003450:	2205      	movs	r2, #5
 8003452:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003456:	4850      	ldr	r0, [pc, #320]	; (8003598 <_svfiprintf_r+0x1dc>)
 8003458:	f000 fa30 	bl	80038bc <memchr>
 800345c:	9b04      	ldr	r3, [sp, #16]
 800345e:	b9d0      	cbnz	r0, 8003496 <_svfiprintf_r+0xda>
 8003460:	06d9      	lsls	r1, r3, #27
 8003462:	bf44      	itt	mi
 8003464:	2220      	movmi	r2, #32
 8003466:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800346a:	071a      	lsls	r2, r3, #28
 800346c:	bf44      	itt	mi
 800346e:	222b      	movmi	r2, #43	; 0x2b
 8003470:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003474:	782a      	ldrb	r2, [r5, #0]
 8003476:	2a2a      	cmp	r2, #42	; 0x2a
 8003478:	d015      	beq.n	80034a6 <_svfiprintf_r+0xea>
 800347a:	462f      	mov	r7, r5
 800347c:	2000      	movs	r0, #0
 800347e:	250a      	movs	r5, #10
 8003480:	9a07      	ldr	r2, [sp, #28]
 8003482:	4639      	mov	r1, r7
 8003484:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003488:	3b30      	subs	r3, #48	; 0x30
 800348a:	2b09      	cmp	r3, #9
 800348c:	d94d      	bls.n	800352a <_svfiprintf_r+0x16e>
 800348e:	b1b8      	cbz	r0, 80034c0 <_svfiprintf_r+0x104>
 8003490:	e00f      	b.n	80034b2 <_svfiprintf_r+0xf6>
 8003492:	462f      	mov	r7, r5
 8003494:	e7b8      	b.n	8003408 <_svfiprintf_r+0x4c>
 8003496:	4a40      	ldr	r2, [pc, #256]	; (8003598 <_svfiprintf_r+0x1dc>)
 8003498:	463d      	mov	r5, r7
 800349a:	1a80      	subs	r0, r0, r2
 800349c:	fa0b f000 	lsl.w	r0, fp, r0
 80034a0:	4318      	orrs	r0, r3
 80034a2:	9004      	str	r0, [sp, #16]
 80034a4:	e7d3      	b.n	800344e <_svfiprintf_r+0x92>
 80034a6:	9a03      	ldr	r2, [sp, #12]
 80034a8:	1d11      	adds	r1, r2, #4
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	9103      	str	r1, [sp, #12]
 80034ae:	2a00      	cmp	r2, #0
 80034b0:	db01      	blt.n	80034b6 <_svfiprintf_r+0xfa>
 80034b2:	9207      	str	r2, [sp, #28]
 80034b4:	e004      	b.n	80034c0 <_svfiprintf_r+0x104>
 80034b6:	4252      	negs	r2, r2
 80034b8:	f043 0302 	orr.w	r3, r3, #2
 80034bc:	9207      	str	r2, [sp, #28]
 80034be:	9304      	str	r3, [sp, #16]
 80034c0:	783b      	ldrb	r3, [r7, #0]
 80034c2:	2b2e      	cmp	r3, #46	; 0x2e
 80034c4:	d10c      	bne.n	80034e0 <_svfiprintf_r+0x124>
 80034c6:	787b      	ldrb	r3, [r7, #1]
 80034c8:	2b2a      	cmp	r3, #42	; 0x2a
 80034ca:	d133      	bne.n	8003534 <_svfiprintf_r+0x178>
 80034cc:	9b03      	ldr	r3, [sp, #12]
 80034ce:	3702      	adds	r7, #2
 80034d0:	1d1a      	adds	r2, r3, #4
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	9203      	str	r2, [sp, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	bfb8      	it	lt
 80034da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80034de:	9305      	str	r3, [sp, #20]
 80034e0:	4d2e      	ldr	r5, [pc, #184]	; (800359c <_svfiprintf_r+0x1e0>)
 80034e2:	2203      	movs	r2, #3
 80034e4:	7839      	ldrb	r1, [r7, #0]
 80034e6:	4628      	mov	r0, r5
 80034e8:	f000 f9e8 	bl	80038bc <memchr>
 80034ec:	b138      	cbz	r0, 80034fe <_svfiprintf_r+0x142>
 80034ee:	2340      	movs	r3, #64	; 0x40
 80034f0:	1b40      	subs	r0, r0, r5
 80034f2:	fa03 f000 	lsl.w	r0, r3, r0
 80034f6:	9b04      	ldr	r3, [sp, #16]
 80034f8:	3701      	adds	r7, #1
 80034fa:	4303      	orrs	r3, r0
 80034fc:	9304      	str	r3, [sp, #16]
 80034fe:	7839      	ldrb	r1, [r7, #0]
 8003500:	2206      	movs	r2, #6
 8003502:	4827      	ldr	r0, [pc, #156]	; (80035a0 <_svfiprintf_r+0x1e4>)
 8003504:	1c7e      	adds	r6, r7, #1
 8003506:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800350a:	f000 f9d7 	bl	80038bc <memchr>
 800350e:	2800      	cmp	r0, #0
 8003510:	d038      	beq.n	8003584 <_svfiprintf_r+0x1c8>
 8003512:	4b24      	ldr	r3, [pc, #144]	; (80035a4 <_svfiprintf_r+0x1e8>)
 8003514:	bb13      	cbnz	r3, 800355c <_svfiprintf_r+0x1a0>
 8003516:	9b03      	ldr	r3, [sp, #12]
 8003518:	3307      	adds	r3, #7
 800351a:	f023 0307 	bic.w	r3, r3, #7
 800351e:	3308      	adds	r3, #8
 8003520:	9303      	str	r3, [sp, #12]
 8003522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003524:	444b      	add	r3, r9
 8003526:	9309      	str	r3, [sp, #36]	; 0x24
 8003528:	e76d      	b.n	8003406 <_svfiprintf_r+0x4a>
 800352a:	fb05 3202 	mla	r2, r5, r2, r3
 800352e:	2001      	movs	r0, #1
 8003530:	460f      	mov	r7, r1
 8003532:	e7a6      	b.n	8003482 <_svfiprintf_r+0xc6>
 8003534:	2300      	movs	r3, #0
 8003536:	250a      	movs	r5, #10
 8003538:	4619      	mov	r1, r3
 800353a:	3701      	adds	r7, #1
 800353c:	9305      	str	r3, [sp, #20]
 800353e:	4638      	mov	r0, r7
 8003540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003544:	3a30      	subs	r2, #48	; 0x30
 8003546:	2a09      	cmp	r2, #9
 8003548:	d903      	bls.n	8003552 <_svfiprintf_r+0x196>
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0c8      	beq.n	80034e0 <_svfiprintf_r+0x124>
 800354e:	9105      	str	r1, [sp, #20]
 8003550:	e7c6      	b.n	80034e0 <_svfiprintf_r+0x124>
 8003552:	fb05 2101 	mla	r1, r5, r1, r2
 8003556:	2301      	movs	r3, #1
 8003558:	4607      	mov	r7, r0
 800355a:	e7f0      	b.n	800353e <_svfiprintf_r+0x182>
 800355c:	ab03      	add	r3, sp, #12
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	4622      	mov	r2, r4
 8003562:	4b11      	ldr	r3, [pc, #68]	; (80035a8 <_svfiprintf_r+0x1ec>)
 8003564:	a904      	add	r1, sp, #16
 8003566:	4640      	mov	r0, r8
 8003568:	f3af 8000 	nop.w
 800356c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003570:	4681      	mov	r9, r0
 8003572:	d1d6      	bne.n	8003522 <_svfiprintf_r+0x166>
 8003574:	89a3      	ldrh	r3, [r4, #12]
 8003576:	065b      	lsls	r3, r3, #25
 8003578:	f53f af35 	bmi.w	80033e6 <_svfiprintf_r+0x2a>
 800357c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800357e:	b01d      	add	sp, #116	; 0x74
 8003580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003584:	ab03      	add	r3, sp, #12
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	4622      	mov	r2, r4
 800358a:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <_svfiprintf_r+0x1ec>)
 800358c:	a904      	add	r1, sp, #16
 800358e:	4640      	mov	r0, r8
 8003590:	f000 f882 	bl	8003698 <_printf_i>
 8003594:	e7ea      	b.n	800356c <_svfiprintf_r+0x1b0>
 8003596:	bf00      	nop
 8003598:	08004a30 	.word	0x08004a30
 800359c:	08004a36 	.word	0x08004a36
 80035a0:	08004a3a 	.word	0x08004a3a
 80035a4:	00000000 	.word	0x00000000
 80035a8:	08003309 	.word	0x08003309

080035ac <_printf_common>:
 80035ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035b0:	4691      	mov	r9, r2
 80035b2:	461f      	mov	r7, r3
 80035b4:	688a      	ldr	r2, [r1, #8]
 80035b6:	690b      	ldr	r3, [r1, #16]
 80035b8:	4606      	mov	r6, r0
 80035ba:	4293      	cmp	r3, r2
 80035bc:	bfb8      	it	lt
 80035be:	4613      	movlt	r3, r2
 80035c0:	f8c9 3000 	str.w	r3, [r9]
 80035c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035c8:	460c      	mov	r4, r1
 80035ca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035ce:	b112      	cbz	r2, 80035d6 <_printf_common+0x2a>
 80035d0:	3301      	adds	r3, #1
 80035d2:	f8c9 3000 	str.w	r3, [r9]
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	0699      	lsls	r1, r3, #26
 80035da:	bf42      	ittt	mi
 80035dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80035e0:	3302      	addmi	r3, #2
 80035e2:	f8c9 3000 	strmi.w	r3, [r9]
 80035e6:	6825      	ldr	r5, [r4, #0]
 80035e8:	f015 0506 	ands.w	r5, r5, #6
 80035ec:	d107      	bne.n	80035fe <_printf_common+0x52>
 80035ee:	f104 0a19 	add.w	sl, r4, #25
 80035f2:	68e3      	ldr	r3, [r4, #12]
 80035f4:	f8d9 2000 	ldr.w	r2, [r9]
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	42ab      	cmp	r3, r5
 80035fc:	dc29      	bgt.n	8003652 <_printf_common+0xa6>
 80035fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003602:	6822      	ldr	r2, [r4, #0]
 8003604:	3300      	adds	r3, #0
 8003606:	bf18      	it	ne
 8003608:	2301      	movne	r3, #1
 800360a:	0692      	lsls	r2, r2, #26
 800360c:	d42e      	bmi.n	800366c <_printf_common+0xc0>
 800360e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003612:	4639      	mov	r1, r7
 8003614:	4630      	mov	r0, r6
 8003616:	47c0      	blx	r8
 8003618:	3001      	adds	r0, #1
 800361a:	d021      	beq.n	8003660 <_printf_common+0xb4>
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	68e5      	ldr	r5, [r4, #12]
 8003620:	f003 0306 	and.w	r3, r3, #6
 8003624:	2b04      	cmp	r3, #4
 8003626:	bf18      	it	ne
 8003628:	2500      	movne	r5, #0
 800362a:	f8d9 2000 	ldr.w	r2, [r9]
 800362e:	f04f 0900 	mov.w	r9, #0
 8003632:	bf08      	it	eq
 8003634:	1aad      	subeq	r5, r5, r2
 8003636:	68a3      	ldr	r3, [r4, #8]
 8003638:	6922      	ldr	r2, [r4, #16]
 800363a:	bf08      	it	eq
 800363c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003640:	4293      	cmp	r3, r2
 8003642:	bfc4      	itt	gt
 8003644:	1a9b      	subgt	r3, r3, r2
 8003646:	18ed      	addgt	r5, r5, r3
 8003648:	341a      	adds	r4, #26
 800364a:	454d      	cmp	r5, r9
 800364c:	d11a      	bne.n	8003684 <_printf_common+0xd8>
 800364e:	2000      	movs	r0, #0
 8003650:	e008      	b.n	8003664 <_printf_common+0xb8>
 8003652:	2301      	movs	r3, #1
 8003654:	4652      	mov	r2, sl
 8003656:	4639      	mov	r1, r7
 8003658:	4630      	mov	r0, r6
 800365a:	47c0      	blx	r8
 800365c:	3001      	adds	r0, #1
 800365e:	d103      	bne.n	8003668 <_printf_common+0xbc>
 8003660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003668:	3501      	adds	r5, #1
 800366a:	e7c2      	b.n	80035f2 <_printf_common+0x46>
 800366c:	2030      	movs	r0, #48	; 0x30
 800366e:	18e1      	adds	r1, r4, r3
 8003670:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800367a:	4422      	add	r2, r4
 800367c:	3302      	adds	r3, #2
 800367e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003682:	e7c4      	b.n	800360e <_printf_common+0x62>
 8003684:	2301      	movs	r3, #1
 8003686:	4622      	mov	r2, r4
 8003688:	4639      	mov	r1, r7
 800368a:	4630      	mov	r0, r6
 800368c:	47c0      	blx	r8
 800368e:	3001      	adds	r0, #1
 8003690:	d0e6      	beq.n	8003660 <_printf_common+0xb4>
 8003692:	f109 0901 	add.w	r9, r9, #1
 8003696:	e7d8      	b.n	800364a <_printf_common+0x9e>

08003698 <_printf_i>:
 8003698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800369c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80036a0:	460c      	mov	r4, r1
 80036a2:	7e09      	ldrb	r1, [r1, #24]
 80036a4:	b085      	sub	sp, #20
 80036a6:	296e      	cmp	r1, #110	; 0x6e
 80036a8:	4617      	mov	r7, r2
 80036aa:	4606      	mov	r6, r0
 80036ac:	4698      	mov	r8, r3
 80036ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80036b0:	f000 80b3 	beq.w	800381a <_printf_i+0x182>
 80036b4:	d822      	bhi.n	80036fc <_printf_i+0x64>
 80036b6:	2963      	cmp	r1, #99	; 0x63
 80036b8:	d036      	beq.n	8003728 <_printf_i+0x90>
 80036ba:	d80a      	bhi.n	80036d2 <_printf_i+0x3a>
 80036bc:	2900      	cmp	r1, #0
 80036be:	f000 80b9 	beq.w	8003834 <_printf_i+0x19c>
 80036c2:	2958      	cmp	r1, #88	; 0x58
 80036c4:	f000 8083 	beq.w	80037ce <_printf_i+0x136>
 80036c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80036d0:	e032      	b.n	8003738 <_printf_i+0xa0>
 80036d2:	2964      	cmp	r1, #100	; 0x64
 80036d4:	d001      	beq.n	80036da <_printf_i+0x42>
 80036d6:	2969      	cmp	r1, #105	; 0x69
 80036d8:	d1f6      	bne.n	80036c8 <_printf_i+0x30>
 80036da:	6820      	ldr	r0, [r4, #0]
 80036dc:	6813      	ldr	r3, [r2, #0]
 80036de:	0605      	lsls	r5, r0, #24
 80036e0:	f103 0104 	add.w	r1, r3, #4
 80036e4:	d52a      	bpl.n	800373c <_printf_i+0xa4>
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6011      	str	r1, [r2, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	da03      	bge.n	80036f6 <_printf_i+0x5e>
 80036ee:	222d      	movs	r2, #45	; 0x2d
 80036f0:	425b      	negs	r3, r3
 80036f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80036f6:	486f      	ldr	r0, [pc, #444]	; (80038b4 <_printf_i+0x21c>)
 80036f8:	220a      	movs	r2, #10
 80036fa:	e039      	b.n	8003770 <_printf_i+0xd8>
 80036fc:	2973      	cmp	r1, #115	; 0x73
 80036fe:	f000 809d 	beq.w	800383c <_printf_i+0x1a4>
 8003702:	d808      	bhi.n	8003716 <_printf_i+0x7e>
 8003704:	296f      	cmp	r1, #111	; 0x6f
 8003706:	d020      	beq.n	800374a <_printf_i+0xb2>
 8003708:	2970      	cmp	r1, #112	; 0x70
 800370a:	d1dd      	bne.n	80036c8 <_printf_i+0x30>
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	f043 0320 	orr.w	r3, r3, #32
 8003712:	6023      	str	r3, [r4, #0]
 8003714:	e003      	b.n	800371e <_printf_i+0x86>
 8003716:	2975      	cmp	r1, #117	; 0x75
 8003718:	d017      	beq.n	800374a <_printf_i+0xb2>
 800371a:	2978      	cmp	r1, #120	; 0x78
 800371c:	d1d4      	bne.n	80036c8 <_printf_i+0x30>
 800371e:	2378      	movs	r3, #120	; 0x78
 8003720:	4865      	ldr	r0, [pc, #404]	; (80038b8 <_printf_i+0x220>)
 8003722:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003726:	e055      	b.n	80037d4 <_printf_i+0x13c>
 8003728:	6813      	ldr	r3, [r2, #0]
 800372a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800372e:	1d19      	adds	r1, r3, #4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6011      	str	r1, [r2, #0]
 8003734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003738:	2301      	movs	r3, #1
 800373a:	e08c      	b.n	8003856 <_printf_i+0x1be>
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003742:	6011      	str	r1, [r2, #0]
 8003744:	bf18      	it	ne
 8003746:	b21b      	sxthne	r3, r3
 8003748:	e7cf      	b.n	80036ea <_printf_i+0x52>
 800374a:	6813      	ldr	r3, [r2, #0]
 800374c:	6825      	ldr	r5, [r4, #0]
 800374e:	1d18      	adds	r0, r3, #4
 8003750:	6010      	str	r0, [r2, #0]
 8003752:	0628      	lsls	r0, r5, #24
 8003754:	d501      	bpl.n	800375a <_printf_i+0xc2>
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	e002      	b.n	8003760 <_printf_i+0xc8>
 800375a:	0668      	lsls	r0, r5, #25
 800375c:	d5fb      	bpl.n	8003756 <_printf_i+0xbe>
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	296f      	cmp	r1, #111	; 0x6f
 8003762:	bf14      	ite	ne
 8003764:	220a      	movne	r2, #10
 8003766:	2208      	moveq	r2, #8
 8003768:	4852      	ldr	r0, [pc, #328]	; (80038b4 <_printf_i+0x21c>)
 800376a:	2100      	movs	r1, #0
 800376c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003770:	6865      	ldr	r5, [r4, #4]
 8003772:	2d00      	cmp	r5, #0
 8003774:	60a5      	str	r5, [r4, #8]
 8003776:	f2c0 8095 	blt.w	80038a4 <_printf_i+0x20c>
 800377a:	6821      	ldr	r1, [r4, #0]
 800377c:	f021 0104 	bic.w	r1, r1, #4
 8003780:	6021      	str	r1, [r4, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d13d      	bne.n	8003802 <_printf_i+0x16a>
 8003786:	2d00      	cmp	r5, #0
 8003788:	f040 808e 	bne.w	80038a8 <_printf_i+0x210>
 800378c:	4665      	mov	r5, ip
 800378e:	2a08      	cmp	r2, #8
 8003790:	d10b      	bne.n	80037aa <_printf_i+0x112>
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	07db      	lsls	r3, r3, #31
 8003796:	d508      	bpl.n	80037aa <_printf_i+0x112>
 8003798:	6923      	ldr	r3, [r4, #16]
 800379a:	6862      	ldr	r2, [r4, #4]
 800379c:	429a      	cmp	r2, r3
 800379e:	bfde      	ittt	le
 80037a0:	2330      	movle	r3, #48	; 0x30
 80037a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037a6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80037aa:	ebac 0305 	sub.w	r3, ip, r5
 80037ae:	6123      	str	r3, [r4, #16]
 80037b0:	f8cd 8000 	str.w	r8, [sp]
 80037b4:	463b      	mov	r3, r7
 80037b6:	aa03      	add	r2, sp, #12
 80037b8:	4621      	mov	r1, r4
 80037ba:	4630      	mov	r0, r6
 80037bc:	f7ff fef6 	bl	80035ac <_printf_common>
 80037c0:	3001      	adds	r0, #1
 80037c2:	d14d      	bne.n	8003860 <_printf_i+0x1c8>
 80037c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037c8:	b005      	add	sp, #20
 80037ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037ce:	4839      	ldr	r0, [pc, #228]	; (80038b4 <_printf_i+0x21c>)
 80037d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80037d4:	6813      	ldr	r3, [r2, #0]
 80037d6:	6821      	ldr	r1, [r4, #0]
 80037d8:	1d1d      	adds	r5, r3, #4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6015      	str	r5, [r2, #0]
 80037de:	060a      	lsls	r2, r1, #24
 80037e0:	d50b      	bpl.n	80037fa <_printf_i+0x162>
 80037e2:	07ca      	lsls	r2, r1, #31
 80037e4:	bf44      	itt	mi
 80037e6:	f041 0120 	orrmi.w	r1, r1, #32
 80037ea:	6021      	strmi	r1, [r4, #0]
 80037ec:	b91b      	cbnz	r3, 80037f6 <_printf_i+0x15e>
 80037ee:	6822      	ldr	r2, [r4, #0]
 80037f0:	f022 0220 	bic.w	r2, r2, #32
 80037f4:	6022      	str	r2, [r4, #0]
 80037f6:	2210      	movs	r2, #16
 80037f8:	e7b7      	b.n	800376a <_printf_i+0xd2>
 80037fa:	064d      	lsls	r5, r1, #25
 80037fc:	bf48      	it	mi
 80037fe:	b29b      	uxthmi	r3, r3
 8003800:	e7ef      	b.n	80037e2 <_printf_i+0x14a>
 8003802:	4665      	mov	r5, ip
 8003804:	fbb3 f1f2 	udiv	r1, r3, r2
 8003808:	fb02 3311 	mls	r3, r2, r1, r3
 800380c:	5cc3      	ldrb	r3, [r0, r3]
 800380e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003812:	460b      	mov	r3, r1
 8003814:	2900      	cmp	r1, #0
 8003816:	d1f5      	bne.n	8003804 <_printf_i+0x16c>
 8003818:	e7b9      	b.n	800378e <_printf_i+0xf6>
 800381a:	6813      	ldr	r3, [r2, #0]
 800381c:	6825      	ldr	r5, [r4, #0]
 800381e:	1d18      	adds	r0, r3, #4
 8003820:	6961      	ldr	r1, [r4, #20]
 8003822:	6010      	str	r0, [r2, #0]
 8003824:	0628      	lsls	r0, r5, #24
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	d501      	bpl.n	800382e <_printf_i+0x196>
 800382a:	6019      	str	r1, [r3, #0]
 800382c:	e002      	b.n	8003834 <_printf_i+0x19c>
 800382e:	066a      	lsls	r2, r5, #25
 8003830:	d5fb      	bpl.n	800382a <_printf_i+0x192>
 8003832:	8019      	strh	r1, [r3, #0]
 8003834:	2300      	movs	r3, #0
 8003836:	4665      	mov	r5, ip
 8003838:	6123      	str	r3, [r4, #16]
 800383a:	e7b9      	b.n	80037b0 <_printf_i+0x118>
 800383c:	6813      	ldr	r3, [r2, #0]
 800383e:	1d19      	adds	r1, r3, #4
 8003840:	6011      	str	r1, [r2, #0]
 8003842:	681d      	ldr	r5, [r3, #0]
 8003844:	6862      	ldr	r2, [r4, #4]
 8003846:	2100      	movs	r1, #0
 8003848:	4628      	mov	r0, r5
 800384a:	f000 f837 	bl	80038bc <memchr>
 800384e:	b108      	cbz	r0, 8003854 <_printf_i+0x1bc>
 8003850:	1b40      	subs	r0, r0, r5
 8003852:	6060      	str	r0, [r4, #4]
 8003854:	6863      	ldr	r3, [r4, #4]
 8003856:	6123      	str	r3, [r4, #16]
 8003858:	2300      	movs	r3, #0
 800385a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800385e:	e7a7      	b.n	80037b0 <_printf_i+0x118>
 8003860:	6923      	ldr	r3, [r4, #16]
 8003862:	462a      	mov	r2, r5
 8003864:	4639      	mov	r1, r7
 8003866:	4630      	mov	r0, r6
 8003868:	47c0      	blx	r8
 800386a:	3001      	adds	r0, #1
 800386c:	d0aa      	beq.n	80037c4 <_printf_i+0x12c>
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	079b      	lsls	r3, r3, #30
 8003872:	d413      	bmi.n	800389c <_printf_i+0x204>
 8003874:	68e0      	ldr	r0, [r4, #12]
 8003876:	9b03      	ldr	r3, [sp, #12]
 8003878:	4298      	cmp	r0, r3
 800387a:	bfb8      	it	lt
 800387c:	4618      	movlt	r0, r3
 800387e:	e7a3      	b.n	80037c8 <_printf_i+0x130>
 8003880:	2301      	movs	r3, #1
 8003882:	464a      	mov	r2, r9
 8003884:	4639      	mov	r1, r7
 8003886:	4630      	mov	r0, r6
 8003888:	47c0      	blx	r8
 800388a:	3001      	adds	r0, #1
 800388c:	d09a      	beq.n	80037c4 <_printf_i+0x12c>
 800388e:	3501      	adds	r5, #1
 8003890:	68e3      	ldr	r3, [r4, #12]
 8003892:	9a03      	ldr	r2, [sp, #12]
 8003894:	1a9b      	subs	r3, r3, r2
 8003896:	42ab      	cmp	r3, r5
 8003898:	dcf2      	bgt.n	8003880 <_printf_i+0x1e8>
 800389a:	e7eb      	b.n	8003874 <_printf_i+0x1dc>
 800389c:	2500      	movs	r5, #0
 800389e:	f104 0919 	add.w	r9, r4, #25
 80038a2:	e7f5      	b.n	8003890 <_printf_i+0x1f8>
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1ac      	bne.n	8003802 <_printf_i+0x16a>
 80038a8:	7803      	ldrb	r3, [r0, #0]
 80038aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038b2:	e76c      	b.n	800378e <_printf_i+0xf6>
 80038b4:	08004a41 	.word	0x08004a41
 80038b8:	08004a52 	.word	0x08004a52

080038bc <memchr>:
 80038bc:	b510      	push	{r4, lr}
 80038be:	b2c9      	uxtb	r1, r1
 80038c0:	4402      	add	r2, r0
 80038c2:	4290      	cmp	r0, r2
 80038c4:	4603      	mov	r3, r0
 80038c6:	d101      	bne.n	80038cc <memchr+0x10>
 80038c8:	2300      	movs	r3, #0
 80038ca:	e003      	b.n	80038d4 <memchr+0x18>
 80038cc:	781c      	ldrb	r4, [r3, #0]
 80038ce:	3001      	adds	r0, #1
 80038d0:	428c      	cmp	r4, r1
 80038d2:	d1f6      	bne.n	80038c2 <memchr+0x6>
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd10      	pop	{r4, pc}

080038d8 <memcpy>:
 80038d8:	b510      	push	{r4, lr}
 80038da:	1e43      	subs	r3, r0, #1
 80038dc:	440a      	add	r2, r1
 80038de:	4291      	cmp	r1, r2
 80038e0:	d100      	bne.n	80038e4 <memcpy+0xc>
 80038e2:	bd10      	pop	{r4, pc}
 80038e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038ec:	e7f7      	b.n	80038de <memcpy+0x6>

080038ee <memmove>:
 80038ee:	4288      	cmp	r0, r1
 80038f0:	b510      	push	{r4, lr}
 80038f2:	eb01 0302 	add.w	r3, r1, r2
 80038f6:	d807      	bhi.n	8003908 <memmove+0x1a>
 80038f8:	1e42      	subs	r2, r0, #1
 80038fa:	4299      	cmp	r1, r3
 80038fc:	d00a      	beq.n	8003914 <memmove+0x26>
 80038fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003902:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003906:	e7f8      	b.n	80038fa <memmove+0xc>
 8003908:	4283      	cmp	r3, r0
 800390a:	d9f5      	bls.n	80038f8 <memmove+0xa>
 800390c:	1881      	adds	r1, r0, r2
 800390e:	1ad2      	subs	r2, r2, r3
 8003910:	42d3      	cmn	r3, r2
 8003912:	d100      	bne.n	8003916 <memmove+0x28>
 8003914:	bd10      	pop	{r4, pc}
 8003916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800391a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800391e:	e7f7      	b.n	8003910 <memmove+0x22>

08003920 <_free_r>:
 8003920:	b538      	push	{r3, r4, r5, lr}
 8003922:	4605      	mov	r5, r0
 8003924:	2900      	cmp	r1, #0
 8003926:	d043      	beq.n	80039b0 <_free_r+0x90>
 8003928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800392c:	1f0c      	subs	r4, r1, #4
 800392e:	2b00      	cmp	r3, #0
 8003930:	bfb8      	it	lt
 8003932:	18e4      	addlt	r4, r4, r3
 8003934:	f000 f8d0 	bl	8003ad8 <__malloc_lock>
 8003938:	4a1e      	ldr	r2, [pc, #120]	; (80039b4 <_free_r+0x94>)
 800393a:	6813      	ldr	r3, [r2, #0]
 800393c:	4610      	mov	r0, r2
 800393e:	b933      	cbnz	r3, 800394e <_free_r+0x2e>
 8003940:	6063      	str	r3, [r4, #4]
 8003942:	6014      	str	r4, [r2, #0]
 8003944:	4628      	mov	r0, r5
 8003946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800394a:	f000 b8c6 	b.w	8003ada <__malloc_unlock>
 800394e:	42a3      	cmp	r3, r4
 8003950:	d90b      	bls.n	800396a <_free_r+0x4a>
 8003952:	6821      	ldr	r1, [r4, #0]
 8003954:	1862      	adds	r2, r4, r1
 8003956:	4293      	cmp	r3, r2
 8003958:	bf01      	itttt	eq
 800395a:	681a      	ldreq	r2, [r3, #0]
 800395c:	685b      	ldreq	r3, [r3, #4]
 800395e:	1852      	addeq	r2, r2, r1
 8003960:	6022      	streq	r2, [r4, #0]
 8003962:	6063      	str	r3, [r4, #4]
 8003964:	6004      	str	r4, [r0, #0]
 8003966:	e7ed      	b.n	8003944 <_free_r+0x24>
 8003968:	4613      	mov	r3, r2
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	b10a      	cbz	r2, 8003972 <_free_r+0x52>
 800396e:	42a2      	cmp	r2, r4
 8003970:	d9fa      	bls.n	8003968 <_free_r+0x48>
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	1858      	adds	r0, r3, r1
 8003976:	42a0      	cmp	r0, r4
 8003978:	d10b      	bne.n	8003992 <_free_r+0x72>
 800397a:	6820      	ldr	r0, [r4, #0]
 800397c:	4401      	add	r1, r0
 800397e:	1858      	adds	r0, r3, r1
 8003980:	4282      	cmp	r2, r0
 8003982:	6019      	str	r1, [r3, #0]
 8003984:	d1de      	bne.n	8003944 <_free_r+0x24>
 8003986:	6810      	ldr	r0, [r2, #0]
 8003988:	6852      	ldr	r2, [r2, #4]
 800398a:	4401      	add	r1, r0
 800398c:	6019      	str	r1, [r3, #0]
 800398e:	605a      	str	r2, [r3, #4]
 8003990:	e7d8      	b.n	8003944 <_free_r+0x24>
 8003992:	d902      	bls.n	800399a <_free_r+0x7a>
 8003994:	230c      	movs	r3, #12
 8003996:	602b      	str	r3, [r5, #0]
 8003998:	e7d4      	b.n	8003944 <_free_r+0x24>
 800399a:	6820      	ldr	r0, [r4, #0]
 800399c:	1821      	adds	r1, r4, r0
 800399e:	428a      	cmp	r2, r1
 80039a0:	bf01      	itttt	eq
 80039a2:	6811      	ldreq	r1, [r2, #0]
 80039a4:	6852      	ldreq	r2, [r2, #4]
 80039a6:	1809      	addeq	r1, r1, r0
 80039a8:	6021      	streq	r1, [r4, #0]
 80039aa:	6062      	str	r2, [r4, #4]
 80039ac:	605c      	str	r4, [r3, #4]
 80039ae:	e7c9      	b.n	8003944 <_free_r+0x24>
 80039b0:	bd38      	pop	{r3, r4, r5, pc}
 80039b2:	bf00      	nop
 80039b4:	2000009c 	.word	0x2000009c

080039b8 <_malloc_r>:
 80039b8:	b570      	push	{r4, r5, r6, lr}
 80039ba:	1ccd      	adds	r5, r1, #3
 80039bc:	f025 0503 	bic.w	r5, r5, #3
 80039c0:	3508      	adds	r5, #8
 80039c2:	2d0c      	cmp	r5, #12
 80039c4:	bf38      	it	cc
 80039c6:	250c      	movcc	r5, #12
 80039c8:	2d00      	cmp	r5, #0
 80039ca:	4606      	mov	r6, r0
 80039cc:	db01      	blt.n	80039d2 <_malloc_r+0x1a>
 80039ce:	42a9      	cmp	r1, r5
 80039d0:	d903      	bls.n	80039da <_malloc_r+0x22>
 80039d2:	230c      	movs	r3, #12
 80039d4:	6033      	str	r3, [r6, #0]
 80039d6:	2000      	movs	r0, #0
 80039d8:	bd70      	pop	{r4, r5, r6, pc}
 80039da:	f000 f87d 	bl	8003ad8 <__malloc_lock>
 80039de:	4a21      	ldr	r2, [pc, #132]	; (8003a64 <_malloc_r+0xac>)
 80039e0:	6814      	ldr	r4, [r2, #0]
 80039e2:	4621      	mov	r1, r4
 80039e4:	b991      	cbnz	r1, 8003a0c <_malloc_r+0x54>
 80039e6:	4c20      	ldr	r4, [pc, #128]	; (8003a68 <_malloc_r+0xb0>)
 80039e8:	6823      	ldr	r3, [r4, #0]
 80039ea:	b91b      	cbnz	r3, 80039f4 <_malloc_r+0x3c>
 80039ec:	4630      	mov	r0, r6
 80039ee:	f000 f863 	bl	8003ab8 <_sbrk_r>
 80039f2:	6020      	str	r0, [r4, #0]
 80039f4:	4629      	mov	r1, r5
 80039f6:	4630      	mov	r0, r6
 80039f8:	f000 f85e 	bl	8003ab8 <_sbrk_r>
 80039fc:	1c43      	adds	r3, r0, #1
 80039fe:	d124      	bne.n	8003a4a <_malloc_r+0x92>
 8003a00:	230c      	movs	r3, #12
 8003a02:	4630      	mov	r0, r6
 8003a04:	6033      	str	r3, [r6, #0]
 8003a06:	f000 f868 	bl	8003ada <__malloc_unlock>
 8003a0a:	e7e4      	b.n	80039d6 <_malloc_r+0x1e>
 8003a0c:	680b      	ldr	r3, [r1, #0]
 8003a0e:	1b5b      	subs	r3, r3, r5
 8003a10:	d418      	bmi.n	8003a44 <_malloc_r+0x8c>
 8003a12:	2b0b      	cmp	r3, #11
 8003a14:	d90f      	bls.n	8003a36 <_malloc_r+0x7e>
 8003a16:	600b      	str	r3, [r1, #0]
 8003a18:	18cc      	adds	r4, r1, r3
 8003a1a:	50cd      	str	r5, [r1, r3]
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	f000 f85c 	bl	8003ada <__malloc_unlock>
 8003a22:	f104 000b 	add.w	r0, r4, #11
 8003a26:	1d23      	adds	r3, r4, #4
 8003a28:	f020 0007 	bic.w	r0, r0, #7
 8003a2c:	1ac3      	subs	r3, r0, r3
 8003a2e:	d0d3      	beq.n	80039d8 <_malloc_r+0x20>
 8003a30:	425a      	negs	r2, r3
 8003a32:	50e2      	str	r2, [r4, r3]
 8003a34:	e7d0      	b.n	80039d8 <_malloc_r+0x20>
 8003a36:	684b      	ldr	r3, [r1, #4]
 8003a38:	428c      	cmp	r4, r1
 8003a3a:	bf16      	itet	ne
 8003a3c:	6063      	strne	r3, [r4, #4]
 8003a3e:	6013      	streq	r3, [r2, #0]
 8003a40:	460c      	movne	r4, r1
 8003a42:	e7eb      	b.n	8003a1c <_malloc_r+0x64>
 8003a44:	460c      	mov	r4, r1
 8003a46:	6849      	ldr	r1, [r1, #4]
 8003a48:	e7cc      	b.n	80039e4 <_malloc_r+0x2c>
 8003a4a:	1cc4      	adds	r4, r0, #3
 8003a4c:	f024 0403 	bic.w	r4, r4, #3
 8003a50:	42a0      	cmp	r0, r4
 8003a52:	d005      	beq.n	8003a60 <_malloc_r+0xa8>
 8003a54:	1a21      	subs	r1, r4, r0
 8003a56:	4630      	mov	r0, r6
 8003a58:	f000 f82e 	bl	8003ab8 <_sbrk_r>
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d0cf      	beq.n	8003a00 <_malloc_r+0x48>
 8003a60:	6025      	str	r5, [r4, #0]
 8003a62:	e7db      	b.n	8003a1c <_malloc_r+0x64>
 8003a64:	2000009c 	.word	0x2000009c
 8003a68:	200000a0 	.word	0x200000a0

08003a6c <_realloc_r>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	4607      	mov	r7, r0
 8003a70:	4614      	mov	r4, r2
 8003a72:	460e      	mov	r6, r1
 8003a74:	b921      	cbnz	r1, 8003a80 <_realloc_r+0x14>
 8003a76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	f7ff bf9c 	b.w	80039b8 <_malloc_r>
 8003a80:	b922      	cbnz	r2, 8003a8c <_realloc_r+0x20>
 8003a82:	f7ff ff4d 	bl	8003920 <_free_r>
 8003a86:	4625      	mov	r5, r4
 8003a88:	4628      	mov	r0, r5
 8003a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a8c:	f000 f826 	bl	8003adc <_malloc_usable_size_r>
 8003a90:	42a0      	cmp	r0, r4
 8003a92:	d20f      	bcs.n	8003ab4 <_realloc_r+0x48>
 8003a94:	4621      	mov	r1, r4
 8003a96:	4638      	mov	r0, r7
 8003a98:	f7ff ff8e 	bl	80039b8 <_malloc_r>
 8003a9c:	4605      	mov	r5, r0
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	d0f2      	beq.n	8003a88 <_realloc_r+0x1c>
 8003aa2:	4631      	mov	r1, r6
 8003aa4:	4622      	mov	r2, r4
 8003aa6:	f7ff ff17 	bl	80038d8 <memcpy>
 8003aaa:	4631      	mov	r1, r6
 8003aac:	4638      	mov	r0, r7
 8003aae:	f7ff ff37 	bl	8003920 <_free_r>
 8003ab2:	e7e9      	b.n	8003a88 <_realloc_r+0x1c>
 8003ab4:	4635      	mov	r5, r6
 8003ab6:	e7e7      	b.n	8003a88 <_realloc_r+0x1c>

08003ab8 <_sbrk_r>:
 8003ab8:	b538      	push	{r3, r4, r5, lr}
 8003aba:	2300      	movs	r3, #0
 8003abc:	4c05      	ldr	r4, [pc, #20]	; (8003ad4 <_sbrk_r+0x1c>)
 8003abe:	4605      	mov	r5, r0
 8003ac0:	4608      	mov	r0, r1
 8003ac2:	6023      	str	r3, [r4, #0]
 8003ac4:	f7fd fdbc 	bl	8001640 <_sbrk>
 8003ac8:	1c43      	adds	r3, r0, #1
 8003aca:	d102      	bne.n	8003ad2 <_sbrk_r+0x1a>
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	b103      	cbz	r3, 8003ad2 <_sbrk_r+0x1a>
 8003ad0:	602b      	str	r3, [r5, #0]
 8003ad2:	bd38      	pop	{r3, r4, r5, pc}
 8003ad4:	20000560 	.word	0x20000560

08003ad8 <__malloc_lock>:
 8003ad8:	4770      	bx	lr

08003ada <__malloc_unlock>:
 8003ada:	4770      	bx	lr

08003adc <_malloc_usable_size_r>:
 8003adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ae0:	1f18      	subs	r0, r3, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	bfbc      	itt	lt
 8003ae6:	580b      	ldrlt	r3, [r1, r0]
 8003ae8:	18c0      	addlt	r0, r0, r3
 8003aea:	4770      	bx	lr

08003aec <_init>:
 8003aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aee:	bf00      	nop
 8003af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003af2:	bc08      	pop	{r3}
 8003af4:	469e      	mov	lr, r3
 8003af6:	4770      	bx	lr

08003af8 <_fini>:
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afa:	bf00      	nop
 8003afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afe:	bc08      	pop	{r3}
 8003b00:	469e      	mov	lr, r3
 8003b02:	4770      	bx	lr

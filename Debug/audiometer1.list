
audiometer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f70  080047fc  080047fc  000147fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800576c  0800576c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800576c  0800576c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800576c  0800576c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005770  08005770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  20000080  080057f4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  080057f4  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d461  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b7b  00000000  00000000  0002d50a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e58  00000000  00000000  0002f088  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  0002fee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014932  00000000  00000000  00030c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094f8  00000000  00000000  000455b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00073f8f  00000000  00000000  0004eaaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2a39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c8  00000000  00000000  000c2ab4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	080047e4 	.word	0x080047e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	080047e4 	.word	0x080047e4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_frsub>:
 800092c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000930:	e002      	b.n	8000938 <__addsf3>
 8000932:	bf00      	nop

08000934 <__aeabi_fsub>:
 8000934:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000938 <__addsf3>:
 8000938:	0042      	lsls	r2, r0, #1
 800093a:	bf1f      	itttt	ne
 800093c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000940:	ea92 0f03 	teqne	r2, r3
 8000944:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000948:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800094c:	d06a      	beq.n	8000a24 <__addsf3+0xec>
 800094e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000952:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000956:	bfc1      	itttt	gt
 8000958:	18d2      	addgt	r2, r2, r3
 800095a:	4041      	eorgt	r1, r0
 800095c:	4048      	eorgt	r0, r1
 800095e:	4041      	eorgt	r1, r0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
 8000964:	2b19      	cmp	r3, #25
 8000966:	bf88      	it	hi
 8000968:	4770      	bxhi	lr
 800096a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800096e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000972:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800097e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000982:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4249      	negne	r1, r1
 800098a:	ea92 0f03 	teq	r2, r3
 800098e:	d03f      	beq.n	8000a10 <__addsf3+0xd8>
 8000990:	f1a2 0201 	sub.w	r2, r2, #1
 8000994:	fa41 fc03 	asr.w	ip, r1, r3
 8000998:	eb10 000c 	adds.w	r0, r0, ip
 800099c:	f1c3 0320 	rsb	r3, r3, #32
 80009a0:	fa01 f103 	lsl.w	r1, r1, r3
 80009a4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009a8:	d502      	bpl.n	80009b0 <__addsf3+0x78>
 80009aa:	4249      	negs	r1, r1
 80009ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009b4:	d313      	bcc.n	80009de <__addsf3+0xa6>
 80009b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ba:	d306      	bcc.n	80009ca <__addsf3+0x92>
 80009bc:	0840      	lsrs	r0, r0, #1
 80009be:	ea4f 0131 	mov.w	r1, r1, rrx
 80009c2:	f102 0201 	add.w	r2, r2, #1
 80009c6:	2afe      	cmp	r2, #254	; 0xfe
 80009c8:	d251      	bcs.n	8000a6e <__addsf3+0x136>
 80009ca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d2:	bf08      	it	eq
 80009d4:	f020 0001 	biceq.w	r0, r0, #1
 80009d8:	ea40 0003 	orr.w	r0, r0, r3
 80009dc:	4770      	bx	lr
 80009de:	0049      	lsls	r1, r1, #1
 80009e0:	eb40 0000 	adc.w	r0, r0, r0
 80009e4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80009e8:	f1a2 0201 	sub.w	r2, r2, #1
 80009ec:	d1ed      	bne.n	80009ca <__addsf3+0x92>
 80009ee:	fab0 fc80 	clz	ip, r0
 80009f2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009f6:	ebb2 020c 	subs.w	r2, r2, ip
 80009fa:	fa00 f00c 	lsl.w	r0, r0, ip
 80009fe:	bfaa      	itet	ge
 8000a00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a04:	4252      	neglt	r2, r2
 8000a06:	4318      	orrge	r0, r3
 8000a08:	bfbc      	itt	lt
 8000a0a:	40d0      	lsrlt	r0, r2
 8000a0c:	4318      	orrlt	r0, r3
 8000a0e:	4770      	bx	lr
 8000a10:	f092 0f00 	teq	r2, #0
 8000a14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a18:	bf06      	itte	eq
 8000a1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a1e:	3201      	addeq	r2, #1
 8000a20:	3b01      	subne	r3, #1
 8000a22:	e7b5      	b.n	8000990 <__addsf3+0x58>
 8000a24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a2c:	bf18      	it	ne
 8000a2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a32:	d021      	beq.n	8000a78 <__addsf3+0x140>
 8000a34:	ea92 0f03 	teq	r2, r3
 8000a38:	d004      	beq.n	8000a44 <__addsf3+0x10c>
 8000a3a:	f092 0f00 	teq	r2, #0
 8000a3e:	bf08      	it	eq
 8000a40:	4608      	moveq	r0, r1
 8000a42:	4770      	bx	lr
 8000a44:	ea90 0f01 	teq	r0, r1
 8000a48:	bf1c      	itt	ne
 8000a4a:	2000      	movne	r0, #0
 8000a4c:	4770      	bxne	lr
 8000a4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a52:	d104      	bne.n	8000a5e <__addsf3+0x126>
 8000a54:	0040      	lsls	r0, r0, #1
 8000a56:	bf28      	it	cs
 8000a58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a5c:	4770      	bx	lr
 8000a5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a62:	bf3c      	itt	cc
 8000a64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bxcc	lr
 8000a6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a76:	4770      	bx	lr
 8000a78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a7c:	bf16      	itet	ne
 8000a7e:	4608      	movne	r0, r1
 8000a80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a84:	4601      	movne	r1, r0
 8000a86:	0242      	lsls	r2, r0, #9
 8000a88:	bf06      	itte	eq
 8000a8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a8e:	ea90 0f01 	teqeq	r0, r1
 8000a92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_ui2f>:
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e004      	b.n	8000aa8 <__aeabi_i2f+0x8>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_i2f>:
 8000aa0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000aa4:	bf48      	it	mi
 8000aa6:	4240      	negmi	r0, r0
 8000aa8:	ea5f 0c00 	movs.w	ip, r0
 8000aac:	bf08      	it	eq
 8000aae:	4770      	bxeq	lr
 8000ab0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ab4:	4601      	mov	r1, r0
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	e01c      	b.n	8000af6 <__aeabi_l2f+0x2a>

08000abc <__aeabi_ul2f>:
 8000abc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f04f 0300 	mov.w	r3, #0
 8000ac8:	e00a      	b.n	8000ae0 <__aeabi_l2f+0x14>
 8000aca:	bf00      	nop

08000acc <__aeabi_l2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__aeabi_l2f+0x14>
 8000ada:	4240      	negs	r0, r0
 8000adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae0:	ea5f 0c01 	movs.w	ip, r1
 8000ae4:	bf02      	ittt	eq
 8000ae6:	4684      	moveq	ip, r0
 8000ae8:	4601      	moveq	r1, r0
 8000aea:	2000      	moveq	r0, #0
 8000aec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000af0:	bf08      	it	eq
 8000af2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000af6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000afa:	fabc f28c 	clz	r2, ip
 8000afe:	3a08      	subs	r2, #8
 8000b00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b04:	db10      	blt.n	8000b28 <__aeabi_l2f+0x5c>
 8000b06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b10:	f1c2 0220 	rsb	r2, r2, #32
 8000b14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b18:	fa20 f202 	lsr.w	r2, r0, r2
 8000b1c:	eb43 0002 	adc.w	r0, r3, r2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f102 0220 	add.w	r2, r2, #32
 8000b2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b38:	fa21 f202 	lsr.w	r2, r1, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b46:	4770      	bx	lr

08000b48 <my_i2c_master_write>:
	 unsigned int *data; /*!< Pointer to data font data array */
} FontDef;


void my_i2c_master_write(uint16_t address ,uint16_t reg,uint16_t data)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af04      	add	r7, sp, #16
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
 8000b52:	460b      	mov	r3, r1
 8000b54:	80bb      	strh	r3, [r7, #4]
 8000b56:	4613      	mov	r3, r2
 8000b58:	807b      	strh	r3, [r7, #2]

	HAL_I2C_Mem_Write(&hi2c1,address,reg,1,&data,1,500);
 8000b5a:	88ba      	ldrh	r2, [r7, #4]
 8000b5c:	88f9      	ldrh	r1, [r7, #6]
 8000b5e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b62:	9302      	str	r3, [sp, #8]
 8000b64:	2301      	movs	r3, #1
 8000b66:	9301      	str	r3, [sp, #4]
 8000b68:	1cbb      	adds	r3, r7, #2
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	4803      	ldr	r0, [pc, #12]	; (8000b7c <my_i2c_master_write+0x34>)
 8000b70:	f001 fc5c 	bl	800242c <HAL_I2C_Mem_Write>

	//HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)

}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200000b0 	.word	0x200000b0

08000b80 <ssd1306_WriteCommand>:




// Send a byte to the command register
void ssd1306_WriteCommand(unsigned char byte) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
	my_i2c_master_write(SSD1306_I2C_ADDR,0x00,byte);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	461a      	mov	r2, r3
 8000b90:	2100      	movs	r1, #0
 8000b92:	2078      	movs	r0, #120	; 0x78
 8000b94:	f7ff ffd8 	bl	8000b48 <my_i2c_master_write>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(unsigned char* buffer, unsigned char size) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	70fb      	strb	r3, [r7, #3]
	int cc=0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
	for(cc=0;cc<size;cc++)
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	e00c      	b.n	8000bd0 <ssd1306_WriteData+0x30>
	{
		my_i2c_master_write(SSD1306_I2C_ADDR,0x40,buffer[cc]);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	4413      	add	r3, r2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	2140      	movs	r1, #64	; 0x40
 8000bc4:	2078      	movs	r0, #120	; 0x78
 8000bc6:	f7ff ffbf 	bl	8000b48 <my_i2c_master_write>
	for(cc=0;cc<size;cc++)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	dbee      	blt.n	8000bb6 <ssd1306_WriteData+0x16>
	}
}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <ssd1306_Fill>:



// Initialize the oled screen
void ssd1306_Fill(SSD1306_COLOR color) {
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    unsigned int i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e00d      	b.n	8000c0c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00: 0xFF;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <ssd1306_Fill+0x1a>
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	e000      	b.n	8000bfc <ssd1306_Fill+0x1c>
 8000bfa:	21ff      	movs	r1, #255	; 0xff
 8000bfc:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <ssd1306_Fill+0x40>)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4413      	add	r3, r2
 8000c02:	460a      	mov	r2, r1
 8000c04:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c12:	d3ed      	bcc.n	8000bf0 <ssd1306_Fill+0x10>
    }
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000150 	.word	0x20000150

08000c24 <ssd1306_UpdateScreen>:


// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
    unsigned char i;
    for(i = 0; i < 8; i++) {
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	71fb      	strb	r3, [r7, #7]
 8000c2e:	e016      	b.n	8000c5e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	3b50      	subs	r3, #80	; 0x50
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ffa2 	bl	8000b80 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff ff9f 	bl	8000b80 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000c42:	2010      	movs	r0, #16
 8000c44:	f7ff ff9c 	bl	8000b80 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	01db      	lsls	r3, r3, #7
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <ssd1306_UpdateScreen+0x48>)
 8000c4e:	4413      	add	r3, r2
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffa4 	bl	8000ba0 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b07      	cmp	r3, #7
 8000c62:	d9e5      	bls.n	8000c30 <ssd1306_UpdateScreen+0xc>
    }
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000150 	.word	0x20000150

08000c70 <delay_ms>:



void delay_ms(int d)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	HAL_Delay(d);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 ffc4 	bl	8001c08 <HAL_Delay>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <ssd1306_Init>:
void ssd1306_Init(void) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0

    // Wait for the screen to boot
    delay_ms(100);
 8000c8c:	2064      	movs	r0, #100	; 0x64
 8000c8e:	f7ff ffef 	bl	8000c70 <delay_ms>

    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8000c92:	20ae      	movs	r0, #174	; 0xae
 8000c94:	f7ff ff74 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000c98:	2020      	movs	r0, #32
 8000c9a:	f7ff ff71 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff ff6e 	bl	8000b80 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ca4:	20b0      	movs	r0, #176	; 0xb0
 8000ca6:	f7ff ff6b 	bl	8000b80 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000caa:	20c8      	movs	r0, #200	; 0xc8
 8000cac:	f7ff ff68 	bl	8000b80 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff ff65 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000cb6:	2010      	movs	r0, #16
 8000cb8:	f7ff ff62 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000cbc:	2040      	movs	r0, #64	; 0x40
 8000cbe:	f7ff ff5f 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8000cc2:	2081      	movs	r0, #129	; 0x81
 8000cc4:	f7ff ff5c 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8000cc8:	20ff      	movs	r0, #255	; 0xff
 8000cca:	f7ff ff59 	bl	8000b80 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000cce:	20a1      	movs	r0, #161	; 0xa1
 8000cd0:	f7ff ff56 	bl	8000b80 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000cd4:	20a6      	movs	r0, #166	; 0xa6
 8000cd6:	f7ff ff53 	bl	8000b80 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000cda:	20a8      	movs	r0, #168	; 0xa8
 8000cdc:	f7ff ff50 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8000ce0:	203f      	movs	r0, #63	; 0x3f
 8000ce2:	f7ff ff4d 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ce6:	20a4      	movs	r0, #164	; 0xa4
 8000ce8:	f7ff ff4a 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000cec:	20d3      	movs	r0, #211	; 0xd3
 8000cee:	f7ff ff47 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff ff44 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000cf8:	20d5      	movs	r0, #213	; 0xd5
 8000cfa:	f7ff ff41 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000cfe:	20f0      	movs	r0, #240	; 0xf0
 8000d00:	f7ff ff3e 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000d04:	20d9      	movs	r0, #217	; 0xd9
 8000d06:	f7ff ff3b 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000d0a:	2022      	movs	r0, #34	; 0x22
 8000d0c:	f7ff ff38 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000d10:	20da      	movs	r0, #218	; 0xda
 8000d12:	f7ff ff35 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8000d16:	2012      	movs	r0, #18
 8000d18:	f7ff ff32 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000d1c:	20db      	movs	r0, #219	; 0xdb
 8000d1e:	f7ff ff2f 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000d22:	2020      	movs	r0, #32
 8000d24:	f7ff ff2c 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000d28:	208d      	movs	r0, #141	; 0x8d
 8000d2a:	f7ff ff29 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000d2e:	2014      	movs	r0, #20
 8000d30:	f7ff ff26 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000d34:	20af      	movs	r0, #175	; 0xaf
 8000d36:	f7ff ff23 	bl	8000b80 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff ff50 	bl	8000be0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000d40:	f7ff ff70 	bl	8000c24 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <ssd1306_Init+0xd4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <ssd1306_Init+0xd4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	605a      	str	r2, [r3, #4]

    SSD1306.Initialized = 1;
 8000d50:	4b02      	ldr	r3, [pc, #8]	; (8000d5c <ssd1306_Init+0xd4>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	725a      	strb	r2, [r3, #9]
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000104 	.word	0x20000104

08000d60 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(unsigned char x, unsigned char y, SSD1306_COLOR color) {
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	71bb      	strb	r3, [r7, #6]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db48      	blt.n	8000e0c <ssd1306_DrawPixel+0xac>
 8000d7a:	79bb      	ldrb	r3, [r7, #6]
 8000d7c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d7e:	d845      	bhi.n	8000e0c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8000d80:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <ssd1306_DrawPixel+0xb8>)
 8000d82:	7a1b      	ldrb	r3, [r3, #8]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d006      	beq.n	8000d96 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8000d88:	797b      	ldrb	r3, [r7, #5]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	bf0c      	ite	eq
 8000d8e:	2301      	moveq	r3, #1
 8000d90:	2300      	movne	r3, #0
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if(color == White) {
 8000d96:	797b      	ldrb	r3, [r7, #5]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d11a      	bne.n	8000dd2 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d9c:	79fa      	ldrb	r2, [r7, #7]
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	08db      	lsrs	r3, r3, #3
 8000da2:	b2d8      	uxtb	r0, r3
 8000da4:	4603      	mov	r3, r0
 8000da6:	01db      	lsls	r3, r3, #7
 8000da8:	4413      	add	r3, r2
 8000daa:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <ssd1306_DrawPixel+0xbc>)
 8000dac:	5cd3      	ldrb	r3, [r2, r3]
 8000dae:	b25a      	sxtb	r2, r3
 8000db0:	79bb      	ldrb	r3, [r7, #6]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	2101      	movs	r1, #1
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	b259      	sxtb	r1, r3
 8000dc2:	79fa      	ldrb	r2, [r7, #7]
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	01db      	lsls	r3, r3, #7
 8000dc8:	4413      	add	r3, r2
 8000dca:	b2c9      	uxtb	r1, r1
 8000dcc:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <ssd1306_DrawPixel+0xbc>)
 8000dce:	54d1      	strb	r1, [r2, r3]
 8000dd0:	e01d      	b.n	8000e0e <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	79bb      	ldrb	r3, [r7, #6]
 8000dd6:	08db      	lsrs	r3, r3, #3
 8000dd8:	b2d8      	uxtb	r0, r3
 8000dda:	4603      	mov	r3, r0
 8000ddc:	01db      	lsls	r3, r3, #7
 8000dde:	4413      	add	r3, r2
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <ssd1306_DrawPixel+0xbc>)
 8000de2:	5cd3      	ldrb	r3, [r2, r3]
 8000de4:	b25a      	sxtb	r2, r3
 8000de6:	79bb      	ldrb	r3, [r7, #6]
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	2101      	movs	r1, #1
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	b25b      	sxtb	r3, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	4013      	ands	r3, r2
 8000dfa:	b259      	sxtb	r1, r3
 8000dfc:	79fa      	ldrb	r2, [r7, #7]
 8000dfe:	4603      	mov	r3, r0
 8000e00:	01db      	lsls	r3, r3, #7
 8000e02:	4413      	add	r3, r2
 8000e04:	b2c9      	uxtb	r1, r1
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <ssd1306_DrawPixel+0xbc>)
 8000e08:	54d1      	strb	r1, [r2, r3]
 8000e0a:	e000      	b.n	8000e0e <ssd1306_DrawPixel+0xae>
        return;
 8000e0c:	bf00      	nop
    }
}
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000104 	.word	0x20000104
 8000e1c:	20000150 	.word	0x20000150

08000e20 <ssd1306_SetCursor>:
void ssd1306_SetCursor(unsigned char x, unsigned char y) {
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	460a      	mov	r2, r1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <ssd1306_SetCursor+0x28>)
 8000e34:	6013      	str	r3, [r2, #0]
    SSD1306.CurrentY = y;
 8000e36:	79bb      	ldrb	r3, [r7, #6]
 8000e38:	4a03      	ldr	r2, [pc, #12]	; (8000e48 <ssd1306_SetCursor+0x28>)
 8000e3a:	6053      	str	r3, [r2, #4]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000104 	.word	0x20000104

08000e4c <ssd1306_ClearScreen>:
 void ssd1306_ClearScreen()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff fec5 	bl	8000be0 <ssd1306_Fill>
  //  ssd1306_UpdateScreen();
    ssd1306_SetCursor(0,0);
 8000e56:	2100      	movs	r1, #0
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff ffe1 	bl	8000e20 <ssd1306_SetCursor>
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	1d38      	adds	r0, r7, #4
 8000e6e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000e72:	461a      	mov	r2, r3
 8000e74:	4623      	mov	r3, r4
 8000e76:	73fb      	strb	r3, [r7, #15]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	73bb      	strb	r3, [r7, #14]
    unsigned int i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	2b1f      	cmp	r3, #31
 8000e80:	d902      	bls.n	8000e88 <ssd1306_WriteChar+0x24>
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	2b7e      	cmp	r3, #126	; 0x7e
 8000e86:	d901      	bls.n	8000e8c <ssd1306_WriteChar+0x28>
        return 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	e082      	b.n	8000f92 <ssd1306_WriteChar+0x12e>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000e8c:	4b43      	ldr	r3, [pc, #268]	; (8000f9c <ssd1306_WriteChar+0x138>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	793a      	ldrb	r2, [r7, #4]
 8000e92:	4413      	add	r3, r2
 8000e94:	2b80      	cmp	r3, #128	; 0x80
 8000e96:	d805      	bhi.n	8000ea4 <ssd1306_WriteChar+0x40>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000e98:	4b40      	ldr	r3, [pc, #256]	; (8000f9c <ssd1306_WriteChar+0x138>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	797a      	ldrb	r2, [r7, #5]
 8000e9e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000ea0:	2b40      	cmp	r3, #64	; 0x40
 8000ea2:	d91a      	bls.n	8000eda <ssd1306_WriteChar+0x76>
    {
        // Not enough space on current line
        if(SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth))
 8000ea4:	4b3d      	ldr	r3, [pc, #244]	; (8000f9c <ssd1306_WriteChar+0x138>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	793a      	ldrb	r2, [r7, #4]
 8000eaa:	4413      	add	r3, r2
 8000eac:	2b80      	cmp	r3, #128	; 0x80
 8000eae:	d912      	bls.n	8000ed6 <ssd1306_WriteChar+0x72>
        {
            if(SSD1306_HEIGHT > (SSD1306.CurrentY + Font.FontHeight))
 8000eb0:	4b3a      	ldr	r3, [pc, #232]	; (8000f9c <ssd1306_WriteChar+0x138>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	797a      	ldrb	r2, [r7, #5]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	2b3f      	cmp	r3, #63	; 0x3f
 8000eba:	d80a      	bhi.n	8000ed2 <ssd1306_WriteChar+0x6e>
            {
                ssd1306_SetCursor(0,SSD1306.CurrentY+Font.FontHeight);
 8000ebc:	4b37      	ldr	r3, [pc, #220]	; (8000f9c <ssd1306_WriteChar+0x138>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	797b      	ldrb	r3, [r7, #5]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	4619      	mov	r1, r3
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f7ff ffa8 	bl	8000e20 <ssd1306_SetCursor>
 8000ed0:	e001      	b.n	8000ed6 <ssd1306_WriteChar+0x72>
            }
            else
            {
                ssd1306_ClearScreen();
 8000ed2:	f7ff ffbb 	bl	8000e4c <ssd1306_ClearScreen>
//            else if(SSD1306_WIDTH > (SSD1306.CurrentX + Font.FontWIDTH))
//            {
//                ssd1306_SetCursor(SSD1306.CurrentX+1,0);
//            }
        }
        return 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e05b      	b.n	8000f92 <ssd1306_WriteChar+0x12e>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	e04c      	b.n	8000f7a <ssd1306_WriteChar+0x116>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000ee0:	68ba      	ldr	r2, [r7, #8]
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	3b20      	subs	r3, #32
 8000ee6:	7979      	ldrb	r1, [r7, #5]
 8000ee8:	fb01 f303 	mul.w	r3, r1, r3
 8000eec:	4619      	mov	r1, r3
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	440b      	add	r3, r1
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
 8000efe:	e034      	b.n	8000f6a <ssd1306_WriteChar+0x106>
            if((b << j) & 0x8000)  {
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d012      	beq.n	8000f36 <ssd1306_WriteChar+0xd2>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000f10:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <ssd1306_WriteChar+0x138>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b2d8      	uxtb	r0, r3
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <ssd1306_WriteChar+0x138>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	4413      	add	r3, r2
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	7bba      	ldrb	r2, [r7, #14]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f7ff ff16 	bl	8000d60 <ssd1306_DrawPixel>
 8000f34:	e016      	b.n	8000f64 <ssd1306_WriteChar+0x100>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <ssd1306_WriteChar+0x138>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	4413      	add	r3, r2
 8000f42:	b2d8      	uxtb	r0, r3
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <ssd1306_WriteChar+0x138>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4413      	add	r3, r2
 8000f50:	b2d9      	uxtb	r1, r3
 8000f52:	7bbb      	ldrb	r3, [r7, #14]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf0c      	ite	eq
 8000f58:	2301      	moveq	r3, #1
 8000f5a:	2300      	movne	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f7ff fefe 	bl	8000d60 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	3301      	adds	r3, #1
 8000f68:	61bb      	str	r3, [r7, #24]
 8000f6a:	793b      	ldrb	r3, [r7, #4]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d3c5      	bcc.n	8000f00 <ssd1306_WriteChar+0x9c>
    for(i = 0; i < Font.FontHeight; i++) {
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	3301      	adds	r3, #1
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	797b      	ldrb	r3, [r7, #5]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d3ad      	bcc.n	8000ee0 <ssd1306_WriteChar+0x7c>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <ssd1306_WriteChar+0x138>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	793a      	ldrb	r2, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a03      	ldr	r2, [pc, #12]	; (8000f9c <ssd1306_WriteChar+0x138>)
 8000f8e:	6013      	str	r3, [r2, #0]

    // Return written char for validation
    return ch;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd90      	pop	{r4, r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000104 	.word	0x20000104

08000fa0 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	1d38      	adds	r0, r7, #4
 8000faa:	e880 0006 	stmia.w	r0, {r1, r2}
 8000fae:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000fb0:	e012      	b.n	8000fd8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	7818      	ldrb	r0, [r3, #0]
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	1d3a      	adds	r2, r7, #4
 8000fba:	ca06      	ldmia	r2, {r1, r2}
 8000fbc:	f7ff ff52 	bl	8000e64 <ssd1306_WriteChar>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d002      	beq.n	8000fd2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	e008      	b.n	8000fe4 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1e8      	bne.n	8000fb2 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <ssd1306_PutInt>:

// Position the cursor
void ssd1306_PutInt(unsigned int number, FontDef Font, SSD1306_COLOR color)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b09e      	sub	sp, #120	; 0x78
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	1d38      	adds	r0, r7, #4
 8000ff6:	e880 0006 	stmia.w	r0, {r1, r2}
 8000ffa:	70fb      	strb	r3, [r7, #3]
    unsigned char f[100];
    sprintf(f,"%d",number);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	4907      	ldr	r1, [pc, #28]	; (8001020 <ssd1306_PutInt+0x34>)
 8001004:	4618      	mov	r0, r3
 8001006:	f002 ffdb 	bl	8003fc0 <siprintf>
    ssd1306_WriteString(f, Font,  color);
 800100a:	78fb      	ldrb	r3, [r7, #3]
 800100c:	f107 0014 	add.w	r0, r7, #20
 8001010:	1d3a      	adds	r2, r7, #4
 8001012:	ca06      	ldmia	r2, {r1, r2}
 8001014:	f7ff ffc4 	bl	8000fa0 <ssd1306_WriteString>
}
 8001018:	bf00      	nop
 800101a:	3778      	adds	r7, #120	; 0x78
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	080047fc 	.word	0x080047fc

08001024 <my_spi_write16>:

};


void my_spi_write16(SPI_HandleTypeDef *hspi,uint16_t my_data,GPIO_TypeDef *SLAVE_GPIO,uint16_t SLAVE_GPIO_PIN)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	461a      	mov	r2, r3
 8001030:	460b      	mov	r3, r1
 8001032:	817b      	strh	r3, [r7, #10]
 8001034:	4613      	mov	r3, r2
 8001036:	813b      	strh	r3, [r7, #8]


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2110      	movs	r1, #16
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <my_spi_write16+0x40>)
 800103e:	f001 f884 	bl	800214a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, &my_data, 1, 800);
 8001042:	f107 010a 	add.w	r1, r7, #10
 8001046:	f44f 7348 	mov.w	r3, #800	; 0x320
 800104a:	2201      	movs	r2, #1
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f002 f960 	bl	8003312 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001052:	2201      	movs	r2, #1
 8001054:	2110      	movs	r1, #16
 8001056:	4803      	ldr	r0, [pc, #12]	; (8001064 <my_spi_write16+0x40>)
 8001058:	f001 f877 	bl	800214a <HAL_GPIO_WritePin>





}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40010800 	.word	0x40010800

08001068 <ad9833_send_command>:
void ad9833_send_command(uint16_t command)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]
	my_spi_write16(&hspi1,command, GPIOB,GPIO_PIN_0);
 8001072:	88f9      	ldrh	r1, [r7, #6]
 8001074:	2301      	movs	r3, #1
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <ad9833_send_command+0x20>)
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <ad9833_send_command+0x24>)
 800107a:	f7ff ffd3 	bl	8001024 <my_spi_write16>

}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40010c00 	.word	0x40010c00
 800108c:	20000550 	.word	0x20000550

08001090 <ad9833_set_mode_and_freq>:

}


void ad9833_set_mode_and_freq(char mode,uint32_t freq )
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]


	uint32_t temp = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
	if(mode==0)
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d104      	bne.n	80010b0 <ad9833_set_mode_and_freq+0x20>
		ad9833_send_command( (1<<13)  ); ///sin mode
 80010a6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010aa:	f7ff ffdd 	bl	8001068 <ad9833_send_command>
 80010ae:	e016      	b.n	80010de <ad9833_set_mode_and_freq+0x4e>
	else if (mode==1)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d104      	bne.n	80010c0 <ad9833_set_mode_and_freq+0x30>
		ad9833_send_command( (1<<13) | (1<<1)); //tri mode
 80010b6:	f242 0002 	movw	r0, #8194	; 0x2002
 80010ba:	f7ff ffd5 	bl	8001068 <ad9833_send_command>
 80010be:	e00e      	b.n	80010de <ad9833_set_mode_and_freq+0x4e>
	else if (mode==2)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d104      	bne.n	80010d0 <ad9833_set_mode_and_freq+0x40>
			ad9833_send_command( (1<<13) |(1<<5)| (1<<3)); //pulse mode
 80010c6:	f242 0028 	movw	r0, #8232	; 0x2028
 80010ca:	f7ff ffcd 	bl	8001068 <ad9833_send_command>
 80010ce:	e006      	b.n	80010de <ad9833_set_mode_and_freq+0x4e>
	else if (mode==3)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d103      	bne.n	80010de <ad9833_set_mode_and_freq+0x4e>
			ad9833_send_command( (1<<13) |(1<<5)); //pulse2om mode
 80010d6:	f242 0020 	movw	r0, #8224	; 0x2020
 80010da:	f7ff ffc5 	bl	8001068 <ad9833_send_command>


	freq =(float) freq*10.73741824;
 80010de:	6838      	ldr	r0, [r7, #0]
 80010e0:	f7ff fcda 	bl	8000a98 <__aeabi_ui2f>
 80010e4:	4603      	mov	r3, r0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f996 	bl	8000418 <__aeabi_f2d>
 80010ec:	a314      	add	r3, pc, #80	; (adr r3, 8001140 <ad9833_set_mode_and_freq+0xb0>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff f9e9 	bl	80004c8 <__aeabi_dmul>
 80010f6:	4603      	mov	r3, r0
 80010f8:	460c      	mov	r4, r1
 80010fa:	4618      	mov	r0, r3
 80010fc:	4621      	mov	r1, r4
 80010fe:	f7ff fbf5 	bl	80008ec <__aeabi_d2uiz>
 8001102:	4603      	mov	r3, r0
 8001104:	603b      	str	r3, [r7, #0]
	temp = freq;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	60fb      	str	r3, [r7, #12]
	//temp = 10000;
	//send lsb first
	ad9833_send_command((temp%(1<<14))| 1<<14);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	b29b      	uxth	r3, r3
 800110e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001112:	b29b      	uxth	r3, r3
 8001114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001118:	b29b      	uxth	r3, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ffa4 	bl	8001068 <ad9833_send_command>
	ad9833_send_command((temp>>14)| 1<<14);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	0b9b      	lsrs	r3, r3, #14
 8001124:	b29b      	uxth	r3, r3
 8001126:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112a:	b29b      	uxth	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff9b 	bl	8001068 <ad9833_send_command>



	//#268435456/25000000=10.73741824
	//   freg*(fref/2^28 )  // in my case fref is 25mhz
}
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	bd90      	pop	{r4, r7, pc}
 800113a:	bf00      	nop
 800113c:	f3af 8000 	nop.w
 8001140:	e2308c3a 	.word	0xe2308c3a
 8001144:	4025798e 	.word	0x4025798e

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114c:	f000 fcfa 	bl	8001b44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001150:	f000 f894 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001154:	f000 f9d8 	bl	8001508 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001158:	f000 f8cc 	bl	80012f4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800115c:	f000 f8f8 	bl	8001350 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001160:	f000 f92e 	bl	80013c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001164:	f000 f984 	bl	8001470 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  ssd1306_Init();
 8001168:	f7ff fd8e 	bl	8000c88 <ssd1306_Init>

  ssd1306_Fill(Black);
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff fd37 	bl	8000be0 <ssd1306_Fill>
  ssd1306_WriteString("salam chetori", Font_7x10, White);
 8001172:	4a36      	ldr	r2, [pc, #216]	; (800124c <main+0x104>)
 8001174:	2301      	movs	r3, #1
 8001176:	ca06      	ldmia	r2, {r1, r2}
 8001178:	4835      	ldr	r0, [pc, #212]	; (8001250 <main+0x108>)
 800117a:	f7ff ff11 	bl	8000fa0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800117e:	f7ff fd51 	bl	8000c24 <ssd1306_UpdateScreen>

  HAL_TIM_Base_Start_IT(&htim2);
 8001182:	4834      	ldr	r0, [pc, #208]	; (8001254 <main+0x10c>)
 8001184:	f002 faac 	bl	80036e0 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001188:	213c      	movs	r1, #60	; 0x3c
 800118a:	4833      	ldr	r0, [pc, #204]	; (8001258 <main+0x110>)
 800118c:	f002 fb59 	bl	8003842 <HAL_TIM_Encoder_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  db = TIM1->CNT;
 8001190:	4b32      	ldr	r3, [pc, #200]	; (800125c <main+0x114>)
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	461a      	mov	r2, r3
 8001196:	4b32      	ldr	r3, [pc, #200]	; (8001260 <main+0x118>)
 8001198:	601a      	str	r2, [r3, #0]
	  db*=100;
 800119a:	4b31      	ldr	r3, [pc, #196]	; (8001260 <main+0x118>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2264      	movs	r2, #100	; 0x64
 80011a0:	fb02 f303 	mul.w	r3, r2, r3
 80011a4:	4a2e      	ldr	r2, [pc, #184]	; (8001260 <main+0x118>)
 80011a6:	6013      	str	r3, [r2, #0]
	  ssd1306_SetCursor(0, 14);
 80011a8:	210e      	movs	r1, #14
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff fe38 	bl	8000e20 <ssd1306_SetCursor>
	  ssd1306_WriteString("freq = ", Font_7x10, White);
 80011b0:	4a26      	ldr	r2, [pc, #152]	; (800124c <main+0x104>)
 80011b2:	2301      	movs	r3, #1
 80011b4:	ca06      	ldmia	r2, {r1, r2}
 80011b6:	482b      	ldr	r0, [pc, #172]	; (8001264 <main+0x11c>)
 80011b8:	f7ff fef2 	bl	8000fa0 <ssd1306_WriteString>
	  ssd1306_PutInt(pulse ,Font_7x10, White);
 80011bc:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <main+0x120>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	4a22      	ldr	r2, [pc, #136]	; (800124c <main+0x104>)
 80011c4:	2301      	movs	r3, #1
 80011c6:	ca06      	ldmia	r2, {r1, r2}
 80011c8:	f7ff ff10 	bl	8000fec <ssd1306_PutInt>
	  ssd1306_WriteString("        ", Font_7x10, White);
 80011cc:	4a1f      	ldr	r2, [pc, #124]	; (800124c <main+0x104>)
 80011ce:	2301      	movs	r3, #1
 80011d0:	ca06      	ldmia	r2, {r1, r2}
 80011d2:	4826      	ldr	r0, [pc, #152]	; (800126c <main+0x124>)
 80011d4:	f7ff fee4 	bl	8000fa0 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 23);
 80011d8:	2117      	movs	r1, #23
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fe20 	bl	8000e20 <ssd1306_SetCursor>
	  ssd1306_WriteString("db   = ", Font_7x10, White);
 80011e0:	4a1a      	ldr	r2, [pc, #104]	; (800124c <main+0x104>)
 80011e2:	2301      	movs	r3, #1
 80011e4:	ca06      	ldmia	r2, {r1, r2}
 80011e6:	4822      	ldr	r0, [pc, #136]	; (8001270 <main+0x128>)
 80011e8:	f7ff feda 	bl	8000fa0 <ssd1306_WriteString>
	  ssd1306_PutInt(db ,Font_7x10, White);
 80011ec:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <main+0x118>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	4a16      	ldr	r2, [pc, #88]	; (800124c <main+0x104>)
 80011f4:	2301      	movs	r3, #1
 80011f6:	ca06      	ldmia	r2, {r1, r2}
 80011f8:	f7ff fef8 	bl	8000fec <ssd1306_PutInt>
	  ssd1306_WriteString("        ", Font_7x10, White);
 80011fc:	4a13      	ldr	r2, [pc, #76]	; (800124c <main+0x104>)
 80011fe:	2301      	movs	r3, #1
 8001200:	ca06      	ldmia	r2, {r1, r2}
 8001202:	481a      	ldr	r0, [pc, #104]	; (800126c <main+0x124>)
 8001204:	f7ff fecc 	bl	8000fa0 <ssd1306_WriteString>
	  ssd1306_SetCursor(0,  30);
 8001208:	211e      	movs	r1, #30
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff fe08 	bl	8000e20 <ssd1306_SetCursor>
	  ssd1306_WriteString("c   = ", Font_7x10, White);
 8001210:	4a0e      	ldr	r2, [pc, #56]	; (800124c <main+0x104>)
 8001212:	2301      	movs	r3, #1
 8001214:	ca06      	ldmia	r2, {r1, r2}
 8001216:	4817      	ldr	r0, [pc, #92]	; (8001274 <main+0x12c>)
 8001218:	f7ff fec2 	bl	8000fa0 <ssd1306_WriteString>
	  ssd1306_PutInt(state2,Font_7x10, White);
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <main+0x130>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <main+0x104>)
 8001224:	2301      	movs	r3, #1
 8001226:	ca06      	ldmia	r2, {r1, r2}
 8001228:	f7ff fee0 	bl	8000fec <ssd1306_PutInt>
	  ssd1306_WriteString("        ", Font_7x10, White);
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <main+0x104>)
 800122e:	2301      	movs	r3, #1
 8001230:	ca06      	ldmia	r2, {r1, r2}
 8001232:	480e      	ldr	r0, [pc, #56]	; (800126c <main+0x124>)
 8001234:	f7ff feb4 	bl	8000fa0 <ssd1306_WriteString>




	  ssd1306_UpdateScreen();
 8001238:	f7ff fcf4 	bl	8000c24 <ssd1306_UpdateScreen>
	  ad9833_set_mode_and_freq(ad9833_sin, db );
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <main+0x118>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	2000      	movs	r0, #0
 8001244:	f7ff ff24 	bl	8001090 <ad9833_set_mode_and_freq>
	  db = TIM1->CNT;
 8001248:	e7a2      	b.n	8001190 <main+0x48>
 800124a:	bf00      	nop
 800124c:	20000000 	.word	0x20000000
 8001250:	08004800 	.word	0x08004800
 8001254:	200005a8 	.word	0x200005a8
 8001258:	20000110 	.word	0x20000110
 800125c:	40012c00 	.word	0x40012c00
 8001260:	2000000c 	.word	0x2000000c
 8001264:	08004810 	.word	0x08004810
 8001268:	20000008 	.word	0x20000008
 800126c:	08004818 	.word	0x08004818
 8001270:	08004824 	.word	0x08004824
 8001274:	0800482c 	.word	0x0800482c
 8001278:	2000009c 	.word	0x2000009c

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b090      	sub	sp, #64	; 0x40
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0318 	add.w	r3, r7, #24
 8001286:	2228      	movs	r2, #40	; 0x28
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f002 fe90 	bl	8003fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800129e:	2302      	movs	r3, #2
 80012a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a2:	2301      	movs	r3, #1
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a6:	2310      	movs	r3, #16
 80012a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ae:	f107 0318 	add.w	r3, r7, #24
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 fbc4 	bl	8002a40 <HAL_RCC_OscConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80012be:	f000 fa67 	bl	8001790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c2:	230f      	movs	r3, #15
 80012c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 fe2f 	bl	8002f40 <HAL_RCC_ClockConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0x70>
  {
    Error_Handler();
 80012e8:	f000 fa52 	bl	8001790 <Error_Handler>
  }
}
 80012ec:	bf00      	nop
 80012ee:	3740      	adds	r7, #64	; 0x40
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_I2C1_Init+0x50>)
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <MX_I2C1_Init+0x54>)
 80012fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_I2C1_Init+0x50>)
 8001300:	4a12      	ldr	r2, [pc, #72]	; (800134c <MX_I2C1_Init+0x58>)
 8001302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_I2C1_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_I2C1_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_I2C1_Init+0x50>)
 8001312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001316:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <MX_I2C1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_I2C1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001324:	4b07      	ldr	r3, [pc, #28]	; (8001344 <MX_I2C1_Init+0x50>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_I2C1_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <MX_I2C1_Init+0x50>)
 8001332:	f000 ff53 	bl	80021dc <HAL_I2C_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800133c:	f000 fa28 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200000b0 	.word	0x200000b0
 8001348:	40005400 	.word	0x40005400
 800134c:	000186a0 	.word	0x000186a0

08001350 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_SPI1_Init+0x68>)
 8001356:	4a19      	ldr	r2, [pc, #100]	; (80013bc <MX_SPI1_Init+0x6c>)
 8001358:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_SPI1_Init+0x68>)
 800135c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001360:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_SPI1_Init+0x68>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <MX_SPI1_Init+0x68>)
 800136a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800136e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_SPI1_Init+0x68>)
 8001372:	2202      	movs	r2, #2
 8001374:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <MX_SPI1_Init+0x68>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_SPI1_Init+0x68>)
 800137e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001382:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_SPI1_Init+0x68>)
 8001386:	2230      	movs	r2, #48	; 0x30
 8001388:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <MX_SPI1_Init+0x68>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_SPI1_Init+0x68>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <MX_SPI1_Init+0x68>)
 8001398:	2200      	movs	r2, #0
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_SPI1_Init+0x68>)
 800139e:	220a      	movs	r2, #10
 80013a0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_SPI1_Init+0x68>)
 80013a4:	f001 ff54 	bl	8003250 <HAL_SPI_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80013ae:	f000 f9ef 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000550 	.word	0x20000550
 80013bc:	40013000 	.word	0x40013000

080013c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	; 0x30
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	2224      	movs	r2, #36	; 0x24
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 fdee 	bl	8003fb0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <MX_TIM1_Init+0xa8>)
 80013de:	4a23      	ldr	r2, [pc, #140]	; (800146c <MX_TIM1_Init+0xac>)
 80013e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <MX_TIM1_Init+0xa8>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e8:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <MX_TIM1_Init+0xa8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <MX_TIM1_Init+0xa8>)
 80013f0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80013f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <MX_TIM1_Init+0xa8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_TIM1_Init+0xa8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <MX_TIM1_Init+0xa8>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001408:	2303      	movs	r3, #3
 800140a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800140c:	2300      	movs	r3, #0
 800140e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001410:	2301      	movs	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001418:	230f      	movs	r3, #15
 800141a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001420:	2301      	movs	r3, #1
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	4619      	mov	r1, r3
 8001432:	480d      	ldr	r0, [pc, #52]	; (8001468 <MX_TIM1_Init+0xa8>)
 8001434:	f002 f977 	bl	8003726 <HAL_TIM_Encoder_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800143e:	f000 f9a7 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	4619      	mov	r1, r3
 800144e:	4806      	ldr	r0, [pc, #24]	; (8001468 <MX_TIM1_Init+0xa8>)
 8001450:	f002 fd2e 	bl	8003eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800145a:	f000 f999 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	3730      	adds	r7, #48	; 0x30
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000110 	.word	0x20000110
 800146c:	40012c00 	.word	0x40012c00

08001470 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001484:	463b      	mov	r3, r7
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <MX_TIM2_Init+0x94>)
 800148e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001492:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_TIM2_Init+0x94>)
 8001496:	2200      	movs	r2, #0
 8001498:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <MX_TIM2_Init+0x94>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_TIM2_Init+0x94>)
 80014a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_TIM2_Init+0x94>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <MX_TIM2_Init+0x94>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014b4:	4813      	ldr	r0, [pc, #76]	; (8001504 <MX_TIM2_Init+0x94>)
 80014b6:	f002 f8e8 	bl	800368a <HAL_TIM_Base_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014c0:	f000 f966 	bl	8001790 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	4619      	mov	r1, r3
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <MX_TIM2_Init+0x94>)
 80014d2:	f002 faf5 	bl	8003ac0 <HAL_TIM_ConfigClockSource>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014dc:	f000 f958 	bl	8001790 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014e8:	463b      	mov	r3, r7
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_TIM2_Init+0x94>)
 80014ee:	f002 fcdf 	bl	8003eb0 <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014f8:	f000 f94a 	bl	8001790 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200005a8 	.word	0x200005a8

08001508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151c:	4b38      	ldr	r3, [pc, #224]	; (8001600 <MX_GPIO_Init+0xf8>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a37      	ldr	r2, [pc, #220]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001522:	f043 0310 	orr.w	r3, r3, #16
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b35      	ldr	r3, [pc, #212]	; (8001600 <MX_GPIO_Init+0xf8>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0310 	and.w	r3, r3, #16
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	4b32      	ldr	r3, [pc, #200]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a31      	ldr	r2, [pc, #196]	; (8001600 <MX_GPIO_Init+0xf8>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154c:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <MX_GPIO_Init+0xf8>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a2b      	ldr	r2, [pc, #172]	; (8001600 <MX_GPIO_Init+0xf8>)
 8001552:	f043 0308 	orr.w	r3, r3, #8
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <MX_GPIO_Init+0xf8>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156a:	4826      	ldr	r0, [pc, #152]	; (8001604 <MX_GPIO_Init+0xfc>)
 800156c:	f000 fded 	bl	800214a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	2110      	movs	r1, #16
 8001574:	4824      	ldr	r0, [pc, #144]	; (8001608 <MX_GPIO_Init+0x100>)
 8001576:	f000 fde8 	bl	800214a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800157a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001584:	2301      	movs	r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2302      	movs	r3, #2
 800158a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	4619      	mov	r1, r3
 8001592:	481c      	ldr	r0, [pc, #112]	; (8001604 <MX_GPIO_Init+0xfc>)
 8001594:	f000 fc68 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001598:	2310      	movs	r3, #16
 800159a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159c:	2301      	movs	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	4619      	mov	r1, r3
 80015ae:	4816      	ldr	r0, [pc, #88]	; (8001608 <MX_GPIO_Init+0x100>)
 80015b0:	f000 fc5a 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : key1_Pin dir1_Pin key2_Pin */
  GPIO_InitStruct.Pin = key1_Pin|dir1_Pin|key2_Pin;
 80015b4:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80015b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015be:	2301      	movs	r3, #1
 80015c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	4619      	mov	r1, r3
 80015c8:	4810      	ldr	r0, [pc, #64]	; (800160c <MX_GPIO_Init+0x104>)
 80015ca:	f000 fc4d 	bl	8001e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : encod1_Pin */
  GPIO_InitStruct.Pin = encod1_Pin;
 80015ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MX_GPIO_Init+0x108>)
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d8:	2301      	movs	r3, #1
 80015da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(encod1_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	4619      	mov	r1, r3
 80015e2:	480a      	ldr	r0, [pc, #40]	; (800160c <MX_GPIO_Init+0x104>)
 80015e4:	f000 fc40 	bl	8001e68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2100      	movs	r1, #0
 80015ec:	2028      	movs	r0, #40	; 0x28
 80015ee:	f000 fc04 	bl	8001dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015f2:	2028      	movs	r0, #40	; 0x28
 80015f4:	f000 fc1d 	bl	8001e32 <HAL_NVIC_EnableIRQ>

}
 80015f8:	bf00      	nop
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40021000 	.word	0x40021000
 8001604:	40011000 	.word	0x40011000
 8001608:	40010800 	.word	0x40010800
 800160c:	40010c00 	.word	0x40010c00
 8001610:	10310000 	.word	0x10310000

08001614 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */



 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

//	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	 state2 ++ ;
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001626:	701a      	strb	r2, [r3, #0]
	 if(state2>250)
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2bfa      	cmp	r3, #250	; 0xfa
 800162e:	d902      	bls.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x22>
		 state2=250;
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001632:	22fa      	movs	r2, #250	; 0xfa
 8001634:	701a      	strb	r2, [r3, #0]
 }
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	2000009c 	.word	0x2000009c

08001644 <HAL_GPIO_EXTI_Callback>:



 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	80fb      	strh	r3, [r7, #6]

	 char valid = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
	 __HAL_TIM_DISABLE(&htim2);
 8001652:	4b48      	ldr	r3, [pc, #288]	; (8001774 <HAL_GPIO_EXTI_Callback+0x130>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6a1a      	ldr	r2, [r3, #32]
 8001658:	f241 1311 	movw	r3, #4369	; 0x1111
 800165c:	4013      	ands	r3, r2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10f      	bne.n	8001682 <HAL_GPIO_EXTI_Callback+0x3e>
 8001662:	4b44      	ldr	r3, [pc, #272]	; (8001774 <HAL_GPIO_EXTI_Callback+0x130>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6a1a      	ldr	r2, [r3, #32]
 8001668:	f240 4344 	movw	r3, #1092	; 0x444
 800166c:	4013      	ands	r3, r2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d107      	bne.n	8001682 <HAL_GPIO_EXTI_Callback+0x3e>
 8001672:	4b40      	ldr	r3, [pc, #256]	; (8001774 <HAL_GPIO_EXTI_Callback+0x130>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b3e      	ldr	r3, [pc, #248]	; (8001774 <HAL_GPIO_EXTI_Callback+0x130>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0201 	bic.w	r2, r2, #1
 8001680:	601a      	str	r2, [r3, #0]

	 counter =	__HAL_TIM_GET_COUNTER(&htim2);
 8001682:	4b3c      	ldr	r3, [pc, #240]	; (8001774 <HAL_GPIO_EXTI_Callback+0x130>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	4a3b      	ldr	r2, [pc, #236]	; (8001778 <HAL_GPIO_EXTI_Callback+0x134>)
 800168a:	6013      	str	r3, [r2, #0]

	 if(state2>=2&&state2<=50)
 800168c:	4b3b      	ldr	r3, [pc, #236]	; (800177c <HAL_GPIO_EXTI_Callback+0x138>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d906      	bls.n	80016a2 <HAL_GPIO_EXTI_Callback+0x5e>
 8001694:	4b39      	ldr	r3, [pc, #228]	; (800177c <HAL_GPIO_EXTI_Callback+0x138>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b32      	cmp	r3, #50	; 0x32
 800169a:	d802      	bhi.n	80016a2 <HAL_GPIO_EXTI_Callback+0x5e>
	 {
		 valid = 1;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	e001      	b.n	80016a6 <HAL_GPIO_EXTI_Callback+0x62>

	 }
	 else
		 valid =0 ;
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]



	 if(valid)
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d023      	beq.n	80016f4 <HAL_GPIO_EXTI_Callback+0xb0>
	 {

		if(GPIO_Pin == encod1_Pin)
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016b2:	d11f      	bne.n	80016f4 <HAL_GPIO_EXTI_Callback+0xb0>
		{
			  if(state==0)
 80016b4:	4b32      	ldr	r3, [pc, #200]	; (8001780 <HAL_GPIO_EXTI_Callback+0x13c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10e      	bne.n	80016da <HAL_GPIO_EXTI_Callback+0x96>
			  {
				  pulse+=1;
 80016bc:	4b31      	ldr	r3, [pc, #196]	; (8001784 <HAL_GPIO_EXTI_Callback+0x140>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	4a30      	ldr	r2, [pc, #192]	; (8001784 <HAL_GPIO_EXTI_Callback+0x140>)
 80016c4:	6013      	str	r3, [r2, #0]
				  if(pulse>20000)
 80016c6:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <HAL_GPIO_EXTI_Callback+0x140>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f644 6220 	movw	r2, #20000	; 0x4e20
 80016ce:	4293      	cmp	r3, r2
 80016d0:	dd10      	ble.n	80016f4 <HAL_GPIO_EXTI_Callback+0xb0>
					  pulse=0;
 80016d2:	4b2c      	ldr	r3, [pc, #176]	; (8001784 <HAL_GPIO_EXTI_Callback+0x140>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	e00c      	b.n	80016f4 <HAL_GPIO_EXTI_Callback+0xb0>
			  }
			  else
			  {
				  pulse-=1;
 80016da:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <HAL_GPIO_EXTI_Callback+0x140>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3b01      	subs	r3, #1
 80016e0:	4a28      	ldr	r2, [pc, #160]	; (8001784 <HAL_GPIO_EXTI_Callback+0x140>)
 80016e2:	6013      	str	r3, [r2, #0]
				  if(pulse<0)
 80016e4:	4b27      	ldr	r3, [pc, #156]	; (8001784 <HAL_GPIO_EXTI_Callback+0x140>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da03      	bge.n	80016f4 <HAL_GPIO_EXTI_Callback+0xb0>
					  pulse=20000;
 80016ec:	4b25      	ldr	r3, [pc, #148]	; (8001784 <HAL_GPIO_EXTI_Callback+0x140>)
 80016ee:	f644 6220 	movw	r2, #20000	; 0x4e20
 80016f2:	601a      	str	r2, [r3, #0]
			  }
		}
	 }


	 if(HAL_GPIO_ReadPin(encod1_GPIO_Port,encod1_Pin)==1)
 80016f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016f8:	4823      	ldr	r0, [pc, #140]	; (8001788 <HAL_GPIO_EXTI_Callback+0x144>)
 80016fa:	f000 fd0f 	bl	800211c <HAL_GPIO_ReadPin>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b01      	cmp	r3, #1
 8001702:	d10f      	bne.n	8001724 <HAL_GPIO_EXTI_Callback+0xe0>
	 {
		 if(HAL_GPIO_ReadPin(dir1_GPIO_Port,dir1_Pin)==0)
 8001704:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001708:	481f      	ldr	r0, [pc, #124]	; (8001788 <HAL_GPIO_EXTI_Callback+0x144>)
 800170a:	f000 fd07 	bl	800211c <HAL_GPIO_ReadPin>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <HAL_GPIO_EXTI_Callback+0xd8>
		 {
			 state = 1 ;
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
 800171a:	e012      	b.n	8001742 <HAL_GPIO_EXTI_Callback+0xfe>

		 }
		 else
		 {
			 state = 0 ;
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_GPIO_EXTI_Callback+0x13c>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
 8001722:	e00e      	b.n	8001742 <HAL_GPIO_EXTI_Callback+0xfe>
		 }

	 }
	 else
	 {
		 if(HAL_GPIO_ReadPin(dir1_GPIO_Port,dir1_Pin)==1)
 8001724:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001728:	4817      	ldr	r0, [pc, #92]	; (8001788 <HAL_GPIO_EXTI_Callback+0x144>)
 800172a:	f000 fcf7 	bl	800211c <HAL_GPIO_ReadPin>
 800172e:	4603      	mov	r3, r0
 8001730:	2b01      	cmp	r3, #1
 8001732:	d103      	bne.n	800173c <HAL_GPIO_EXTI_Callback+0xf8>
		 {
			 state = 1 ;
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e002      	b.n	8001742 <HAL_GPIO_EXTI_Callback+0xfe>

		 }
		 else
		 {
			 state = 0 ;
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_GPIO_EXTI_Callback+0x13c>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]

		 }

	 }
	 __HAL_TIM_SET_COUNTER(&htim2,0);
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_GPIO_EXTI_Callback+0x130>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
	 state2 = 0;
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_GPIO_EXTI_Callback+0x138>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]

	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001750:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001754:	480d      	ldr	r0, [pc, #52]	; (800178c <HAL_GPIO_EXTI_Callback+0x148>)
 8001756:	f000 fd10 	bl	800217a <HAL_GPIO_TogglePin>
	 __HAL_TIM_ENABLE(&htim2);
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_GPIO_EXTI_Callback+0x130>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <HAL_GPIO_EXTI_Callback+0x130>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0201 	orr.w	r2, r2, #1
 8001768:	601a      	str	r2, [r3, #0]
//	 __enable_irq();

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200005a8 	.word	0x200005a8
 8001778:	200000a0 	.word	0x200000a0
 800177c:	2000009c 	.word	0x2000009c
 8001780:	2000009d 	.word	0x2000009d
 8001784:	20000008 	.word	0x20000008
 8001788:	40010c00 	.word	0x40010c00
 800178c:	40011000 	.word	0x40011000

08001790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_MspInit+0x5c>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <HAL_MspInit+0x5c>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6193      	str	r3, [r2, #24]
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_MspInit+0x5c>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_MspInit+0x5c>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <HAL_MspInit+0x5c>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <HAL_MspInit+0x5c>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_MspInit+0x60>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4a04      	ldr	r2, [pc, #16]	; (80017fc <HAL_MspInit+0x60>)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010000 	.word	0x40010000

08001800 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a15      	ldr	r2, [pc, #84]	; (8001870 <HAL_I2C_MspInit+0x70>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d123      	bne.n	8001868 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <HAL_I2C_MspInit+0x74>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a13      	ldr	r2, [pc, #76]	; (8001874 <HAL_I2C_MspInit+0x74>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <HAL_I2C_MspInit+0x74>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001838:	23c0      	movs	r3, #192	; 0xc0
 800183a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183c:	2312      	movs	r3, #18
 800183e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	4619      	mov	r1, r3
 800184a:	480b      	ldr	r0, [pc, #44]	; (8001878 <HAL_I2C_MspInit+0x78>)
 800184c:	f000 fb0c 	bl	8001e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_I2C_MspInit+0x74>)
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_I2C_MspInit+0x74>)
 8001856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800185a:	61d3      	str	r3, [r2, #28]
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_I2C_MspInit+0x74>)
 800185e:	69db      	ldr	r3, [r3, #28]
 8001860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001868:	bf00      	nop
 800186a:	3720      	adds	r7, #32
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40005400 	.word	0x40005400
 8001874:	40021000 	.word	0x40021000
 8001878:	40010c00 	.word	0x40010c00

0800187c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a15      	ldr	r2, [pc, #84]	; (80018ec <HAL_SPI_MspInit+0x70>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d123      	bne.n	80018e4 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HAL_SPI_MspInit+0x74>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a13      	ldr	r2, [pc, #76]	; (80018f0 <HAL_SPI_MspInit+0x74>)
 80018a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_SPI_MspInit+0x74>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_SPI_MspInit+0x74>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a0d      	ldr	r2, [pc, #52]	; (80018f0 <HAL_SPI_MspInit+0x74>)
 80018ba:	f043 0304 	orr.w	r3, r3, #4
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_SPI_MspInit+0x74>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80018cc:	23a0      	movs	r3, #160	; 0xa0
 80018ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d4:	2303      	movs	r3, #3
 80018d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4619      	mov	r1, r3
 80018de:	4805      	ldr	r0, [pc, #20]	; (80018f4 <HAL_SPI_MspInit+0x78>)
 80018e0:	f000 fac2 	bl	8001e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018e4:	bf00      	nop
 80018e6:	3720      	adds	r7, #32
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40013000 	.word	0x40013000
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010800 	.word	0x40010800

080018f8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a16      	ldr	r2, [pc, #88]	; (800196c <HAL_TIM_Encoder_MspInit+0x74>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d124      	bne.n	8001962 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_TIM_Encoder_MspInit+0x78>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a14      	ldr	r2, [pc, #80]	; (8001970 <HAL_TIM_Encoder_MspInit+0x78>)
 800191e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_TIM_Encoder_MspInit+0x78>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <HAL_TIM_Encoder_MspInit+0x78>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <HAL_TIM_Encoder_MspInit+0x78>)
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <HAL_TIM_Encoder_MspInit+0x78>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001948:	f44f 7340 	mov.w	r3, #768	; 0x300
 800194c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001952:	2301      	movs	r3, #1
 8001954:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	4619      	mov	r1, r3
 800195c:	4805      	ldr	r0, [pc, #20]	; (8001974 <HAL_TIM_Encoder_MspInit+0x7c>)
 800195e:	f000 fa83 	bl	8001e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001962:	bf00      	nop
 8001964:	3720      	adds	r7, #32
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40012c00 	.word	0x40012c00
 8001970:	40021000 	.word	0x40021000
 8001974:	40010800 	.word	0x40010800

08001978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001988:	d113      	bne.n	80019b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <HAL_TIM_Base_MspInit+0x44>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	4a0b      	ldr	r2, [pc, #44]	; (80019bc <HAL_TIM_Base_MspInit+0x44>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	61d3      	str	r3, [r2, #28]
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_TIM_Base_MspInit+0x44>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	201c      	movs	r0, #28
 80019a8:	f000 fa27 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019ac:	201c      	movs	r0, #28
 80019ae:	f000 fa40 	bl	8001e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <HardFault_Handler+0x4>

080019d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <MemManage_Handler+0x4>

080019d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <BusFault_Handler+0x4>

080019de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <UsageFault_Handler+0x4>

080019e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0c:	f000 f8e0 	bl	8001bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <TIM2_IRQHandler+0x10>)
 8001a1a:	f001 ff49 	bl	80038b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200005a8 	.word	0x200005a8

08001a28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001a2c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a30:	f000 fbbc 	bl	80021ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <_sbrk+0x50>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d102      	bne.n	8001a4e <_sbrk+0x16>
		heap_end = &end;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <_sbrk+0x50>)
 8001a4a:	4a10      	ldr	r2, [pc, #64]	; (8001a8c <_sbrk+0x54>)
 8001a4c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <_sbrk+0x50>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <_sbrk+0x50>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	466a      	mov	r2, sp
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d907      	bls.n	8001a72 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a62:	f002 fa7b 	bl	8003f5c <__errno>
 8001a66:	4602      	mov	r2, r0
 8001a68:	230c      	movs	r3, #12
 8001a6a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a70:	e006      	b.n	8001a80 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <_sbrk+0x50>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	4a03      	ldr	r2, [pc, #12]	; (8001a88 <_sbrk+0x50>)
 8001a7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	200000a4 	.word	0x200000a4
 8001a8c:	200005f0 	.word	0x200005f0

08001a90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a94:	4b15      	ldr	r3, [pc, #84]	; (8001aec <SystemInit+0x5c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a14      	ldr	r2, [pc, #80]	; (8001aec <SystemInit+0x5c>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <SystemInit+0x5c>)
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	4911      	ldr	r1, [pc, #68]	; (8001aec <SystemInit+0x5c>)
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <SystemInit+0x60>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <SystemInit+0x5c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <SystemInit+0x5c>)
 8001ab2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <SystemInit+0x5c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <SystemInit+0x5c>)
 8001ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <SystemInit+0x5c>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <SystemInit+0x5c>)
 8001ace:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001ad2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <SystemInit+0x5c>)
 8001ad6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001ada:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <SystemInit+0x64>)
 8001ade:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ae2:	609a      	str	r2, [r3, #8]
#endif 
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	40021000 	.word	0x40021000
 8001af0:	f8ff0000 	.word	0xf8ff0000
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001af8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001afa:	e003      	b.n	8001b04 <LoopCopyDataInit>

08001afc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001afe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b00:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b02:	3104      	adds	r1, #4

08001b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b04:	480a      	ldr	r0, [pc, #40]	; (8001b30 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b08:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b0a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b0c:	d3f6      	bcc.n	8001afc <CopyDataInit>
  ldr r2, =_sbss
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b10:	e002      	b.n	8001b18 <LoopFillZerobss>

08001b12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b14:	f842 3b04 	str.w	r3, [r2], #4

08001b18 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b1a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b1c:	d3f9      	bcc.n	8001b12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b1e:	f7ff ffb7 	bl	8001a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b22:	f002 fa21 	bl	8003f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b26:	f7ff fb0f 	bl	8001148 <main>
  bx lr
 8001b2a:	4770      	bx	lr
  ldr r3, =_sidata
 8001b2c:	08005774 	.word	0x08005774
  ldr r0, =_sdata
 8001b30:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b34:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8001b38:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8001b3c:	200005f0 	.word	0x200005f0

08001b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b40:	e7fe      	b.n	8001b40 <ADC1_2_IRQHandler>
	...

08001b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_Init+0x28>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a07      	ldr	r2, [pc, #28]	; (8001b6c <HAL_Init+0x28>)
 8001b4e:	f043 0310 	orr.w	r3, r3, #16
 8001b52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b54:	2003      	movs	r0, #3
 8001b56:	f000 f945 	bl	8001de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f000 f808 	bl	8001b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b60:	f7ff fe1c 	bl	800179c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40022000 	.word	0x40022000

08001b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_InitTick+0x54>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_InitTick+0x58>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f95d 	bl	8001e4e <HAL_SYSTICK_Config>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00e      	b.n	8001bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b0f      	cmp	r3, #15
 8001ba2:	d80a      	bhi.n	8001bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bac:	f000 f925 	bl	8001dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb0:	4a06      	ldr	r2, [pc, #24]	; (8001bcc <HAL_InitTick+0x5c>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000010 	.word	0x20000010
 8001bc8:	20000018 	.word	0x20000018
 8001bcc:	20000014 	.word	0x20000014

08001bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_IncTick+0x1c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_IncTick+0x20>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	4a03      	ldr	r2, [pc, #12]	; (8001bf0 <HAL_IncTick+0x20>)
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	20000018 	.word	0x20000018
 8001bf0:	200005e8 	.word	0x200005e8

08001bf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b02      	ldr	r3, [pc, #8]	; (8001c04 <HAL_GetTick+0x10>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	200005e8 	.word	0x200005e8

08001c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c10:	f7ff fff0 	bl	8001bf4 <HAL_GetTick>
 8001c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c20:	d005      	beq.n	8001c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_Delay+0x40>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c2e:	bf00      	nop
 8001c30:	f7ff ffe0 	bl	8001bf4 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d8f7      	bhi.n	8001c30 <HAL_Delay+0x28>
  {
  }
}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000018 	.word	0x20000018

08001c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7e:	4a04      	ldr	r2, [pc, #16]	; (8001c90 <__NVIC_SetPriorityGrouping+0x44>)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	60d3      	str	r3, [r2, #12]
}
 8001c84:	bf00      	nop
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <__NVIC_GetPriorityGrouping+0x18>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	db0b      	blt.n	8001cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	f003 021f 	and.w	r2, r3, #31
 8001cc8:	4906      	ldr	r1, [pc, #24]	; (8001ce4 <__NVIC_EnableIRQ+0x34>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	e000e100 	.word	0xe000e100

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db0a      	blt.n	8001d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	490c      	ldr	r1, [pc, #48]	; (8001d34 <__NVIC_SetPriority+0x4c>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d10:	e00a      	b.n	8001d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4908      	ldr	r1, [pc, #32]	; (8001d38 <__NVIC_SetPriority+0x50>)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3b04      	subs	r3, #4
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f1c3 0307 	rsb	r3, r3, #7
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf28      	it	cs
 8001d5a:	2304      	movcs	r3, #4
 8001d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3304      	adds	r3, #4
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d902      	bls.n	8001d6c <NVIC_EncodePriority+0x30>
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3b03      	subs	r3, #3
 8001d6a:	e000      	b.n	8001d6e <NVIC_EncodePriority+0x32>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	401a      	ands	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	4313      	orrs	r3, r2
         );
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db0:	d301      	bcc.n	8001db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00f      	b.n	8001dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <SysTick_Config+0x40>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dbe:	210f      	movs	r1, #15
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dc4:	f7ff ff90 	bl	8001ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <SysTick_Config+0x40>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <SysTick_Config+0x40>)
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	e000e010 	.word	0xe000e010

08001de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff2d 	bl	8001c4c <__NVIC_SetPriorityGrouping>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e0c:	f7ff ff42 	bl	8001c94 <__NVIC_GetPriorityGrouping>
 8001e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	6978      	ldr	r0, [r7, #20]
 8001e18:	f7ff ff90 	bl	8001d3c <NVIC_EncodePriority>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e22:	4611      	mov	r1, r2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff5f 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff35 	bl	8001cb0 <__NVIC_EnableIRQ>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ffa2 	bl	8001da0 <SysTick_Config>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b08b      	sub	sp, #44	; 0x2c
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e7a:	e127      	b.n	80020cc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	f040 8116 	bne.w	80020c6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b12      	cmp	r3, #18
 8001ea0:	d034      	beq.n	8001f0c <HAL_GPIO_Init+0xa4>
 8001ea2:	2b12      	cmp	r3, #18
 8001ea4:	d80d      	bhi.n	8001ec2 <HAL_GPIO_Init+0x5a>
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d02b      	beq.n	8001f02 <HAL_GPIO_Init+0x9a>
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d804      	bhi.n	8001eb8 <HAL_GPIO_Init+0x50>
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d031      	beq.n	8001f16 <HAL_GPIO_Init+0xae>
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d01c      	beq.n	8001ef0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eb6:	e048      	b.n	8001f4a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d043      	beq.n	8001f44 <HAL_GPIO_Init+0xdc>
 8001ebc:	2b11      	cmp	r3, #17
 8001ebe:	d01b      	beq.n	8001ef8 <HAL_GPIO_Init+0x90>
          break;
 8001ec0:	e043      	b.n	8001f4a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ec2:	4a89      	ldr	r2, [pc, #548]	; (80020e8 <HAL_GPIO_Init+0x280>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d026      	beq.n	8001f16 <HAL_GPIO_Init+0xae>
 8001ec8:	4a87      	ldr	r2, [pc, #540]	; (80020e8 <HAL_GPIO_Init+0x280>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d806      	bhi.n	8001edc <HAL_GPIO_Init+0x74>
 8001ece:	4a87      	ldr	r2, [pc, #540]	; (80020ec <HAL_GPIO_Init+0x284>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d020      	beq.n	8001f16 <HAL_GPIO_Init+0xae>
 8001ed4:	4a86      	ldr	r2, [pc, #536]	; (80020f0 <HAL_GPIO_Init+0x288>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d01d      	beq.n	8001f16 <HAL_GPIO_Init+0xae>
          break;
 8001eda:	e036      	b.n	8001f4a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001edc:	4a85      	ldr	r2, [pc, #532]	; (80020f4 <HAL_GPIO_Init+0x28c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d019      	beq.n	8001f16 <HAL_GPIO_Init+0xae>
 8001ee2:	4a85      	ldr	r2, [pc, #532]	; (80020f8 <HAL_GPIO_Init+0x290>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d016      	beq.n	8001f16 <HAL_GPIO_Init+0xae>
 8001ee8:	4a84      	ldr	r2, [pc, #528]	; (80020fc <HAL_GPIO_Init+0x294>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_GPIO_Init+0xae>
          break;
 8001eee:	e02c      	b.n	8001f4a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	623b      	str	r3, [r7, #32]
          break;
 8001ef6:	e028      	b.n	8001f4a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	3304      	adds	r3, #4
 8001efe:	623b      	str	r3, [r7, #32]
          break;
 8001f00:	e023      	b.n	8001f4a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	3308      	adds	r3, #8
 8001f08:	623b      	str	r3, [r7, #32]
          break;
 8001f0a:	e01e      	b.n	8001f4a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	330c      	adds	r3, #12
 8001f12:	623b      	str	r3, [r7, #32]
          break;
 8001f14:	e019      	b.n	8001f4a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d102      	bne.n	8001f24 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f1e:	2304      	movs	r3, #4
 8001f20:	623b      	str	r3, [r7, #32]
          break;
 8001f22:	e012      	b.n	8001f4a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d105      	bne.n	8001f38 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	611a      	str	r2, [r3, #16]
          break;
 8001f36:	e008      	b.n	8001f4a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f38:	2308      	movs	r3, #8
 8001f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69fa      	ldr	r2, [r7, #28]
 8001f40:	615a      	str	r2, [r3, #20]
          break;
 8001f42:	e002      	b.n	8001f4a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f44:	2300      	movs	r3, #0
 8001f46:	623b      	str	r3, [r7, #32]
          break;
 8001f48:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2bff      	cmp	r3, #255	; 0xff
 8001f4e:	d801      	bhi.n	8001f54 <HAL_GPIO_Init+0xec>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	e001      	b.n	8001f58 <HAL_GPIO_Init+0xf0>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3304      	adds	r3, #4
 8001f58:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2bff      	cmp	r3, #255	; 0xff
 8001f5e:	d802      	bhi.n	8001f66 <HAL_GPIO_Init+0xfe>
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	e002      	b.n	8001f6c <HAL_GPIO_Init+0x104>
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	3b08      	subs	r3, #8
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	210f      	movs	r1, #15
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	6a39      	ldr	r1, [r7, #32]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	431a      	orrs	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 8096 	beq.w	80020c6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f9a:	4b59      	ldr	r3, [pc, #356]	; (8002100 <HAL_GPIO_Init+0x298>)
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	4a58      	ldr	r2, [pc, #352]	; (8002100 <HAL_GPIO_Init+0x298>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6193      	str	r3, [r2, #24]
 8001fa6:	4b56      	ldr	r3, [pc, #344]	; (8002100 <HAL_GPIO_Init+0x298>)
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fb2:	4a54      	ldr	r2, [pc, #336]	; (8002104 <HAL_GPIO_Init+0x29c>)
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	220f      	movs	r2, #15
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4b      	ldr	r2, [pc, #300]	; (8002108 <HAL_GPIO_Init+0x2a0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_GPIO_Init+0x19e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4a      	ldr	r2, [pc, #296]	; (800210c <HAL_GPIO_Init+0x2a4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00d      	beq.n	8002002 <HAL_GPIO_Init+0x19a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a49      	ldr	r2, [pc, #292]	; (8002110 <HAL_GPIO_Init+0x2a8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d007      	beq.n	8001ffe <HAL_GPIO_Init+0x196>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a48      	ldr	r2, [pc, #288]	; (8002114 <HAL_GPIO_Init+0x2ac>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d101      	bne.n	8001ffa <HAL_GPIO_Init+0x192>
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x1a0>
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	e004      	b.n	8002008 <HAL_GPIO_Init+0x1a0>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e002      	b.n	8002008 <HAL_GPIO_Init+0x1a0>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_GPIO_Init+0x1a0>
 8002006:	2300      	movs	r3, #0
 8002008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200a:	f002 0203 	and.w	r2, r2, #3
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	4093      	lsls	r3, r2
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002018:	493a      	ldr	r1, [pc, #232]	; (8002104 <HAL_GPIO_Init+0x29c>)
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d006      	beq.n	8002040 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002032:	4b39      	ldr	r3, [pc, #228]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4938      	ldr	r1, [pc, #224]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]
 800203e:	e006      	b.n	800204e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002040:	4b35      	ldr	r3, [pc, #212]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	43db      	mvns	r3, r3
 8002048:	4933      	ldr	r1, [pc, #204]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 800204a:	4013      	ands	r3, r2
 800204c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d006      	beq.n	8002068 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800205a:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	492e      	ldr	r1, [pc, #184]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
 8002066:	e006      	b.n	8002076 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002068:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	43db      	mvns	r3, r3
 8002070:	4929      	ldr	r1, [pc, #164]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 8002072:	4013      	ands	r3, r2
 8002074:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d006      	beq.n	8002090 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002082:	4b25      	ldr	r3, [pc, #148]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	4924      	ldr	r1, [pc, #144]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
 800208e:	e006      	b.n	800209e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002090:	4b21      	ldr	r3, [pc, #132]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	43db      	mvns	r3, r3
 8002098:	491f      	ldr	r1, [pc, #124]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 800209a:	4013      	ands	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d006      	beq.n	80020b8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020aa:	4b1b      	ldr	r3, [pc, #108]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	491a      	ldr	r1, [pc, #104]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60cb      	str	r3, [r1, #12]
 80020b6:	e006      	b.n	80020c6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020b8:	4b17      	ldr	r3, [pc, #92]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	43db      	mvns	r3, r3
 80020c0:	4915      	ldr	r1, [pc, #84]	; (8002118 <HAL_GPIO_Init+0x2b0>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	3301      	adds	r3, #1
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	fa22 f303 	lsr.w	r3, r2, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f47f aed0 	bne.w	8001e7c <HAL_GPIO_Init+0x14>
  }
}
 80020dc:	bf00      	nop
 80020de:	372c      	adds	r7, #44	; 0x2c
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	10210000 	.word	0x10210000
 80020ec:	10110000 	.word	0x10110000
 80020f0:	10120000 	.word	0x10120000
 80020f4:	10310000 	.word	0x10310000
 80020f8:	10320000 	.word	0x10320000
 80020fc:	10220000 	.word	0x10220000
 8002100:	40021000 	.word	0x40021000
 8002104:	40010000 	.word	0x40010000
 8002108:	40010800 	.word	0x40010800
 800210c:	40010c00 	.word	0x40010c00
 8002110:	40011000 	.word	0x40011000
 8002114:	40011400 	.word	0x40011400
 8002118:	40010400 	.word	0x40010400

0800211c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
 8002138:	e001      	b.n	800213e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800213a:	2300      	movs	r3, #0
 800213c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	807b      	strh	r3, [r7, #2]
 8002156:	4613      	mov	r3, r2
 8002158:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800215a:	787b      	ldrb	r3, [r7, #1]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002160:	887a      	ldrh	r2, [r7, #2]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002166:	e003      	b.n	8002170 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002168:	887b      	ldrh	r3, [r7, #2]
 800216a:	041a      	lsls	r2, r3, #16
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	611a      	str	r2, [r3, #16]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	887b      	ldrh	r3, [r7, #2]
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002198:	e002      	b.n	80021a0 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800219a:	887a      	ldrh	r2, [r7, #2]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	611a      	str	r2, [r3, #16]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	4013      	ands	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d006      	beq.n	80021d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021c2:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fa3a 	bl	8001644 <HAL_GPIO_EXTI_Callback>
  }
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40010400 	.word	0x40010400

080021dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e10f      	b.n	800240e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff fafc 	bl	8001800 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2224      	movs	r2, #36	; 0x24
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002220:	f000 ffe4 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8002224:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4a7b      	ldr	r2, [pc, #492]	; (8002418 <HAL_I2C_Init+0x23c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d807      	bhi.n	8002240 <HAL_I2C_Init+0x64>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4a7a      	ldr	r2, [pc, #488]	; (800241c <HAL_I2C_Init+0x240>)
 8002234:	4293      	cmp	r3, r2
 8002236:	bf94      	ite	ls
 8002238:	2301      	movls	r3, #1
 800223a:	2300      	movhi	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	e006      	b.n	800224e <HAL_I2C_Init+0x72>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4a77      	ldr	r2, [pc, #476]	; (8002420 <HAL_I2C_Init+0x244>)
 8002244:	4293      	cmp	r3, r2
 8002246:	bf94      	ite	ls
 8002248:	2301      	movls	r3, #1
 800224a:	2300      	movhi	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e0db      	b.n	800240e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4a72      	ldr	r2, [pc, #456]	; (8002424 <HAL_I2C_Init+0x248>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0c9b      	lsrs	r3, r3, #18
 8002260:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	430a      	orrs	r2, r1
 8002274:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4a64      	ldr	r2, [pc, #400]	; (8002418 <HAL_I2C_Init+0x23c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d802      	bhi.n	8002290 <HAL_I2C_Init+0xb4>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	3301      	adds	r3, #1
 800228e:	e009      	b.n	80022a4 <HAL_I2C_Init+0xc8>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	4a63      	ldr	r2, [pc, #396]	; (8002428 <HAL_I2C_Init+0x24c>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	099b      	lsrs	r3, r3, #6
 80022a2:	3301      	adds	r3, #1
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4956      	ldr	r1, [pc, #344]	; (8002418 <HAL_I2C_Init+0x23c>)
 80022c0:	428b      	cmp	r3, r1
 80022c2:	d80d      	bhi.n	80022e0 <HAL_I2C_Init+0x104>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1e59      	subs	r1, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80022d2:	3301      	adds	r3, #1
 80022d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d8:	2b04      	cmp	r3, #4
 80022da:	bf38      	it	cc
 80022dc:	2304      	movcc	r3, #4
 80022de:	e04f      	b.n	8002380 <HAL_I2C_Init+0x1a4>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d111      	bne.n	800230c <HAL_I2C_Init+0x130>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1e58      	subs	r0, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	440b      	add	r3, r1
 80022f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf0c      	ite	eq
 8002304:	2301      	moveq	r3, #1
 8002306:	2300      	movne	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	e012      	b.n	8002332 <HAL_I2C_Init+0x156>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1e58      	subs	r0, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	0099      	lsls	r1, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002322:	3301      	adds	r3, #1
 8002324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf0c      	ite	eq
 800232c:	2301      	moveq	r3, #1
 800232e:	2300      	movne	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_I2C_Init+0x15e>
 8002336:	2301      	movs	r3, #1
 8002338:	e022      	b.n	8002380 <HAL_I2C_Init+0x1a4>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10e      	bne.n	8002360 <HAL_I2C_Init+0x184>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	1e58      	subs	r0, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6859      	ldr	r1, [r3, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	440b      	add	r3, r1
 8002350:	fbb0 f3f3 	udiv	r3, r0, r3
 8002354:	3301      	adds	r3, #1
 8002356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800235e:	e00f      	b.n	8002380 <HAL_I2C_Init+0x1a4>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1e58      	subs	r0, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	0099      	lsls	r1, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	fbb0 f3f3 	udiv	r3, r0, r3
 8002376:	3301      	adds	r3, #1
 8002378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800237c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	6809      	ldr	r1, [r1, #0]
 8002384:	4313      	orrs	r3, r2
 8002386:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69da      	ldr	r2, [r3, #28]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6911      	ldr	r1, [r2, #16]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68d2      	ldr	r2, [r2, #12]
 80023ba:	4311      	orrs	r1, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	430b      	orrs	r3, r1
 80023c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	000186a0 	.word	0x000186a0
 800241c:	001e847f 	.word	0x001e847f
 8002420:	003d08ff 	.word	0x003d08ff
 8002424:	431bde83 	.word	0x431bde83
 8002428:	10624dd3 	.word	0x10624dd3

0800242c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	4608      	mov	r0, r1
 8002436:	4611      	mov	r1, r2
 8002438:	461a      	mov	r2, r3
 800243a:	4603      	mov	r3, r0
 800243c:	817b      	strh	r3, [r7, #10]
 800243e:	460b      	mov	r3, r1
 8002440:	813b      	strh	r3, [r7, #8]
 8002442:	4613      	mov	r3, r2
 8002444:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002446:	f7ff fbd5 	bl	8001bf4 <HAL_GetTick>
 800244a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b20      	cmp	r3, #32
 8002456:	f040 80d9 	bne.w	800260c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	2319      	movs	r3, #25
 8002460:	2201      	movs	r2, #1
 8002462:	496d      	ldr	r1, [pc, #436]	; (8002618 <HAL_I2C_Mem_Write+0x1ec>)
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f965 	bl	8002734 <I2C_WaitOnFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002470:	2302      	movs	r3, #2
 8002472:	e0cc      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_I2C_Mem_Write+0x56>
 800247e:	2302      	movs	r3, #2
 8002480:	e0c5      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b01      	cmp	r3, #1
 8002496:	d007      	beq.n	80024a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2221      	movs	r2, #33	; 0x21
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2240      	movs	r2, #64	; 0x40
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a3a      	ldr	r2, [r7, #32]
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4a4d      	ldr	r2, [pc, #308]	; (800261c <HAL_I2C_Mem_Write+0x1f0>)
 80024e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024ea:	88f8      	ldrh	r0, [r7, #6]
 80024ec:	893a      	ldrh	r2, [r7, #8]
 80024ee:	8979      	ldrh	r1, [r7, #10]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	4603      	mov	r3, r0
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f890 	bl	8002620 <I2C_RequestMemoryWrite>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d052      	beq.n	80025ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e081      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f9e6 	bl	80028e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00d      	beq.n	8002536 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	2b04      	cmp	r3, #4
 8002520:	d107      	bne.n	8002532 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002530:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e06b      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	781a      	ldrb	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b04      	cmp	r3, #4
 8002572:	d11b      	bne.n	80025ac <HAL_I2C_Mem_Write+0x180>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	2b00      	cmp	r3, #0
 800257a:	d017      	beq.n	80025ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1aa      	bne.n	800250a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 f9d2 	bl	8002962 <I2C_WaitOnBTFFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00d      	beq.n	80025e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d107      	bne.n	80025dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e016      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002608:	2300      	movs	r3, #0
 800260a:	e000      	b.n	800260e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800260c:	2302      	movs	r3, #2
  }
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	00100002 	.word	0x00100002
 800261c:	ffff0000 	.word	0xffff0000

08002620 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	461a      	mov	r2, r3
 800262e:	4603      	mov	r3, r0
 8002630:	817b      	strh	r3, [r7, #10]
 8002632:	460b      	mov	r3, r1
 8002634:	813b      	strh	r3, [r7, #8]
 8002636:	4613      	mov	r3, r2
 8002638:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002648:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	2200      	movs	r2, #0
 8002652:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f86c 	bl	8002734 <I2C_WaitOnFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e05f      	b.n	8002726 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002666:	897b      	ldrh	r3, [r7, #10]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002674:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	6a3a      	ldr	r2, [r7, #32]
 800267a:	492d      	ldr	r1, [pc, #180]	; (8002730 <I2C_RequestMemoryWrite+0x110>)
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f8b0 	bl	80027e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e04c      	b.n	8002726 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a4:	6a39      	ldr	r1, [r7, #32]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f91a 	bl	80028e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00d      	beq.n	80026ce <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d107      	bne.n	80026ca <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e02b      	b.n	8002726 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026d4:	893b      	ldrh	r3, [r7, #8]
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	611a      	str	r2, [r3, #16]
 80026de:	e021      	b.n	8002724 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026e0:	893b      	ldrh	r3, [r7, #8]
 80026e2:	0a1b      	lsrs	r3, r3, #8
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f0:	6a39      	ldr	r1, [r7, #32]
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f8f4 	bl	80028e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00d      	beq.n	800271a <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	2b04      	cmp	r3, #4
 8002704:	d107      	bne.n	8002716 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002714:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e005      	b.n	8002726 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800271a:	893b      	ldrh	r3, [r7, #8]
 800271c:	b2da      	uxtb	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	00010002 	.word	0x00010002

08002734 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002744:	e025      	b.n	8002792 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800274c:	d021      	beq.n	8002792 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274e:	f7ff fa51 	bl	8001bf4 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d302      	bcc.n	8002764 <I2C_WaitOnFlagUntilTimeout+0x30>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d116      	bne.n	8002792 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f043 0220 	orr.w	r2, r3, #32
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e023      	b.n	80027da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	0c1b      	lsrs	r3, r3, #16
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d10d      	bne.n	80027b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	43da      	mvns	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4013      	ands	r3, r2
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bf0c      	ite	eq
 80027ae:	2301      	moveq	r3, #1
 80027b0:	2300      	movne	r3, #0
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	e00c      	b.n	80027d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	43da      	mvns	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4013      	ands	r3, r2
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	bf0c      	ite	eq
 80027ca:	2301      	moveq	r3, #1
 80027cc:	2300      	movne	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	461a      	mov	r2, r3
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d0b6      	beq.n	8002746 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027f0:	e051      	b.n	8002896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002800:	d123      	bne.n	800284a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002810:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800281a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f043 0204 	orr.w	r2, r3, #4
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e046      	b.n	80028d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002850:	d021      	beq.n	8002896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002852:	f7ff f9cf 	bl	8001bf4 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	429a      	cmp	r2, r3
 8002860:	d302      	bcc.n	8002868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d116      	bne.n	8002896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f043 0220 	orr.w	r2, r3, #32
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e020      	b.n	80028d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	0c1b      	lsrs	r3, r3, #16
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b01      	cmp	r3, #1
 800289e:	d10c      	bne.n	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	43da      	mvns	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4013      	ands	r3, r2
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	bf14      	ite	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	2300      	moveq	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	e00b      	b.n	80028d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	43da      	mvns	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	4013      	ands	r3, r2
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	bf14      	ite	ne
 80028cc:	2301      	movne	r3, #1
 80028ce:	2300      	moveq	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d18d      	bne.n	80027f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028ec:	e02d      	b.n	800294a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f878 	bl	80029e4 <I2C_IsAcknowledgeFailed>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e02d      	b.n	800295a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002904:	d021      	beq.n	800294a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002906:	f7ff f975 	bl	8001bf4 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	429a      	cmp	r2, r3
 8002914:	d302      	bcc.n	800291c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d116      	bne.n	800294a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f043 0220 	orr.w	r2, r3, #32
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e007      	b.n	800295a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002954:	2b80      	cmp	r3, #128	; 0x80
 8002956:	d1ca      	bne.n	80028ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	60f8      	str	r0, [r7, #12]
 800296a:	60b9      	str	r1, [r7, #8]
 800296c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800296e:	e02d      	b.n	80029cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f837 	bl	80029e4 <I2C_IsAcknowledgeFailed>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e02d      	b.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002986:	d021      	beq.n	80029cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002988:	f7ff f934 	bl	8001bf4 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	429a      	cmp	r2, r3
 8002996:	d302      	bcc.n	800299e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d116      	bne.n	80029cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f043 0220 	orr.w	r2, r3, #32
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e007      	b.n	80029dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d1ca      	bne.n	8002970 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fa:	d11b      	bne.n	8002a34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	f043 0204 	orr.w	r2, r3, #4
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e26c      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 8087 	beq.w	8002b6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a60:	4b92      	ldr	r3, [pc, #584]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d00c      	beq.n	8002a86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a6c:	4b8f      	ldr	r3, [pc, #572]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d112      	bne.n	8002a9e <HAL_RCC_OscConfig+0x5e>
 8002a78:	4b8c      	ldr	r3, [pc, #560]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a84:	d10b      	bne.n	8002a9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a86:	4b89      	ldr	r3, [pc, #548]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d06c      	beq.n	8002b6c <HAL_RCC_OscConfig+0x12c>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d168      	bne.n	8002b6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e246      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x76>
 8002aa8:	4b80      	ldr	r3, [pc, #512]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a7f      	ldr	r2, [pc, #508]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	e02e      	b.n	8002b14 <HAL_RCC_OscConfig+0xd4>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x98>
 8002abe:	4b7b      	ldr	r3, [pc, #492]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a7a      	ldr	r2, [pc, #488]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	4b78      	ldr	r3, [pc, #480]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a77      	ldr	r2, [pc, #476]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e01d      	b.n	8002b14 <HAL_RCC_OscConfig+0xd4>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0xbc>
 8002ae2:	4b72      	ldr	r3, [pc, #456]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a71      	ldr	r2, [pc, #452]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4b6f      	ldr	r3, [pc, #444]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a6e      	ldr	r2, [pc, #440]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e00b      	b.n	8002b14 <HAL_RCC_OscConfig+0xd4>
 8002afc:	4b6b      	ldr	r3, [pc, #428]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a6a      	ldr	r2, [pc, #424]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	4b68      	ldr	r3, [pc, #416]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a67      	ldr	r2, [pc, #412]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d013      	beq.n	8002b44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7ff f86a 	bl	8001bf4 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b24:	f7ff f866 	bl	8001bf4 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b64      	cmp	r3, #100	; 0x64
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e1fa      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b36:	4b5d      	ldr	r3, [pc, #372]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0xe4>
 8002b42:	e014      	b.n	8002b6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7ff f856 	bl	8001bf4 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b4c:	f7ff f852 	bl	8001bf4 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e1e6      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5e:	4b53      	ldr	r3, [pc, #332]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x10c>
 8002b6a:	e000      	b.n	8002b6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d063      	beq.n	8002c42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b7a:	4b4c      	ldr	r3, [pc, #304]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b86:	4b49      	ldr	r3, [pc, #292]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d11c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x18c>
 8002b92:	4b46      	ldr	r3, [pc, #280]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d116      	bne.n	8002bcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	4b43      	ldr	r3, [pc, #268]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x176>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e1ba      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb6:	4b3d      	ldr	r3, [pc, #244]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4939      	ldr	r1, [pc, #228]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bca:	e03a      	b.n	8002c42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d020      	beq.n	8002c16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd4:	4b36      	ldr	r3, [pc, #216]	; (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bda:	f7ff f80b 	bl	8001bf4 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be2:	f7ff f807 	bl	8001bf4 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e19b      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf4:	4b2d      	ldr	r3, [pc, #180]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c00:	4b2a      	ldr	r3, [pc, #168]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4927      	ldr	r1, [pc, #156]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	600b      	str	r3, [r1, #0]
 8002c14:	e015      	b.n	8002c42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c16:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <HAL_RCC_OscConfig+0x270>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1c:	f7fe ffea 	bl	8001bf4 <HAL_GetTick>
 8002c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c24:	f7fe ffe6 	bl	8001bf4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e17a      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c36:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d03a      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d019      	beq.n	8002c8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c56:	4b17      	ldr	r3, [pc, #92]	; (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5c:	f7fe ffca 	bl	8001bf4 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c64:	f7fe ffc6 	bl	8001bf4 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e15a      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c76:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <HAL_RCC_OscConfig+0x26c>)
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c82:	2001      	movs	r0, #1
 8002c84:	f000 fac6 	bl	8003214 <RCC_Delay>
 8002c88:	e01c      	b.n	8002cc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <HAL_RCC_OscConfig+0x274>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c90:	f7fe ffb0 	bl	8001bf4 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c96:	e00f      	b.n	8002cb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c98:	f7fe ffac 	bl	8001bf4 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d908      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e140      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	42420000 	.word	0x42420000
 8002cb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb8:	4b9e      	ldr	r3, [pc, #632]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1e9      	bne.n	8002c98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80a6 	beq.w	8002e1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd6:	4b97      	ldr	r3, [pc, #604]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10d      	bne.n	8002cfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce2:	4b94      	ldr	r3, [pc, #592]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4a93      	ldr	r2, [pc, #588]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cec:	61d3      	str	r3, [r2, #28]
 8002cee:	4b91      	ldr	r3, [pc, #580]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfe:	4b8e      	ldr	r3, [pc, #568]	; (8002f38 <HAL_RCC_OscConfig+0x4f8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d118      	bne.n	8002d3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d0a:	4b8b      	ldr	r3, [pc, #556]	; (8002f38 <HAL_RCC_OscConfig+0x4f8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a8a      	ldr	r2, [pc, #552]	; (8002f38 <HAL_RCC_OscConfig+0x4f8>)
 8002d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d16:	f7fe ff6d 	bl	8001bf4 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1e:	f7fe ff69 	bl	8001bf4 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b64      	cmp	r3, #100	; 0x64
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e0fd      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d30:	4b81      	ldr	r3, [pc, #516]	; (8002f38 <HAL_RCC_OscConfig+0x4f8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d106      	bne.n	8002d52 <HAL_RCC_OscConfig+0x312>
 8002d44:	4b7b      	ldr	r3, [pc, #492]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	4a7a      	ldr	r2, [pc, #488]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6213      	str	r3, [r2, #32]
 8002d50:	e02d      	b.n	8002dae <HAL_RCC_OscConfig+0x36e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x334>
 8002d5a:	4b76      	ldr	r3, [pc, #472]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4a75      	ldr	r2, [pc, #468]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	6213      	str	r3, [r2, #32]
 8002d66:	4b73      	ldr	r3, [pc, #460]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	4a72      	ldr	r2, [pc, #456]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d6c:	f023 0304 	bic.w	r3, r3, #4
 8002d70:	6213      	str	r3, [r2, #32]
 8002d72:	e01c      	b.n	8002dae <HAL_RCC_OscConfig+0x36e>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2b05      	cmp	r3, #5
 8002d7a:	d10c      	bne.n	8002d96 <HAL_RCC_OscConfig+0x356>
 8002d7c:	4b6d      	ldr	r3, [pc, #436]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	4a6c      	ldr	r2, [pc, #432]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d82:	f043 0304 	orr.w	r3, r3, #4
 8002d86:	6213      	str	r3, [r2, #32]
 8002d88:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	4a69      	ldr	r2, [pc, #420]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6213      	str	r3, [r2, #32]
 8002d94:	e00b      	b.n	8002dae <HAL_RCC_OscConfig+0x36e>
 8002d96:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4a66      	ldr	r2, [pc, #408]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002d9c:	f023 0301 	bic.w	r3, r3, #1
 8002da0:	6213      	str	r3, [r2, #32]
 8002da2:	4b64      	ldr	r3, [pc, #400]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	4a63      	ldr	r2, [pc, #396]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002da8:	f023 0304 	bic.w	r3, r3, #4
 8002dac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d015      	beq.n	8002de2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db6:	f7fe ff1d 	bl	8001bf4 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fe ff19 	bl	8001bf4 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e0ab      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd4:	4b57      	ldr	r3, [pc, #348]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ee      	beq.n	8002dbe <HAL_RCC_OscConfig+0x37e>
 8002de0:	e014      	b.n	8002e0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de2:	f7fe ff07 	bl	8001bf4 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de8:	e00a      	b.n	8002e00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7fe ff03 	bl	8001bf4 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e095      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e00:	4b4c      	ldr	r3, [pc, #304]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1ee      	bne.n	8002dea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e0c:	7dfb      	ldrb	r3, [r7, #23]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d105      	bne.n	8002e1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e12:	4b48      	ldr	r3, [pc, #288]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	4a47      	ldr	r2, [pc, #284]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 8081 	beq.w	8002f2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e28:	4b42      	ldr	r3, [pc, #264]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 030c 	and.w	r3, r3, #12
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d061      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d146      	bne.n	8002eca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3c:	4b3f      	ldr	r3, [pc, #252]	; (8002f3c <HAL_RCC_OscConfig+0x4fc>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e42:	f7fe fed7 	bl	8001bf4 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4a:	f7fe fed3 	bl	8001bf4 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e067      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e5c:	4b35      	ldr	r3, [pc, #212]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1f0      	bne.n	8002e4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e70:	d108      	bne.n	8002e84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e72:	4b30      	ldr	r3, [pc, #192]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	492d      	ldr	r1, [pc, #180]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e84:	4b2b      	ldr	r3, [pc, #172]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a19      	ldr	r1, [r3, #32]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	430b      	orrs	r3, r1
 8002e96:	4927      	ldr	r1, [pc, #156]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e9c:	4b27      	ldr	r3, [pc, #156]	; (8002f3c <HAL_RCC_OscConfig+0x4fc>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea2:	f7fe fea7 	bl	8001bf4 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7fe fea3 	bl	8001bf4 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e037      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0f0      	beq.n	8002eaa <HAL_RCC_OscConfig+0x46a>
 8002ec8:	e02f      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eca:	4b1c      	ldr	r3, [pc, #112]	; (8002f3c <HAL_RCC_OscConfig+0x4fc>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fe90 	bl	8001bf4 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe fe8c 	bl	8001bf4 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e020      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eea:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x498>
 8002ef6:	e018      	b.n	8002f2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e013      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_RCC_OscConfig+0x4f4>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d106      	bne.n	8002f26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d001      	beq.n	8002f2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	42420060 	.word	0x42420060

08002f40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0d0      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b6a      	ldr	r3, [pc, #424]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d910      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b67      	ldr	r3, [pc, #412]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 0207 	bic.w	r2, r3, #7
 8002f6a:	4965      	ldr	r1, [pc, #404]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b63      	ldr	r3, [pc, #396]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0b8      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d020      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f9c:	4b59      	ldr	r3, [pc, #356]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a58      	ldr	r2, [pc, #352]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fb4:	4b53      	ldr	r3, [pc, #332]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4a52      	ldr	r2, [pc, #328]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc0:	4b50      	ldr	r3, [pc, #320]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	494d      	ldr	r1, [pc, #308]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d040      	beq.n	8003060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	4b47      	ldr	r3, [pc, #284]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d115      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e07f      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffe:	4b41      	ldr	r3, [pc, #260]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e073      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	4b3d      	ldr	r3, [pc, #244]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e06b      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301e:	4b39      	ldr	r3, [pc, #228]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f023 0203 	bic.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4936      	ldr	r1, [pc, #216]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003030:	f7fe fde0 	bl	8001bf4 <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	e00a      	b.n	800304e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7fe fddc 	bl	8001bf4 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e053      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	4b2d      	ldr	r3, [pc, #180]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 020c 	and.w	r2, r3, #12
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	429a      	cmp	r2, r3
 800305e:	d1eb      	bne.n	8003038 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003060:	4b27      	ldr	r3, [pc, #156]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d210      	bcs.n	8003090 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b24      	ldr	r3, [pc, #144]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 0207 	bic.w	r2, r3, #7
 8003076:	4922      	ldr	r1, [pc, #136]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b20      	ldr	r3, [pc, #128]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e032      	b.n	80030f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800309c:	4b19      	ldr	r3, [pc, #100]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4916      	ldr	r1, [pc, #88]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ba:	4b12      	ldr	r3, [pc, #72]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	490e      	ldr	r1, [pc, #56]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ce:	f000 f821 	bl	8003114 <HAL_RCC_GetSysClockFreq>
 80030d2:	4601      	mov	r1, r0
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	091b      	lsrs	r3, r3, #4
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	5cd3      	ldrb	r3, [r2, r3]
 80030e2:	fa21 f303 	lsr.w	r3, r1, r3
 80030e6:	4a09      	ldr	r2, [pc, #36]	; (800310c <HAL_RCC_ClockConfig+0x1cc>)
 80030e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_RCC_ClockConfig+0x1d0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe fd3e 	bl	8001b70 <HAL_InitTick>

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40022000 	.word	0x40022000
 8003104:	40021000 	.word	0x40021000
 8003108:	08005720 	.word	0x08005720
 800310c:	20000010 	.word	0x20000010
 8003110:	20000014 	.word	0x20000014

08003114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003114:	b490      	push	{r4, r7}
 8003116:	b08a      	sub	sp, #40	; 0x28
 8003118:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800311a:	4b2a      	ldr	r3, [pc, #168]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800311c:	1d3c      	adds	r4, r7, #4
 800311e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003120:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003124:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	2300      	movs	r3, #0
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800313a:	2300      	movs	r3, #0
 800313c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800313e:	4b23      	ldr	r3, [pc, #140]	; (80031cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b04      	cmp	r3, #4
 800314c:	d002      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x40>
 800314e:	2b08      	cmp	r3, #8
 8003150:	d003      	beq.n	800315a <HAL_RCC_GetSysClockFreq+0x46>
 8003152:	e02d      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003154:	4b1e      	ldr	r3, [pc, #120]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003156:	623b      	str	r3, [r7, #32]
      break;
 8003158:	e02d      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	0c9b      	lsrs	r3, r3, #18
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003166:	4413      	add	r3, r2
 8003168:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800316c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d013      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003178:	4b14      	ldr	r3, [pc, #80]	; (80031cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	0c5b      	lsrs	r3, r3, #17
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003186:	4413      	add	r3, r2
 8003188:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800318c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	4a0f      	ldr	r2, [pc, #60]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003192:	fb02 f203 	mul.w	r2, r2, r3
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
 800319e:	e004      	b.n	80031aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	4a0c      	ldr	r2, [pc, #48]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031a4:	fb02 f303 	mul.w	r3, r2, r3
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	623b      	str	r3, [r7, #32]
      break;
 80031ae:	e002      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031b0:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031b2:	623b      	str	r3, [r7, #32]
      break;
 80031b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b6:	6a3b      	ldr	r3, [r7, #32]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3728      	adds	r7, #40	; 0x28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc90      	pop	{r4, r7}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	08004834 	.word	0x08004834
 80031c8:	08004844 	.word	0x08004844
 80031cc:	40021000 	.word	0x40021000
 80031d0:	007a1200 	.word	0x007a1200
 80031d4:	003d0900 	.word	0x003d0900

080031d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031dc:	4b02      	ldr	r3, [pc, #8]	; (80031e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80031de:	681b      	ldr	r3, [r3, #0]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	20000010 	.word	0x20000010

080031ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031f0:	f7ff fff2 	bl	80031d8 <HAL_RCC_GetHCLKFreq>
 80031f4:	4601      	mov	r1, r0
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_RCC_GetPCLK1Freq+0x20>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	0a1b      	lsrs	r3, r3, #8
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	4a03      	ldr	r2, [pc, #12]	; (8003210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003202:	5cd3      	ldrb	r3, [r2, r3]
 8003204:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000
 8003210:	08005730 	.word	0x08005730

08003214 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <RCC_Delay+0x34>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a0a      	ldr	r2, [pc, #40]	; (800324c <RCC_Delay+0x38>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	0a5b      	lsrs	r3, r3, #9
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	fb02 f303 	mul.w	r3, r2, r3
 800322e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003230:	bf00      	nop
  }
  while (Delay --);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1e5a      	subs	r2, r3, #1
 8003236:	60fa      	str	r2, [r7, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1f9      	bne.n	8003230 <RCC_Delay+0x1c>
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20000010 	.word	0x20000010
 800324c:	10624dd3 	.word	0x10624dd3

08003250 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e053      	b.n	800330a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d106      	bne.n	8003282 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7fe fafd 	bl	800187c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2202      	movs	r2, #2
 8003286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003298:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	ea42 0103 	orr.w	r1, r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	0c1a      	lsrs	r2, r3, #16
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f002 0204 	and.w	r2, r2, #4
 80032e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69da      	ldr	r2, [r3, #28]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b088      	sub	sp, #32
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	4613      	mov	r3, r2
 8003320:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_SPI_Transmit+0x22>
 8003330:	2302      	movs	r3, #2
 8003332:	e11e      	b.n	8003572 <HAL_SPI_Transmit+0x260>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800333c:	f7fe fc5a 	bl	8001bf4 <HAL_GetTick>
 8003340:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b01      	cmp	r3, #1
 8003350:	d002      	beq.n	8003358 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003352:	2302      	movs	r3, #2
 8003354:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003356:	e103      	b.n	8003560 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_SPI_Transmit+0x52>
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d102      	bne.n	800336a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003368:	e0fa      	b.n	8003560 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2203      	movs	r2, #3
 800336e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	88fa      	ldrh	r2, [r7, #6]
 8003382:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	88fa      	ldrh	r2, [r7, #6]
 8003388:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b0:	d107      	bne.n	80033c2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033cc:	2b40      	cmp	r3, #64	; 0x40
 80033ce:	d007      	beq.n	80033e0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e8:	d14b      	bne.n	8003482 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_SPI_Transmit+0xe6>
 80033f2:	8afb      	ldrh	r3, [r7, #22]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d13e      	bne.n	8003476 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	881a      	ldrh	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	1c9a      	adds	r2, r3, #2
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003412:	b29b      	uxth	r3, r3
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800341c:	e02b      	b.n	8003476 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b02      	cmp	r3, #2
 800342a:	d112      	bne.n	8003452 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	881a      	ldrh	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	1c9a      	adds	r2, r3, #2
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003450:	e011      	b.n	8003476 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003452:	f7fe fbcf 	bl	8001bf4 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d803      	bhi.n	800346a <HAL_SPI_Transmit+0x158>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003468:	d102      	bne.n	8003470 <HAL_SPI_Transmit+0x15e>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d102      	bne.n	8003476 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003474:	e074      	b.n	8003560 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1ce      	bne.n	800341e <HAL_SPI_Transmit+0x10c>
 8003480:	e04c      	b.n	800351c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_SPI_Transmit+0x17e>
 800348a:	8afb      	ldrh	r3, [r7, #22]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d140      	bne.n	8003512 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	330c      	adds	r3, #12
 800349a:	7812      	ldrb	r2, [r2, #0]
 800349c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80034b6:	e02c      	b.n	8003512 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d113      	bne.n	80034ee <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	330c      	adds	r3, #12
 80034d0:	7812      	ldrb	r2, [r2, #0]
 80034d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80034ec:	e011      	b.n	8003512 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034ee:	f7fe fb81 	bl	8001bf4 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d803      	bhi.n	8003506 <HAL_SPI_Transmit+0x1f4>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003504:	d102      	bne.n	800350c <HAL_SPI_Transmit+0x1fa>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003510:	e026      	b.n	8003560 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003516:	b29b      	uxth	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1cd      	bne.n	80034b8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	6839      	ldr	r1, [r7, #0]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f894 	bl	800364e <SPI_EndRxTxTransaction>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10a      	bne.n	8003550 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	613b      	str	r3, [r7, #16]
 800354e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e000      	b.n	8003560 <HAL_SPI_Transmit+0x24e>
  }

error:
 800355e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003570:	7ffb      	ldrb	r3, [r7, #31]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	603b      	str	r3, [r7, #0]
 8003586:	4613      	mov	r3, r2
 8003588:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800358a:	e04c      	b.n	8003626 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003592:	d048      	beq.n	8003626 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003594:	f7fe fb2e 	bl	8001bf4 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d902      	bls.n	80035aa <SPI_WaitFlagStateUntilTimeout+0x30>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d13d      	bne.n	8003626 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035c2:	d111      	bne.n	80035e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035cc:	d004      	beq.n	80035d8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d6:	d107      	bne.n	80035e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f0:	d10f      	bne.n	8003612 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003610:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e00f      	b.n	8003646 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4013      	ands	r3, r2
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	429a      	cmp	r2, r3
 8003634:	bf0c      	ite	eq
 8003636:	2301      	moveq	r3, #1
 8003638:	2300      	movne	r3, #0
 800363a:	b2db      	uxtb	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	429a      	cmp	r2, r3
 8003642:	d1a3      	bne.n	800358c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af02      	add	r7, sp, #8
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2200      	movs	r2, #0
 8003662:	2180      	movs	r1, #128	; 0x80
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f7ff ff88 	bl	800357a <SPI_WaitFlagStateUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d007      	beq.n	8003680 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e000      	b.n	8003682 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e01d      	b.n	80036d8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d106      	bne.n	80036b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7fe f961 	bl	8001978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2202      	movs	r2, #2
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	3304      	adds	r3, #4
 80036c6:	4619      	mov	r1, r3
 80036c8:	4610      	mov	r0, r2
 80036ca:	f000 fad5 	bl	8003c78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b06      	cmp	r3, #6
 8003708:	d007      	beq.n	800371a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 0201 	orr.w	r2, r2, #1
 8003718:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr

08003726 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b086      	sub	sp, #24
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e07f      	b.n	800383a <HAL_TIM_Encoder_Init+0x114>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fe f8d2 	bl	80018f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6812      	ldr	r2, [r2, #0]
 8003766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800376a:	f023 0307 	bic.w	r3, r3, #7
 800376e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3304      	adds	r3, #4
 8003778:	4619      	mov	r1, r3
 800377a:	4610      	mov	r0, r2
 800377c:	f000 fa7c 	bl	8003c78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a8:	f023 0303 	bic.w	r3, r3, #3
 80037ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	021b      	lsls	r3, r3, #8
 80037b8:	4313      	orrs	r3, r2
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80037c6:	f023 030c 	bic.w	r3, r3, #12
 80037ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	021b      	lsls	r3, r3, #8
 80037e2:	4313      	orrs	r3, r2
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	011a      	lsls	r2, r3, #4
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	031b      	lsls	r3, r3, #12
 80037f6:	4313      	orrs	r3, r2
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003804:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	4313      	orrs	r3, r2
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4313      	orrs	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_TIM_Encoder_Start+0x16>
 8003852:	2b04      	cmp	r3, #4
 8003854:	d008      	beq.n	8003868 <HAL_TIM_Encoder_Start+0x26>
 8003856:	e00f      	b.n	8003878 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2201      	movs	r2, #1
 800385e:	2100      	movs	r1, #0
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fb01 	bl	8003e68 <TIM_CCxChannelCmd>
      break;
 8003866:	e016      	b.n	8003896 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2201      	movs	r2, #1
 800386e:	2104      	movs	r1, #4
 8003870:	4618      	mov	r0, r3
 8003872:	f000 faf9 	bl	8003e68 <TIM_CCxChannelCmd>
      break;
 8003876:	e00e      	b.n	8003896 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2201      	movs	r2, #1
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f000 faf1 	bl	8003e68 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2201      	movs	r2, #1
 800388c:	2104      	movs	r1, #4
 800388e:	4618      	mov	r0, r3
 8003890:	f000 faea 	bl	8003e68 <TIM_CCxChannelCmd>
      break;
 8003894:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0201 	orr.w	r2, r2, #1
 80038a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d122      	bne.n	800390c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d11b      	bne.n	800390c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0202 	mvn.w	r2, #2
 80038dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f9a4 	bl	8003c40 <HAL_TIM_IC_CaptureCallback>
 80038f8:	e005      	b.n	8003906 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f997 	bl	8003c2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f9a6 	bl	8003c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f003 0304 	and.w	r3, r3, #4
 8003916:	2b04      	cmp	r3, #4
 8003918:	d122      	bne.n	8003960 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b04      	cmp	r3, #4
 8003926:	d11b      	bne.n	8003960 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f06f 0204 	mvn.w	r2, #4
 8003930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2202      	movs	r2, #2
 8003936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f97a 	bl	8003c40 <HAL_TIM_IC_CaptureCallback>
 800394c:	e005      	b.n	800395a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f96d 	bl	8003c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f97c 	bl	8003c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b08      	cmp	r3, #8
 800396c:	d122      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b08      	cmp	r3, #8
 800397a:	d11b      	bne.n	80039b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0208 	mvn.w	r2, #8
 8003984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2204      	movs	r2, #4
 800398a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f950 	bl	8003c40 <HAL_TIM_IC_CaptureCallback>
 80039a0:	e005      	b.n	80039ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f943 	bl	8003c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f952 	bl	8003c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	f003 0310 	and.w	r3, r3, #16
 80039be:	2b10      	cmp	r3, #16
 80039c0:	d122      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f003 0310 	and.w	r3, r3, #16
 80039cc:	2b10      	cmp	r3, #16
 80039ce:	d11b      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f06f 0210 	mvn.w	r2, #16
 80039d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2208      	movs	r2, #8
 80039de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f926 	bl	8003c40 <HAL_TIM_IC_CaptureCallback>
 80039f4:	e005      	b.n	8003a02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f919 	bl	8003c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f928 	bl	8003c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d10e      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d107      	bne.n	8003a34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0201 	mvn.w	r2, #1
 8003a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fd fdf0 	bl	8001614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3e:	2b80      	cmp	r3, #128	; 0x80
 8003a40:	d10e      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4c:	2b80      	cmp	r3, #128	; 0x80
 8003a4e:	d107      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 fa75 	bl	8003f4a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a6a:	2b40      	cmp	r3, #64	; 0x40
 8003a6c:	d10e      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a78:	2b40      	cmp	r3, #64	; 0x40
 8003a7a:	d107      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8ec 	bl	8003c64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0320 	and.w	r3, r3, #32
 8003a96:	2b20      	cmp	r3, #32
 8003a98:	d10e      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d107      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0220 	mvn.w	r2, #32
 8003ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa40 	bl	8003f38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_TIM_ConfigClockSource+0x18>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e0a6      	b.n	8003c26 <HAL_TIM_ConfigClockSource+0x166>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003af6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003afe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b40      	cmp	r3, #64	; 0x40
 8003b0e:	d067      	beq.n	8003be0 <HAL_TIM_ConfigClockSource+0x120>
 8003b10:	2b40      	cmp	r3, #64	; 0x40
 8003b12:	d80b      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x6c>
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d073      	beq.n	8003c00 <HAL_TIM_ConfigClockSource+0x140>
 8003b18:	2b10      	cmp	r3, #16
 8003b1a:	d802      	bhi.n	8003b22 <HAL_TIM_ConfigClockSource+0x62>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d06f      	beq.n	8003c00 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003b20:	e078      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d06c      	beq.n	8003c00 <HAL_TIM_ConfigClockSource+0x140>
 8003b26:	2b30      	cmp	r3, #48	; 0x30
 8003b28:	d06a      	beq.n	8003c00 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003b2a:	e073      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b2c:	2b70      	cmp	r3, #112	; 0x70
 8003b2e:	d00d      	beq.n	8003b4c <HAL_TIM_ConfigClockSource+0x8c>
 8003b30:	2b70      	cmp	r3, #112	; 0x70
 8003b32:	d804      	bhi.n	8003b3e <HAL_TIM_ConfigClockSource+0x7e>
 8003b34:	2b50      	cmp	r3, #80	; 0x50
 8003b36:	d033      	beq.n	8003ba0 <HAL_TIM_ConfigClockSource+0xe0>
 8003b38:	2b60      	cmp	r3, #96	; 0x60
 8003b3a:	d041      	beq.n	8003bc0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003b3c:	e06a      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b42:	d066      	beq.n	8003c12 <HAL_TIM_ConfigClockSource+0x152>
 8003b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b48:	d017      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003b4a:	e063      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	6899      	ldr	r1, [r3, #8]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f000 f965 	bl	8003e2a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b6e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	609a      	str	r2, [r3, #8]
      break;
 8003b78:	e04c      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6899      	ldr	r1, [r3, #8]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685a      	ldr	r2, [r3, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f000 f94e 	bl	8003e2a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b9c:	609a      	str	r2, [r3, #8]
      break;
 8003b9e:	e039      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	6859      	ldr	r1, [r3, #4]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	461a      	mov	r2, r3
 8003bae:	f000 f8c5 	bl	8003d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2150      	movs	r1, #80	; 0x50
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 f91c 	bl	8003df6 <TIM_ITRx_SetConfig>
      break;
 8003bbe:	e029      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f000 f8e3 	bl	8003d98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2160      	movs	r1, #96	; 0x60
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 f90c 	bl	8003df6 <TIM_ITRx_SetConfig>
      break;
 8003bde:	e019      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6818      	ldr	r0, [r3, #0]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	461a      	mov	r2, r3
 8003bee:	f000 f8a5 	bl	8003d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2140      	movs	r1, #64	; 0x40
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 f8fc 	bl	8003df6 <TIM_ITRx_SetConfig>
      break;
 8003bfe:	e009      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	f000 f8f3 	bl	8003df6 <TIM_ITRx_SetConfig>
      break;
 8003c10:	e000      	b.n	8003c14 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr

08003c40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr

08003c52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr

08003c64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr
	...

08003c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a29      	ldr	r2, [pc, #164]	; (8003d30 <TIM_Base_SetConfig+0xb8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00b      	beq.n	8003ca8 <TIM_Base_SetConfig+0x30>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c96:	d007      	beq.n	8003ca8 <TIM_Base_SetConfig+0x30>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a26      	ldr	r2, [pc, #152]	; (8003d34 <TIM_Base_SetConfig+0xbc>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d003      	beq.n	8003ca8 <TIM_Base_SetConfig+0x30>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a25      	ldr	r2, [pc, #148]	; (8003d38 <TIM_Base_SetConfig+0xc0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d108      	bne.n	8003cba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <TIM_Base_SetConfig+0xb8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00b      	beq.n	8003cda <TIM_Base_SetConfig+0x62>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc8:	d007      	beq.n	8003cda <TIM_Base_SetConfig+0x62>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a19      	ldr	r2, [pc, #100]	; (8003d34 <TIM_Base_SetConfig+0xbc>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d003      	beq.n	8003cda <TIM_Base_SetConfig+0x62>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a18      	ldr	r2, [pc, #96]	; (8003d38 <TIM_Base_SetConfig+0xc0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d108      	bne.n	8003cec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a07      	ldr	r2, [pc, #28]	; (8003d30 <TIM_Base_SetConfig+0xb8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d103      	bne.n	8003d20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	615a      	str	r2, [r3, #20]
}
 8003d26:	bf00      	nop
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr
 8003d30:	40012c00 	.word	0x40012c00
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800

08003d3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	f023 0201 	bic.w	r2, r3, #1
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f023 030a 	bic.w	r3, r3, #10
 8003d78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	621a      	str	r2, [r3, #32]
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f023 0210 	bic.w	r2, r3, #16
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	031b      	lsls	r3, r3, #12
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	011b      	lsls	r3, r3, #4
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	621a      	str	r2, [r3, #32]
}
 8003dec:	bf00      	nop
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bc80      	pop	{r7}
 8003df4:	4770      	bx	lr

08003df6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b085      	sub	sp, #20
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f043 0307 	orr.w	r3, r3, #7
 8003e18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	609a      	str	r2, [r3, #8]
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr

08003e2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b087      	sub	sp, #28
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
 8003e36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	021a      	lsls	r2, r3, #8
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	609a      	str	r2, [r3, #8]
}
 8003e5e:	bf00      	nop
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f003 031f 	and.w	r3, r3, #31
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a1a      	ldr	r2, [r3, #32]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a1a      	ldr	r2, [r3, #32]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	621a      	str	r2, [r3, #32]
}
 8003ea6:	bf00      	nop
 8003ea8:	371c      	adds	r7, #28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bc80      	pop	{r7}
 8003eae:	4770      	bx	lr

08003eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e032      	b.n	8003f2e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f00:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr

08003f5c <__errno>:
 8003f5c:	4b01      	ldr	r3, [pc, #4]	; (8003f64 <__errno+0x8>)
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	2000001c 	.word	0x2000001c

08003f68 <__libc_init_array>:
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	2500      	movs	r5, #0
 8003f6c:	4e0c      	ldr	r6, [pc, #48]	; (8003fa0 <__libc_init_array+0x38>)
 8003f6e:	4c0d      	ldr	r4, [pc, #52]	; (8003fa4 <__libc_init_array+0x3c>)
 8003f70:	1ba4      	subs	r4, r4, r6
 8003f72:	10a4      	asrs	r4, r4, #2
 8003f74:	42a5      	cmp	r5, r4
 8003f76:	d109      	bne.n	8003f8c <__libc_init_array+0x24>
 8003f78:	f000 fc34 	bl	80047e4 <_init>
 8003f7c:	2500      	movs	r5, #0
 8003f7e:	4e0a      	ldr	r6, [pc, #40]	; (8003fa8 <__libc_init_array+0x40>)
 8003f80:	4c0a      	ldr	r4, [pc, #40]	; (8003fac <__libc_init_array+0x44>)
 8003f82:	1ba4      	subs	r4, r4, r6
 8003f84:	10a4      	asrs	r4, r4, #2
 8003f86:	42a5      	cmp	r5, r4
 8003f88:	d105      	bne.n	8003f96 <__libc_init_array+0x2e>
 8003f8a:	bd70      	pop	{r4, r5, r6, pc}
 8003f8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f90:	4798      	blx	r3
 8003f92:	3501      	adds	r5, #1
 8003f94:	e7ee      	b.n	8003f74 <__libc_init_array+0xc>
 8003f96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f9a:	4798      	blx	r3
 8003f9c:	3501      	adds	r5, #1
 8003f9e:	e7f2      	b.n	8003f86 <__libc_init_array+0x1e>
 8003fa0:	0800576c 	.word	0x0800576c
 8003fa4:	0800576c 	.word	0x0800576c
 8003fa8:	0800576c 	.word	0x0800576c
 8003fac:	08005770 	.word	0x08005770

08003fb0 <memset>:
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	4402      	add	r2, r0
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d100      	bne.n	8003fba <memset+0xa>
 8003fb8:	4770      	bx	lr
 8003fba:	f803 1b01 	strb.w	r1, [r3], #1
 8003fbe:	e7f9      	b.n	8003fb4 <memset+0x4>

08003fc0 <siprintf>:
 8003fc0:	b40e      	push	{r1, r2, r3}
 8003fc2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fc6:	b500      	push	{lr}
 8003fc8:	b09c      	sub	sp, #112	; 0x70
 8003fca:	ab1d      	add	r3, sp, #116	; 0x74
 8003fcc:	9002      	str	r0, [sp, #8]
 8003fce:	9006      	str	r0, [sp, #24]
 8003fd0:	9107      	str	r1, [sp, #28]
 8003fd2:	9104      	str	r1, [sp, #16]
 8003fd4:	4808      	ldr	r0, [pc, #32]	; (8003ff8 <siprintf+0x38>)
 8003fd6:	4909      	ldr	r1, [pc, #36]	; (8003ffc <siprintf+0x3c>)
 8003fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fdc:	9105      	str	r1, [sp, #20]
 8003fde:	6800      	ldr	r0, [r0, #0]
 8003fe0:	a902      	add	r1, sp, #8
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	f000 f866 	bl	80040b4 <_svfiprintf_r>
 8003fe8:	2200      	movs	r2, #0
 8003fea:	9b02      	ldr	r3, [sp, #8]
 8003fec:	701a      	strb	r2, [r3, #0]
 8003fee:	b01c      	add	sp, #112	; 0x70
 8003ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ff4:	b003      	add	sp, #12
 8003ff6:	4770      	bx	lr
 8003ff8:	2000001c 	.word	0x2000001c
 8003ffc:	ffff0208 	.word	0xffff0208

08004000 <__ssputs_r>:
 8004000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004004:	688e      	ldr	r6, [r1, #8]
 8004006:	4682      	mov	sl, r0
 8004008:	429e      	cmp	r6, r3
 800400a:	460c      	mov	r4, r1
 800400c:	4690      	mov	r8, r2
 800400e:	4699      	mov	r9, r3
 8004010:	d837      	bhi.n	8004082 <__ssputs_r+0x82>
 8004012:	898a      	ldrh	r2, [r1, #12]
 8004014:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004018:	d031      	beq.n	800407e <__ssputs_r+0x7e>
 800401a:	2302      	movs	r3, #2
 800401c:	6825      	ldr	r5, [r4, #0]
 800401e:	6909      	ldr	r1, [r1, #16]
 8004020:	1a6f      	subs	r7, r5, r1
 8004022:	6965      	ldr	r5, [r4, #20]
 8004024:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004028:	fb95 f5f3 	sdiv	r5, r5, r3
 800402c:	f109 0301 	add.w	r3, r9, #1
 8004030:	443b      	add	r3, r7
 8004032:	429d      	cmp	r5, r3
 8004034:	bf38      	it	cc
 8004036:	461d      	movcc	r5, r3
 8004038:	0553      	lsls	r3, r2, #21
 800403a:	d530      	bpl.n	800409e <__ssputs_r+0x9e>
 800403c:	4629      	mov	r1, r5
 800403e:	f000 fb37 	bl	80046b0 <_malloc_r>
 8004042:	4606      	mov	r6, r0
 8004044:	b950      	cbnz	r0, 800405c <__ssputs_r+0x5c>
 8004046:	230c      	movs	r3, #12
 8004048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800404c:	f8ca 3000 	str.w	r3, [sl]
 8004050:	89a3      	ldrh	r3, [r4, #12]
 8004052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004056:	81a3      	strh	r3, [r4, #12]
 8004058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800405c:	463a      	mov	r2, r7
 800405e:	6921      	ldr	r1, [r4, #16]
 8004060:	f000 fab6 	bl	80045d0 <memcpy>
 8004064:	89a3      	ldrh	r3, [r4, #12]
 8004066:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800406a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800406e:	81a3      	strh	r3, [r4, #12]
 8004070:	6126      	str	r6, [r4, #16]
 8004072:	443e      	add	r6, r7
 8004074:	6026      	str	r6, [r4, #0]
 8004076:	464e      	mov	r6, r9
 8004078:	6165      	str	r5, [r4, #20]
 800407a:	1bed      	subs	r5, r5, r7
 800407c:	60a5      	str	r5, [r4, #8]
 800407e:	454e      	cmp	r6, r9
 8004080:	d900      	bls.n	8004084 <__ssputs_r+0x84>
 8004082:	464e      	mov	r6, r9
 8004084:	4632      	mov	r2, r6
 8004086:	4641      	mov	r1, r8
 8004088:	6820      	ldr	r0, [r4, #0]
 800408a:	f000 faac 	bl	80045e6 <memmove>
 800408e:	68a3      	ldr	r3, [r4, #8]
 8004090:	2000      	movs	r0, #0
 8004092:	1b9b      	subs	r3, r3, r6
 8004094:	60a3      	str	r3, [r4, #8]
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	441e      	add	r6, r3
 800409a:	6026      	str	r6, [r4, #0]
 800409c:	e7dc      	b.n	8004058 <__ssputs_r+0x58>
 800409e:	462a      	mov	r2, r5
 80040a0:	f000 fb60 	bl	8004764 <_realloc_r>
 80040a4:	4606      	mov	r6, r0
 80040a6:	2800      	cmp	r0, #0
 80040a8:	d1e2      	bne.n	8004070 <__ssputs_r+0x70>
 80040aa:	6921      	ldr	r1, [r4, #16]
 80040ac:	4650      	mov	r0, sl
 80040ae:	f000 fab3 	bl	8004618 <_free_r>
 80040b2:	e7c8      	b.n	8004046 <__ssputs_r+0x46>

080040b4 <_svfiprintf_r>:
 80040b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b8:	461d      	mov	r5, r3
 80040ba:	898b      	ldrh	r3, [r1, #12]
 80040bc:	b09d      	sub	sp, #116	; 0x74
 80040be:	061f      	lsls	r7, r3, #24
 80040c0:	4680      	mov	r8, r0
 80040c2:	460c      	mov	r4, r1
 80040c4:	4616      	mov	r6, r2
 80040c6:	d50f      	bpl.n	80040e8 <_svfiprintf_r+0x34>
 80040c8:	690b      	ldr	r3, [r1, #16]
 80040ca:	b96b      	cbnz	r3, 80040e8 <_svfiprintf_r+0x34>
 80040cc:	2140      	movs	r1, #64	; 0x40
 80040ce:	f000 faef 	bl	80046b0 <_malloc_r>
 80040d2:	6020      	str	r0, [r4, #0]
 80040d4:	6120      	str	r0, [r4, #16]
 80040d6:	b928      	cbnz	r0, 80040e4 <_svfiprintf_r+0x30>
 80040d8:	230c      	movs	r3, #12
 80040da:	f8c8 3000 	str.w	r3, [r8]
 80040de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040e2:	e0c8      	b.n	8004276 <_svfiprintf_r+0x1c2>
 80040e4:	2340      	movs	r3, #64	; 0x40
 80040e6:	6163      	str	r3, [r4, #20]
 80040e8:	2300      	movs	r3, #0
 80040ea:	9309      	str	r3, [sp, #36]	; 0x24
 80040ec:	2320      	movs	r3, #32
 80040ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040f2:	2330      	movs	r3, #48	; 0x30
 80040f4:	f04f 0b01 	mov.w	fp, #1
 80040f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040fc:	9503      	str	r5, [sp, #12]
 80040fe:	4637      	mov	r7, r6
 8004100:	463d      	mov	r5, r7
 8004102:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004106:	b10b      	cbz	r3, 800410c <_svfiprintf_r+0x58>
 8004108:	2b25      	cmp	r3, #37	; 0x25
 800410a:	d13e      	bne.n	800418a <_svfiprintf_r+0xd6>
 800410c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004110:	d00b      	beq.n	800412a <_svfiprintf_r+0x76>
 8004112:	4653      	mov	r3, sl
 8004114:	4632      	mov	r2, r6
 8004116:	4621      	mov	r1, r4
 8004118:	4640      	mov	r0, r8
 800411a:	f7ff ff71 	bl	8004000 <__ssputs_r>
 800411e:	3001      	adds	r0, #1
 8004120:	f000 80a4 	beq.w	800426c <_svfiprintf_r+0x1b8>
 8004124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004126:	4453      	add	r3, sl
 8004128:	9309      	str	r3, [sp, #36]	; 0x24
 800412a:	783b      	ldrb	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 809d 	beq.w	800426c <_svfiprintf_r+0x1b8>
 8004132:	2300      	movs	r3, #0
 8004134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800413c:	9304      	str	r3, [sp, #16]
 800413e:	9307      	str	r3, [sp, #28]
 8004140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004144:	931a      	str	r3, [sp, #104]	; 0x68
 8004146:	462f      	mov	r7, r5
 8004148:	2205      	movs	r2, #5
 800414a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800414e:	4850      	ldr	r0, [pc, #320]	; (8004290 <_svfiprintf_r+0x1dc>)
 8004150:	f000 fa30 	bl	80045b4 <memchr>
 8004154:	9b04      	ldr	r3, [sp, #16]
 8004156:	b9d0      	cbnz	r0, 800418e <_svfiprintf_r+0xda>
 8004158:	06d9      	lsls	r1, r3, #27
 800415a:	bf44      	itt	mi
 800415c:	2220      	movmi	r2, #32
 800415e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004162:	071a      	lsls	r2, r3, #28
 8004164:	bf44      	itt	mi
 8004166:	222b      	movmi	r2, #43	; 0x2b
 8004168:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800416c:	782a      	ldrb	r2, [r5, #0]
 800416e:	2a2a      	cmp	r2, #42	; 0x2a
 8004170:	d015      	beq.n	800419e <_svfiprintf_r+0xea>
 8004172:	462f      	mov	r7, r5
 8004174:	2000      	movs	r0, #0
 8004176:	250a      	movs	r5, #10
 8004178:	9a07      	ldr	r2, [sp, #28]
 800417a:	4639      	mov	r1, r7
 800417c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004180:	3b30      	subs	r3, #48	; 0x30
 8004182:	2b09      	cmp	r3, #9
 8004184:	d94d      	bls.n	8004222 <_svfiprintf_r+0x16e>
 8004186:	b1b8      	cbz	r0, 80041b8 <_svfiprintf_r+0x104>
 8004188:	e00f      	b.n	80041aa <_svfiprintf_r+0xf6>
 800418a:	462f      	mov	r7, r5
 800418c:	e7b8      	b.n	8004100 <_svfiprintf_r+0x4c>
 800418e:	4a40      	ldr	r2, [pc, #256]	; (8004290 <_svfiprintf_r+0x1dc>)
 8004190:	463d      	mov	r5, r7
 8004192:	1a80      	subs	r0, r0, r2
 8004194:	fa0b f000 	lsl.w	r0, fp, r0
 8004198:	4318      	orrs	r0, r3
 800419a:	9004      	str	r0, [sp, #16]
 800419c:	e7d3      	b.n	8004146 <_svfiprintf_r+0x92>
 800419e:	9a03      	ldr	r2, [sp, #12]
 80041a0:	1d11      	adds	r1, r2, #4
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	9103      	str	r1, [sp, #12]
 80041a6:	2a00      	cmp	r2, #0
 80041a8:	db01      	blt.n	80041ae <_svfiprintf_r+0xfa>
 80041aa:	9207      	str	r2, [sp, #28]
 80041ac:	e004      	b.n	80041b8 <_svfiprintf_r+0x104>
 80041ae:	4252      	negs	r2, r2
 80041b0:	f043 0302 	orr.w	r3, r3, #2
 80041b4:	9207      	str	r2, [sp, #28]
 80041b6:	9304      	str	r3, [sp, #16]
 80041b8:	783b      	ldrb	r3, [r7, #0]
 80041ba:	2b2e      	cmp	r3, #46	; 0x2e
 80041bc:	d10c      	bne.n	80041d8 <_svfiprintf_r+0x124>
 80041be:	787b      	ldrb	r3, [r7, #1]
 80041c0:	2b2a      	cmp	r3, #42	; 0x2a
 80041c2:	d133      	bne.n	800422c <_svfiprintf_r+0x178>
 80041c4:	9b03      	ldr	r3, [sp, #12]
 80041c6:	3702      	adds	r7, #2
 80041c8:	1d1a      	adds	r2, r3, #4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	9203      	str	r2, [sp, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bfb8      	it	lt
 80041d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80041d6:	9305      	str	r3, [sp, #20]
 80041d8:	4d2e      	ldr	r5, [pc, #184]	; (8004294 <_svfiprintf_r+0x1e0>)
 80041da:	2203      	movs	r2, #3
 80041dc:	7839      	ldrb	r1, [r7, #0]
 80041de:	4628      	mov	r0, r5
 80041e0:	f000 f9e8 	bl	80045b4 <memchr>
 80041e4:	b138      	cbz	r0, 80041f6 <_svfiprintf_r+0x142>
 80041e6:	2340      	movs	r3, #64	; 0x40
 80041e8:	1b40      	subs	r0, r0, r5
 80041ea:	fa03 f000 	lsl.w	r0, r3, r0
 80041ee:	9b04      	ldr	r3, [sp, #16]
 80041f0:	3701      	adds	r7, #1
 80041f2:	4303      	orrs	r3, r0
 80041f4:	9304      	str	r3, [sp, #16]
 80041f6:	7839      	ldrb	r1, [r7, #0]
 80041f8:	2206      	movs	r2, #6
 80041fa:	4827      	ldr	r0, [pc, #156]	; (8004298 <_svfiprintf_r+0x1e4>)
 80041fc:	1c7e      	adds	r6, r7, #1
 80041fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004202:	f000 f9d7 	bl	80045b4 <memchr>
 8004206:	2800      	cmp	r0, #0
 8004208:	d038      	beq.n	800427c <_svfiprintf_r+0x1c8>
 800420a:	4b24      	ldr	r3, [pc, #144]	; (800429c <_svfiprintf_r+0x1e8>)
 800420c:	bb13      	cbnz	r3, 8004254 <_svfiprintf_r+0x1a0>
 800420e:	9b03      	ldr	r3, [sp, #12]
 8004210:	3307      	adds	r3, #7
 8004212:	f023 0307 	bic.w	r3, r3, #7
 8004216:	3308      	adds	r3, #8
 8004218:	9303      	str	r3, [sp, #12]
 800421a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800421c:	444b      	add	r3, r9
 800421e:	9309      	str	r3, [sp, #36]	; 0x24
 8004220:	e76d      	b.n	80040fe <_svfiprintf_r+0x4a>
 8004222:	fb05 3202 	mla	r2, r5, r2, r3
 8004226:	2001      	movs	r0, #1
 8004228:	460f      	mov	r7, r1
 800422a:	e7a6      	b.n	800417a <_svfiprintf_r+0xc6>
 800422c:	2300      	movs	r3, #0
 800422e:	250a      	movs	r5, #10
 8004230:	4619      	mov	r1, r3
 8004232:	3701      	adds	r7, #1
 8004234:	9305      	str	r3, [sp, #20]
 8004236:	4638      	mov	r0, r7
 8004238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800423c:	3a30      	subs	r2, #48	; 0x30
 800423e:	2a09      	cmp	r2, #9
 8004240:	d903      	bls.n	800424a <_svfiprintf_r+0x196>
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0c8      	beq.n	80041d8 <_svfiprintf_r+0x124>
 8004246:	9105      	str	r1, [sp, #20]
 8004248:	e7c6      	b.n	80041d8 <_svfiprintf_r+0x124>
 800424a:	fb05 2101 	mla	r1, r5, r1, r2
 800424e:	2301      	movs	r3, #1
 8004250:	4607      	mov	r7, r0
 8004252:	e7f0      	b.n	8004236 <_svfiprintf_r+0x182>
 8004254:	ab03      	add	r3, sp, #12
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	4622      	mov	r2, r4
 800425a:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <_svfiprintf_r+0x1ec>)
 800425c:	a904      	add	r1, sp, #16
 800425e:	4640      	mov	r0, r8
 8004260:	f3af 8000 	nop.w
 8004264:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004268:	4681      	mov	r9, r0
 800426a:	d1d6      	bne.n	800421a <_svfiprintf_r+0x166>
 800426c:	89a3      	ldrh	r3, [r4, #12]
 800426e:	065b      	lsls	r3, r3, #25
 8004270:	f53f af35 	bmi.w	80040de <_svfiprintf_r+0x2a>
 8004274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004276:	b01d      	add	sp, #116	; 0x74
 8004278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800427c:	ab03      	add	r3, sp, #12
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	4622      	mov	r2, r4
 8004282:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <_svfiprintf_r+0x1ec>)
 8004284:	a904      	add	r1, sp, #16
 8004286:	4640      	mov	r0, r8
 8004288:	f000 f882 	bl	8004390 <_printf_i>
 800428c:	e7ea      	b.n	8004264 <_svfiprintf_r+0x1b0>
 800428e:	bf00      	nop
 8004290:	08005738 	.word	0x08005738
 8004294:	0800573e 	.word	0x0800573e
 8004298:	08005742 	.word	0x08005742
 800429c:	00000000 	.word	0x00000000
 80042a0:	08004001 	.word	0x08004001

080042a4 <_printf_common>:
 80042a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a8:	4691      	mov	r9, r2
 80042aa:	461f      	mov	r7, r3
 80042ac:	688a      	ldr	r2, [r1, #8]
 80042ae:	690b      	ldr	r3, [r1, #16]
 80042b0:	4606      	mov	r6, r0
 80042b2:	4293      	cmp	r3, r2
 80042b4:	bfb8      	it	lt
 80042b6:	4613      	movlt	r3, r2
 80042b8:	f8c9 3000 	str.w	r3, [r9]
 80042bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042c0:	460c      	mov	r4, r1
 80042c2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042c6:	b112      	cbz	r2, 80042ce <_printf_common+0x2a>
 80042c8:	3301      	adds	r3, #1
 80042ca:	f8c9 3000 	str.w	r3, [r9]
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	0699      	lsls	r1, r3, #26
 80042d2:	bf42      	ittt	mi
 80042d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80042d8:	3302      	addmi	r3, #2
 80042da:	f8c9 3000 	strmi.w	r3, [r9]
 80042de:	6825      	ldr	r5, [r4, #0]
 80042e0:	f015 0506 	ands.w	r5, r5, #6
 80042e4:	d107      	bne.n	80042f6 <_printf_common+0x52>
 80042e6:	f104 0a19 	add.w	sl, r4, #25
 80042ea:	68e3      	ldr	r3, [r4, #12]
 80042ec:	f8d9 2000 	ldr.w	r2, [r9]
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	42ab      	cmp	r3, r5
 80042f4:	dc29      	bgt.n	800434a <_printf_common+0xa6>
 80042f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80042fa:	6822      	ldr	r2, [r4, #0]
 80042fc:	3300      	adds	r3, #0
 80042fe:	bf18      	it	ne
 8004300:	2301      	movne	r3, #1
 8004302:	0692      	lsls	r2, r2, #26
 8004304:	d42e      	bmi.n	8004364 <_printf_common+0xc0>
 8004306:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800430a:	4639      	mov	r1, r7
 800430c:	4630      	mov	r0, r6
 800430e:	47c0      	blx	r8
 8004310:	3001      	adds	r0, #1
 8004312:	d021      	beq.n	8004358 <_printf_common+0xb4>
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	68e5      	ldr	r5, [r4, #12]
 8004318:	f003 0306 	and.w	r3, r3, #6
 800431c:	2b04      	cmp	r3, #4
 800431e:	bf18      	it	ne
 8004320:	2500      	movne	r5, #0
 8004322:	f8d9 2000 	ldr.w	r2, [r9]
 8004326:	f04f 0900 	mov.w	r9, #0
 800432a:	bf08      	it	eq
 800432c:	1aad      	subeq	r5, r5, r2
 800432e:	68a3      	ldr	r3, [r4, #8]
 8004330:	6922      	ldr	r2, [r4, #16]
 8004332:	bf08      	it	eq
 8004334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004338:	4293      	cmp	r3, r2
 800433a:	bfc4      	itt	gt
 800433c:	1a9b      	subgt	r3, r3, r2
 800433e:	18ed      	addgt	r5, r5, r3
 8004340:	341a      	adds	r4, #26
 8004342:	454d      	cmp	r5, r9
 8004344:	d11a      	bne.n	800437c <_printf_common+0xd8>
 8004346:	2000      	movs	r0, #0
 8004348:	e008      	b.n	800435c <_printf_common+0xb8>
 800434a:	2301      	movs	r3, #1
 800434c:	4652      	mov	r2, sl
 800434e:	4639      	mov	r1, r7
 8004350:	4630      	mov	r0, r6
 8004352:	47c0      	blx	r8
 8004354:	3001      	adds	r0, #1
 8004356:	d103      	bne.n	8004360 <_printf_common+0xbc>
 8004358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800435c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004360:	3501      	adds	r5, #1
 8004362:	e7c2      	b.n	80042ea <_printf_common+0x46>
 8004364:	2030      	movs	r0, #48	; 0x30
 8004366:	18e1      	adds	r1, r4, r3
 8004368:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004372:	4422      	add	r2, r4
 8004374:	3302      	adds	r3, #2
 8004376:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800437a:	e7c4      	b.n	8004306 <_printf_common+0x62>
 800437c:	2301      	movs	r3, #1
 800437e:	4622      	mov	r2, r4
 8004380:	4639      	mov	r1, r7
 8004382:	4630      	mov	r0, r6
 8004384:	47c0      	blx	r8
 8004386:	3001      	adds	r0, #1
 8004388:	d0e6      	beq.n	8004358 <_printf_common+0xb4>
 800438a:	f109 0901 	add.w	r9, r9, #1
 800438e:	e7d8      	b.n	8004342 <_printf_common+0x9e>

08004390 <_printf_i>:
 8004390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004394:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004398:	460c      	mov	r4, r1
 800439a:	7e09      	ldrb	r1, [r1, #24]
 800439c:	b085      	sub	sp, #20
 800439e:	296e      	cmp	r1, #110	; 0x6e
 80043a0:	4617      	mov	r7, r2
 80043a2:	4606      	mov	r6, r0
 80043a4:	4698      	mov	r8, r3
 80043a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80043a8:	f000 80b3 	beq.w	8004512 <_printf_i+0x182>
 80043ac:	d822      	bhi.n	80043f4 <_printf_i+0x64>
 80043ae:	2963      	cmp	r1, #99	; 0x63
 80043b0:	d036      	beq.n	8004420 <_printf_i+0x90>
 80043b2:	d80a      	bhi.n	80043ca <_printf_i+0x3a>
 80043b4:	2900      	cmp	r1, #0
 80043b6:	f000 80b9 	beq.w	800452c <_printf_i+0x19c>
 80043ba:	2958      	cmp	r1, #88	; 0x58
 80043bc:	f000 8083 	beq.w	80044c6 <_printf_i+0x136>
 80043c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80043c8:	e032      	b.n	8004430 <_printf_i+0xa0>
 80043ca:	2964      	cmp	r1, #100	; 0x64
 80043cc:	d001      	beq.n	80043d2 <_printf_i+0x42>
 80043ce:	2969      	cmp	r1, #105	; 0x69
 80043d0:	d1f6      	bne.n	80043c0 <_printf_i+0x30>
 80043d2:	6820      	ldr	r0, [r4, #0]
 80043d4:	6813      	ldr	r3, [r2, #0]
 80043d6:	0605      	lsls	r5, r0, #24
 80043d8:	f103 0104 	add.w	r1, r3, #4
 80043dc:	d52a      	bpl.n	8004434 <_printf_i+0xa4>
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6011      	str	r1, [r2, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	da03      	bge.n	80043ee <_printf_i+0x5e>
 80043e6:	222d      	movs	r2, #45	; 0x2d
 80043e8:	425b      	negs	r3, r3
 80043ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80043ee:	486f      	ldr	r0, [pc, #444]	; (80045ac <_printf_i+0x21c>)
 80043f0:	220a      	movs	r2, #10
 80043f2:	e039      	b.n	8004468 <_printf_i+0xd8>
 80043f4:	2973      	cmp	r1, #115	; 0x73
 80043f6:	f000 809d 	beq.w	8004534 <_printf_i+0x1a4>
 80043fa:	d808      	bhi.n	800440e <_printf_i+0x7e>
 80043fc:	296f      	cmp	r1, #111	; 0x6f
 80043fe:	d020      	beq.n	8004442 <_printf_i+0xb2>
 8004400:	2970      	cmp	r1, #112	; 0x70
 8004402:	d1dd      	bne.n	80043c0 <_printf_i+0x30>
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	f043 0320 	orr.w	r3, r3, #32
 800440a:	6023      	str	r3, [r4, #0]
 800440c:	e003      	b.n	8004416 <_printf_i+0x86>
 800440e:	2975      	cmp	r1, #117	; 0x75
 8004410:	d017      	beq.n	8004442 <_printf_i+0xb2>
 8004412:	2978      	cmp	r1, #120	; 0x78
 8004414:	d1d4      	bne.n	80043c0 <_printf_i+0x30>
 8004416:	2378      	movs	r3, #120	; 0x78
 8004418:	4865      	ldr	r0, [pc, #404]	; (80045b0 <_printf_i+0x220>)
 800441a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800441e:	e055      	b.n	80044cc <_printf_i+0x13c>
 8004420:	6813      	ldr	r3, [r2, #0]
 8004422:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004426:	1d19      	adds	r1, r3, #4
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6011      	str	r1, [r2, #0]
 800442c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004430:	2301      	movs	r3, #1
 8004432:	e08c      	b.n	800454e <_printf_i+0x1be>
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f010 0f40 	tst.w	r0, #64	; 0x40
 800443a:	6011      	str	r1, [r2, #0]
 800443c:	bf18      	it	ne
 800443e:	b21b      	sxthne	r3, r3
 8004440:	e7cf      	b.n	80043e2 <_printf_i+0x52>
 8004442:	6813      	ldr	r3, [r2, #0]
 8004444:	6825      	ldr	r5, [r4, #0]
 8004446:	1d18      	adds	r0, r3, #4
 8004448:	6010      	str	r0, [r2, #0]
 800444a:	0628      	lsls	r0, r5, #24
 800444c:	d501      	bpl.n	8004452 <_printf_i+0xc2>
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	e002      	b.n	8004458 <_printf_i+0xc8>
 8004452:	0668      	lsls	r0, r5, #25
 8004454:	d5fb      	bpl.n	800444e <_printf_i+0xbe>
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	296f      	cmp	r1, #111	; 0x6f
 800445a:	bf14      	ite	ne
 800445c:	220a      	movne	r2, #10
 800445e:	2208      	moveq	r2, #8
 8004460:	4852      	ldr	r0, [pc, #328]	; (80045ac <_printf_i+0x21c>)
 8004462:	2100      	movs	r1, #0
 8004464:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004468:	6865      	ldr	r5, [r4, #4]
 800446a:	2d00      	cmp	r5, #0
 800446c:	60a5      	str	r5, [r4, #8]
 800446e:	f2c0 8095 	blt.w	800459c <_printf_i+0x20c>
 8004472:	6821      	ldr	r1, [r4, #0]
 8004474:	f021 0104 	bic.w	r1, r1, #4
 8004478:	6021      	str	r1, [r4, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d13d      	bne.n	80044fa <_printf_i+0x16a>
 800447e:	2d00      	cmp	r5, #0
 8004480:	f040 808e 	bne.w	80045a0 <_printf_i+0x210>
 8004484:	4665      	mov	r5, ip
 8004486:	2a08      	cmp	r2, #8
 8004488:	d10b      	bne.n	80044a2 <_printf_i+0x112>
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	07db      	lsls	r3, r3, #31
 800448e:	d508      	bpl.n	80044a2 <_printf_i+0x112>
 8004490:	6923      	ldr	r3, [r4, #16]
 8004492:	6862      	ldr	r2, [r4, #4]
 8004494:	429a      	cmp	r2, r3
 8004496:	bfde      	ittt	le
 8004498:	2330      	movle	r3, #48	; 0x30
 800449a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800449e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80044a2:	ebac 0305 	sub.w	r3, ip, r5
 80044a6:	6123      	str	r3, [r4, #16]
 80044a8:	f8cd 8000 	str.w	r8, [sp]
 80044ac:	463b      	mov	r3, r7
 80044ae:	aa03      	add	r2, sp, #12
 80044b0:	4621      	mov	r1, r4
 80044b2:	4630      	mov	r0, r6
 80044b4:	f7ff fef6 	bl	80042a4 <_printf_common>
 80044b8:	3001      	adds	r0, #1
 80044ba:	d14d      	bne.n	8004558 <_printf_i+0x1c8>
 80044bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044c0:	b005      	add	sp, #20
 80044c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044c6:	4839      	ldr	r0, [pc, #228]	; (80045ac <_printf_i+0x21c>)
 80044c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80044cc:	6813      	ldr	r3, [r2, #0]
 80044ce:	6821      	ldr	r1, [r4, #0]
 80044d0:	1d1d      	adds	r5, r3, #4
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6015      	str	r5, [r2, #0]
 80044d6:	060a      	lsls	r2, r1, #24
 80044d8:	d50b      	bpl.n	80044f2 <_printf_i+0x162>
 80044da:	07ca      	lsls	r2, r1, #31
 80044dc:	bf44      	itt	mi
 80044de:	f041 0120 	orrmi.w	r1, r1, #32
 80044e2:	6021      	strmi	r1, [r4, #0]
 80044e4:	b91b      	cbnz	r3, 80044ee <_printf_i+0x15e>
 80044e6:	6822      	ldr	r2, [r4, #0]
 80044e8:	f022 0220 	bic.w	r2, r2, #32
 80044ec:	6022      	str	r2, [r4, #0]
 80044ee:	2210      	movs	r2, #16
 80044f0:	e7b7      	b.n	8004462 <_printf_i+0xd2>
 80044f2:	064d      	lsls	r5, r1, #25
 80044f4:	bf48      	it	mi
 80044f6:	b29b      	uxthmi	r3, r3
 80044f8:	e7ef      	b.n	80044da <_printf_i+0x14a>
 80044fa:	4665      	mov	r5, ip
 80044fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004500:	fb02 3311 	mls	r3, r2, r1, r3
 8004504:	5cc3      	ldrb	r3, [r0, r3]
 8004506:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800450a:	460b      	mov	r3, r1
 800450c:	2900      	cmp	r1, #0
 800450e:	d1f5      	bne.n	80044fc <_printf_i+0x16c>
 8004510:	e7b9      	b.n	8004486 <_printf_i+0xf6>
 8004512:	6813      	ldr	r3, [r2, #0]
 8004514:	6825      	ldr	r5, [r4, #0]
 8004516:	1d18      	adds	r0, r3, #4
 8004518:	6961      	ldr	r1, [r4, #20]
 800451a:	6010      	str	r0, [r2, #0]
 800451c:	0628      	lsls	r0, r5, #24
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	d501      	bpl.n	8004526 <_printf_i+0x196>
 8004522:	6019      	str	r1, [r3, #0]
 8004524:	e002      	b.n	800452c <_printf_i+0x19c>
 8004526:	066a      	lsls	r2, r5, #25
 8004528:	d5fb      	bpl.n	8004522 <_printf_i+0x192>
 800452a:	8019      	strh	r1, [r3, #0]
 800452c:	2300      	movs	r3, #0
 800452e:	4665      	mov	r5, ip
 8004530:	6123      	str	r3, [r4, #16]
 8004532:	e7b9      	b.n	80044a8 <_printf_i+0x118>
 8004534:	6813      	ldr	r3, [r2, #0]
 8004536:	1d19      	adds	r1, r3, #4
 8004538:	6011      	str	r1, [r2, #0]
 800453a:	681d      	ldr	r5, [r3, #0]
 800453c:	6862      	ldr	r2, [r4, #4]
 800453e:	2100      	movs	r1, #0
 8004540:	4628      	mov	r0, r5
 8004542:	f000 f837 	bl	80045b4 <memchr>
 8004546:	b108      	cbz	r0, 800454c <_printf_i+0x1bc>
 8004548:	1b40      	subs	r0, r0, r5
 800454a:	6060      	str	r0, [r4, #4]
 800454c:	6863      	ldr	r3, [r4, #4]
 800454e:	6123      	str	r3, [r4, #16]
 8004550:	2300      	movs	r3, #0
 8004552:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004556:	e7a7      	b.n	80044a8 <_printf_i+0x118>
 8004558:	6923      	ldr	r3, [r4, #16]
 800455a:	462a      	mov	r2, r5
 800455c:	4639      	mov	r1, r7
 800455e:	4630      	mov	r0, r6
 8004560:	47c0      	blx	r8
 8004562:	3001      	adds	r0, #1
 8004564:	d0aa      	beq.n	80044bc <_printf_i+0x12c>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	079b      	lsls	r3, r3, #30
 800456a:	d413      	bmi.n	8004594 <_printf_i+0x204>
 800456c:	68e0      	ldr	r0, [r4, #12]
 800456e:	9b03      	ldr	r3, [sp, #12]
 8004570:	4298      	cmp	r0, r3
 8004572:	bfb8      	it	lt
 8004574:	4618      	movlt	r0, r3
 8004576:	e7a3      	b.n	80044c0 <_printf_i+0x130>
 8004578:	2301      	movs	r3, #1
 800457a:	464a      	mov	r2, r9
 800457c:	4639      	mov	r1, r7
 800457e:	4630      	mov	r0, r6
 8004580:	47c0      	blx	r8
 8004582:	3001      	adds	r0, #1
 8004584:	d09a      	beq.n	80044bc <_printf_i+0x12c>
 8004586:	3501      	adds	r5, #1
 8004588:	68e3      	ldr	r3, [r4, #12]
 800458a:	9a03      	ldr	r2, [sp, #12]
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	42ab      	cmp	r3, r5
 8004590:	dcf2      	bgt.n	8004578 <_printf_i+0x1e8>
 8004592:	e7eb      	b.n	800456c <_printf_i+0x1dc>
 8004594:	2500      	movs	r5, #0
 8004596:	f104 0919 	add.w	r9, r4, #25
 800459a:	e7f5      	b.n	8004588 <_printf_i+0x1f8>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1ac      	bne.n	80044fa <_printf_i+0x16a>
 80045a0:	7803      	ldrb	r3, [r0, #0]
 80045a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045aa:	e76c      	b.n	8004486 <_printf_i+0xf6>
 80045ac:	08005749 	.word	0x08005749
 80045b0:	0800575a 	.word	0x0800575a

080045b4 <memchr>:
 80045b4:	b510      	push	{r4, lr}
 80045b6:	b2c9      	uxtb	r1, r1
 80045b8:	4402      	add	r2, r0
 80045ba:	4290      	cmp	r0, r2
 80045bc:	4603      	mov	r3, r0
 80045be:	d101      	bne.n	80045c4 <memchr+0x10>
 80045c0:	2300      	movs	r3, #0
 80045c2:	e003      	b.n	80045cc <memchr+0x18>
 80045c4:	781c      	ldrb	r4, [r3, #0]
 80045c6:	3001      	adds	r0, #1
 80045c8:	428c      	cmp	r4, r1
 80045ca:	d1f6      	bne.n	80045ba <memchr+0x6>
 80045cc:	4618      	mov	r0, r3
 80045ce:	bd10      	pop	{r4, pc}

080045d0 <memcpy>:
 80045d0:	b510      	push	{r4, lr}
 80045d2:	1e43      	subs	r3, r0, #1
 80045d4:	440a      	add	r2, r1
 80045d6:	4291      	cmp	r1, r2
 80045d8:	d100      	bne.n	80045dc <memcpy+0xc>
 80045da:	bd10      	pop	{r4, pc}
 80045dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045e4:	e7f7      	b.n	80045d6 <memcpy+0x6>

080045e6 <memmove>:
 80045e6:	4288      	cmp	r0, r1
 80045e8:	b510      	push	{r4, lr}
 80045ea:	eb01 0302 	add.w	r3, r1, r2
 80045ee:	d807      	bhi.n	8004600 <memmove+0x1a>
 80045f0:	1e42      	subs	r2, r0, #1
 80045f2:	4299      	cmp	r1, r3
 80045f4:	d00a      	beq.n	800460c <memmove+0x26>
 80045f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80045fe:	e7f8      	b.n	80045f2 <memmove+0xc>
 8004600:	4283      	cmp	r3, r0
 8004602:	d9f5      	bls.n	80045f0 <memmove+0xa>
 8004604:	1881      	adds	r1, r0, r2
 8004606:	1ad2      	subs	r2, r2, r3
 8004608:	42d3      	cmn	r3, r2
 800460a:	d100      	bne.n	800460e <memmove+0x28>
 800460c:	bd10      	pop	{r4, pc}
 800460e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004612:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004616:	e7f7      	b.n	8004608 <memmove+0x22>

08004618 <_free_r>:
 8004618:	b538      	push	{r3, r4, r5, lr}
 800461a:	4605      	mov	r5, r0
 800461c:	2900      	cmp	r1, #0
 800461e:	d043      	beq.n	80046a8 <_free_r+0x90>
 8004620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004624:	1f0c      	subs	r4, r1, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	bfb8      	it	lt
 800462a:	18e4      	addlt	r4, r4, r3
 800462c:	f000 f8d0 	bl	80047d0 <__malloc_lock>
 8004630:	4a1e      	ldr	r2, [pc, #120]	; (80046ac <_free_r+0x94>)
 8004632:	6813      	ldr	r3, [r2, #0]
 8004634:	4610      	mov	r0, r2
 8004636:	b933      	cbnz	r3, 8004646 <_free_r+0x2e>
 8004638:	6063      	str	r3, [r4, #4]
 800463a:	6014      	str	r4, [r2, #0]
 800463c:	4628      	mov	r0, r5
 800463e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004642:	f000 b8c6 	b.w	80047d2 <__malloc_unlock>
 8004646:	42a3      	cmp	r3, r4
 8004648:	d90b      	bls.n	8004662 <_free_r+0x4a>
 800464a:	6821      	ldr	r1, [r4, #0]
 800464c:	1862      	adds	r2, r4, r1
 800464e:	4293      	cmp	r3, r2
 8004650:	bf01      	itttt	eq
 8004652:	681a      	ldreq	r2, [r3, #0]
 8004654:	685b      	ldreq	r3, [r3, #4]
 8004656:	1852      	addeq	r2, r2, r1
 8004658:	6022      	streq	r2, [r4, #0]
 800465a:	6063      	str	r3, [r4, #4]
 800465c:	6004      	str	r4, [r0, #0]
 800465e:	e7ed      	b.n	800463c <_free_r+0x24>
 8004660:	4613      	mov	r3, r2
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	b10a      	cbz	r2, 800466a <_free_r+0x52>
 8004666:	42a2      	cmp	r2, r4
 8004668:	d9fa      	bls.n	8004660 <_free_r+0x48>
 800466a:	6819      	ldr	r1, [r3, #0]
 800466c:	1858      	adds	r0, r3, r1
 800466e:	42a0      	cmp	r0, r4
 8004670:	d10b      	bne.n	800468a <_free_r+0x72>
 8004672:	6820      	ldr	r0, [r4, #0]
 8004674:	4401      	add	r1, r0
 8004676:	1858      	adds	r0, r3, r1
 8004678:	4282      	cmp	r2, r0
 800467a:	6019      	str	r1, [r3, #0]
 800467c:	d1de      	bne.n	800463c <_free_r+0x24>
 800467e:	6810      	ldr	r0, [r2, #0]
 8004680:	6852      	ldr	r2, [r2, #4]
 8004682:	4401      	add	r1, r0
 8004684:	6019      	str	r1, [r3, #0]
 8004686:	605a      	str	r2, [r3, #4]
 8004688:	e7d8      	b.n	800463c <_free_r+0x24>
 800468a:	d902      	bls.n	8004692 <_free_r+0x7a>
 800468c:	230c      	movs	r3, #12
 800468e:	602b      	str	r3, [r5, #0]
 8004690:	e7d4      	b.n	800463c <_free_r+0x24>
 8004692:	6820      	ldr	r0, [r4, #0]
 8004694:	1821      	adds	r1, r4, r0
 8004696:	428a      	cmp	r2, r1
 8004698:	bf01      	itttt	eq
 800469a:	6811      	ldreq	r1, [r2, #0]
 800469c:	6852      	ldreq	r2, [r2, #4]
 800469e:	1809      	addeq	r1, r1, r0
 80046a0:	6021      	streq	r1, [r4, #0]
 80046a2:	6062      	str	r2, [r4, #4]
 80046a4:	605c      	str	r4, [r3, #4]
 80046a6:	e7c9      	b.n	800463c <_free_r+0x24>
 80046a8:	bd38      	pop	{r3, r4, r5, pc}
 80046aa:	bf00      	nop
 80046ac:	200000a8 	.word	0x200000a8

080046b0 <_malloc_r>:
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	1ccd      	adds	r5, r1, #3
 80046b4:	f025 0503 	bic.w	r5, r5, #3
 80046b8:	3508      	adds	r5, #8
 80046ba:	2d0c      	cmp	r5, #12
 80046bc:	bf38      	it	cc
 80046be:	250c      	movcc	r5, #12
 80046c0:	2d00      	cmp	r5, #0
 80046c2:	4606      	mov	r6, r0
 80046c4:	db01      	blt.n	80046ca <_malloc_r+0x1a>
 80046c6:	42a9      	cmp	r1, r5
 80046c8:	d903      	bls.n	80046d2 <_malloc_r+0x22>
 80046ca:	230c      	movs	r3, #12
 80046cc:	6033      	str	r3, [r6, #0]
 80046ce:	2000      	movs	r0, #0
 80046d0:	bd70      	pop	{r4, r5, r6, pc}
 80046d2:	f000 f87d 	bl	80047d0 <__malloc_lock>
 80046d6:	4a21      	ldr	r2, [pc, #132]	; (800475c <_malloc_r+0xac>)
 80046d8:	6814      	ldr	r4, [r2, #0]
 80046da:	4621      	mov	r1, r4
 80046dc:	b991      	cbnz	r1, 8004704 <_malloc_r+0x54>
 80046de:	4c20      	ldr	r4, [pc, #128]	; (8004760 <_malloc_r+0xb0>)
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	b91b      	cbnz	r3, 80046ec <_malloc_r+0x3c>
 80046e4:	4630      	mov	r0, r6
 80046e6:	f000 f863 	bl	80047b0 <_sbrk_r>
 80046ea:	6020      	str	r0, [r4, #0]
 80046ec:	4629      	mov	r1, r5
 80046ee:	4630      	mov	r0, r6
 80046f0:	f000 f85e 	bl	80047b0 <_sbrk_r>
 80046f4:	1c43      	adds	r3, r0, #1
 80046f6:	d124      	bne.n	8004742 <_malloc_r+0x92>
 80046f8:	230c      	movs	r3, #12
 80046fa:	4630      	mov	r0, r6
 80046fc:	6033      	str	r3, [r6, #0]
 80046fe:	f000 f868 	bl	80047d2 <__malloc_unlock>
 8004702:	e7e4      	b.n	80046ce <_malloc_r+0x1e>
 8004704:	680b      	ldr	r3, [r1, #0]
 8004706:	1b5b      	subs	r3, r3, r5
 8004708:	d418      	bmi.n	800473c <_malloc_r+0x8c>
 800470a:	2b0b      	cmp	r3, #11
 800470c:	d90f      	bls.n	800472e <_malloc_r+0x7e>
 800470e:	600b      	str	r3, [r1, #0]
 8004710:	18cc      	adds	r4, r1, r3
 8004712:	50cd      	str	r5, [r1, r3]
 8004714:	4630      	mov	r0, r6
 8004716:	f000 f85c 	bl	80047d2 <__malloc_unlock>
 800471a:	f104 000b 	add.w	r0, r4, #11
 800471e:	1d23      	adds	r3, r4, #4
 8004720:	f020 0007 	bic.w	r0, r0, #7
 8004724:	1ac3      	subs	r3, r0, r3
 8004726:	d0d3      	beq.n	80046d0 <_malloc_r+0x20>
 8004728:	425a      	negs	r2, r3
 800472a:	50e2      	str	r2, [r4, r3]
 800472c:	e7d0      	b.n	80046d0 <_malloc_r+0x20>
 800472e:	684b      	ldr	r3, [r1, #4]
 8004730:	428c      	cmp	r4, r1
 8004732:	bf16      	itet	ne
 8004734:	6063      	strne	r3, [r4, #4]
 8004736:	6013      	streq	r3, [r2, #0]
 8004738:	460c      	movne	r4, r1
 800473a:	e7eb      	b.n	8004714 <_malloc_r+0x64>
 800473c:	460c      	mov	r4, r1
 800473e:	6849      	ldr	r1, [r1, #4]
 8004740:	e7cc      	b.n	80046dc <_malloc_r+0x2c>
 8004742:	1cc4      	adds	r4, r0, #3
 8004744:	f024 0403 	bic.w	r4, r4, #3
 8004748:	42a0      	cmp	r0, r4
 800474a:	d005      	beq.n	8004758 <_malloc_r+0xa8>
 800474c:	1a21      	subs	r1, r4, r0
 800474e:	4630      	mov	r0, r6
 8004750:	f000 f82e 	bl	80047b0 <_sbrk_r>
 8004754:	3001      	adds	r0, #1
 8004756:	d0cf      	beq.n	80046f8 <_malloc_r+0x48>
 8004758:	6025      	str	r5, [r4, #0]
 800475a:	e7db      	b.n	8004714 <_malloc_r+0x64>
 800475c:	200000a8 	.word	0x200000a8
 8004760:	200000ac 	.word	0x200000ac

08004764 <_realloc_r>:
 8004764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004766:	4607      	mov	r7, r0
 8004768:	4614      	mov	r4, r2
 800476a:	460e      	mov	r6, r1
 800476c:	b921      	cbnz	r1, 8004778 <_realloc_r+0x14>
 800476e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004772:	4611      	mov	r1, r2
 8004774:	f7ff bf9c 	b.w	80046b0 <_malloc_r>
 8004778:	b922      	cbnz	r2, 8004784 <_realloc_r+0x20>
 800477a:	f7ff ff4d 	bl	8004618 <_free_r>
 800477e:	4625      	mov	r5, r4
 8004780:	4628      	mov	r0, r5
 8004782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004784:	f000 f826 	bl	80047d4 <_malloc_usable_size_r>
 8004788:	42a0      	cmp	r0, r4
 800478a:	d20f      	bcs.n	80047ac <_realloc_r+0x48>
 800478c:	4621      	mov	r1, r4
 800478e:	4638      	mov	r0, r7
 8004790:	f7ff ff8e 	bl	80046b0 <_malloc_r>
 8004794:	4605      	mov	r5, r0
 8004796:	2800      	cmp	r0, #0
 8004798:	d0f2      	beq.n	8004780 <_realloc_r+0x1c>
 800479a:	4631      	mov	r1, r6
 800479c:	4622      	mov	r2, r4
 800479e:	f7ff ff17 	bl	80045d0 <memcpy>
 80047a2:	4631      	mov	r1, r6
 80047a4:	4638      	mov	r0, r7
 80047a6:	f7ff ff37 	bl	8004618 <_free_r>
 80047aa:	e7e9      	b.n	8004780 <_realloc_r+0x1c>
 80047ac:	4635      	mov	r5, r6
 80047ae:	e7e7      	b.n	8004780 <_realloc_r+0x1c>

080047b0 <_sbrk_r>:
 80047b0:	b538      	push	{r3, r4, r5, lr}
 80047b2:	2300      	movs	r3, #0
 80047b4:	4c05      	ldr	r4, [pc, #20]	; (80047cc <_sbrk_r+0x1c>)
 80047b6:	4605      	mov	r5, r0
 80047b8:	4608      	mov	r0, r1
 80047ba:	6023      	str	r3, [r4, #0]
 80047bc:	f7fd f93c 	bl	8001a38 <_sbrk>
 80047c0:	1c43      	adds	r3, r0, #1
 80047c2:	d102      	bne.n	80047ca <_sbrk_r+0x1a>
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	b103      	cbz	r3, 80047ca <_sbrk_r+0x1a>
 80047c8:	602b      	str	r3, [r5, #0]
 80047ca:	bd38      	pop	{r3, r4, r5, pc}
 80047cc:	200005ec 	.word	0x200005ec

080047d0 <__malloc_lock>:
 80047d0:	4770      	bx	lr

080047d2 <__malloc_unlock>:
 80047d2:	4770      	bx	lr

080047d4 <_malloc_usable_size_r>:
 80047d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047d8:	1f18      	subs	r0, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bfbc      	itt	lt
 80047de:	580b      	ldrlt	r3, [r1, r0]
 80047e0:	18c0      	addlt	r0, r0, r3
 80047e2:	4770      	bx	lr

080047e4 <_init>:
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	bf00      	nop
 80047e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ea:	bc08      	pop	{r3}
 80047ec:	469e      	mov	lr, r3
 80047ee:	4770      	bx	lr

080047f0 <_fini>:
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f2:	bf00      	nop
 80047f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f6:	bc08      	pop	{r3}
 80047f8:	469e      	mov	lr, r3
 80047fa:	4770      	bx	lr

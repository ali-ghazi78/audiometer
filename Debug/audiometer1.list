
audiometer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f80  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f18  08003090  08003090  00013090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fa8  08003fa8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003fa8  08003fa8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fa8  08003fa8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fa8  08003fa8  00013fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fac  08003fac  00013fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  20000014  08003fc4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08003fc4  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000865f  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001446  00000000  00000000  0002869c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  00029ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000860  00000000  00000000  0002a3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013854  00000000  00000000  0002ac30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000696d  00000000  00000000  0003e484  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006c319  00000000  00000000  00044df1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b110a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002608  00000000  00000000  000b1188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08003078 	.word	0x08003078

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08003078 	.word	0x08003078

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_frsub>:
 800092c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000930:	e002      	b.n	8000938 <__addsf3>
 8000932:	bf00      	nop

08000934 <__aeabi_fsub>:
 8000934:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000938 <__addsf3>:
 8000938:	0042      	lsls	r2, r0, #1
 800093a:	bf1f      	itttt	ne
 800093c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000940:	ea92 0f03 	teqne	r2, r3
 8000944:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000948:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800094c:	d06a      	beq.n	8000a24 <__addsf3+0xec>
 800094e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000952:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000956:	bfc1      	itttt	gt
 8000958:	18d2      	addgt	r2, r2, r3
 800095a:	4041      	eorgt	r1, r0
 800095c:	4048      	eorgt	r0, r1
 800095e:	4041      	eorgt	r1, r0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
 8000964:	2b19      	cmp	r3, #25
 8000966:	bf88      	it	hi
 8000968:	4770      	bxhi	lr
 800096a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800096e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000972:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800097e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000982:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4249      	negne	r1, r1
 800098a:	ea92 0f03 	teq	r2, r3
 800098e:	d03f      	beq.n	8000a10 <__addsf3+0xd8>
 8000990:	f1a2 0201 	sub.w	r2, r2, #1
 8000994:	fa41 fc03 	asr.w	ip, r1, r3
 8000998:	eb10 000c 	adds.w	r0, r0, ip
 800099c:	f1c3 0320 	rsb	r3, r3, #32
 80009a0:	fa01 f103 	lsl.w	r1, r1, r3
 80009a4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009a8:	d502      	bpl.n	80009b0 <__addsf3+0x78>
 80009aa:	4249      	negs	r1, r1
 80009ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009b4:	d313      	bcc.n	80009de <__addsf3+0xa6>
 80009b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ba:	d306      	bcc.n	80009ca <__addsf3+0x92>
 80009bc:	0840      	lsrs	r0, r0, #1
 80009be:	ea4f 0131 	mov.w	r1, r1, rrx
 80009c2:	f102 0201 	add.w	r2, r2, #1
 80009c6:	2afe      	cmp	r2, #254	; 0xfe
 80009c8:	d251      	bcs.n	8000a6e <__addsf3+0x136>
 80009ca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d2:	bf08      	it	eq
 80009d4:	f020 0001 	biceq.w	r0, r0, #1
 80009d8:	ea40 0003 	orr.w	r0, r0, r3
 80009dc:	4770      	bx	lr
 80009de:	0049      	lsls	r1, r1, #1
 80009e0:	eb40 0000 	adc.w	r0, r0, r0
 80009e4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80009e8:	f1a2 0201 	sub.w	r2, r2, #1
 80009ec:	d1ed      	bne.n	80009ca <__addsf3+0x92>
 80009ee:	fab0 fc80 	clz	ip, r0
 80009f2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009f6:	ebb2 020c 	subs.w	r2, r2, ip
 80009fa:	fa00 f00c 	lsl.w	r0, r0, ip
 80009fe:	bfaa      	itet	ge
 8000a00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a04:	4252      	neglt	r2, r2
 8000a06:	4318      	orrge	r0, r3
 8000a08:	bfbc      	itt	lt
 8000a0a:	40d0      	lsrlt	r0, r2
 8000a0c:	4318      	orrlt	r0, r3
 8000a0e:	4770      	bx	lr
 8000a10:	f092 0f00 	teq	r2, #0
 8000a14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a18:	bf06      	itte	eq
 8000a1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a1e:	3201      	addeq	r2, #1
 8000a20:	3b01      	subne	r3, #1
 8000a22:	e7b5      	b.n	8000990 <__addsf3+0x58>
 8000a24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a2c:	bf18      	it	ne
 8000a2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a32:	d021      	beq.n	8000a78 <__addsf3+0x140>
 8000a34:	ea92 0f03 	teq	r2, r3
 8000a38:	d004      	beq.n	8000a44 <__addsf3+0x10c>
 8000a3a:	f092 0f00 	teq	r2, #0
 8000a3e:	bf08      	it	eq
 8000a40:	4608      	moveq	r0, r1
 8000a42:	4770      	bx	lr
 8000a44:	ea90 0f01 	teq	r0, r1
 8000a48:	bf1c      	itt	ne
 8000a4a:	2000      	movne	r0, #0
 8000a4c:	4770      	bxne	lr
 8000a4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a52:	d104      	bne.n	8000a5e <__addsf3+0x126>
 8000a54:	0040      	lsls	r0, r0, #1
 8000a56:	bf28      	it	cs
 8000a58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a5c:	4770      	bx	lr
 8000a5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a62:	bf3c      	itt	cc
 8000a64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bxcc	lr
 8000a6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a76:	4770      	bx	lr
 8000a78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a7c:	bf16      	itet	ne
 8000a7e:	4608      	movne	r0, r1
 8000a80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a84:	4601      	movne	r1, r0
 8000a86:	0242      	lsls	r2, r0, #9
 8000a88:	bf06      	itte	eq
 8000a8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a8e:	ea90 0f01 	teqeq	r0, r1
 8000a92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_ui2f>:
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e004      	b.n	8000aa8 <__aeabi_i2f+0x8>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_i2f>:
 8000aa0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000aa4:	bf48      	it	mi
 8000aa6:	4240      	negmi	r0, r0
 8000aa8:	ea5f 0c00 	movs.w	ip, r0
 8000aac:	bf08      	it	eq
 8000aae:	4770      	bxeq	lr
 8000ab0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ab4:	4601      	mov	r1, r0
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	e01c      	b.n	8000af6 <__aeabi_l2f+0x2a>

08000abc <__aeabi_ul2f>:
 8000abc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f04f 0300 	mov.w	r3, #0
 8000ac8:	e00a      	b.n	8000ae0 <__aeabi_l2f+0x14>
 8000aca:	bf00      	nop

08000acc <__aeabi_l2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__aeabi_l2f+0x14>
 8000ada:	4240      	negs	r0, r0
 8000adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae0:	ea5f 0c01 	movs.w	ip, r1
 8000ae4:	bf02      	ittt	eq
 8000ae6:	4684      	moveq	ip, r0
 8000ae8:	4601      	moveq	r1, r0
 8000aea:	2000      	moveq	r0, #0
 8000aec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000af0:	bf08      	it	eq
 8000af2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000af6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000afa:	fabc f28c 	clz	r2, ip
 8000afe:	3a08      	subs	r2, #8
 8000b00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b04:	db10      	blt.n	8000b28 <__aeabi_l2f+0x5c>
 8000b06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b10:	f1c2 0220 	rsb	r2, r2, #32
 8000b14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b18:	fa20 f202 	lsr.w	r2, r0, r2
 8000b1c:	eb43 0002 	adc.w	r0, r3, r2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f102 0220 	add.w	r2, r2, #32
 8000b2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b38:	fa21 f202 	lsr.w	r2, r1, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b46:	4770      	bx	lr

08000b48 <my_i2c_master_write>:
	 unsigned int *data; /*!< Pointer to data font data array */
} FontDef;


void my_i2c_master_write(uint16_t address ,uint16_t reg,uint16_t data)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af04      	add	r7, sp, #16
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
 8000b52:	460b      	mov	r3, r1
 8000b54:	80bb      	strh	r3, [r7, #4]
 8000b56:	4613      	mov	r3, r2
 8000b58:	807b      	strh	r3, [r7, #2]

	HAL_I2C_Mem_Write(&hi2c1,address,reg,1,&data,1,500);
 8000b5a:	88ba      	ldrh	r2, [r7, #4]
 8000b5c:	88f9      	ldrh	r1, [r7, #6]
 8000b5e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b62:	9302      	str	r3, [sp, #8]
 8000b64:	2301      	movs	r3, #1
 8000b66:	9301      	str	r3, [sp, #4]
 8000b68:	1cbb      	adds	r3, r7, #2
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	4803      	ldr	r0, [pc, #12]	; (8000b7c <my_i2c_master_write+0x34>)
 8000b70:	f001 f926 	bl	8001dc0 <HAL_I2C_Mem_Write>

	//HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)

}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000030 	.word	0x20000030

08000b80 <ssd1306_WriteCommand>:




// Send a byte to the command register
void ssd1306_WriteCommand(unsigned char byte) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
	my_i2c_master_write(SSD1306_I2C_ADDR,0x00,byte);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	461a      	mov	r2, r3
 8000b90:	2100      	movs	r1, #0
 8000b92:	2078      	movs	r0, #120	; 0x78
 8000b94:	f7ff ffd8 	bl	8000b48 <my_i2c_master_write>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(unsigned char* buffer, unsigned char size) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	70fb      	strb	r3, [r7, #3]
	int cc=0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
	for(cc=0;cc<size;cc++)
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	e00c      	b.n	8000bd0 <ssd1306_WriteData+0x30>
	{
		my_i2c_master_write(SSD1306_I2C_ADDR,0x40,buffer[cc]);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	4413      	add	r3, r2
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	2140      	movs	r1, #64	; 0x40
 8000bc4:	2078      	movs	r0, #120	; 0x78
 8000bc6:	f7ff ffbf 	bl	8000b48 <my_i2c_master_write>
	for(cc=0;cc<size;cc++)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	dbee      	blt.n	8000bb6 <ssd1306_WriteData+0x16>
	}
}
 8000bd8:	bf00      	nop
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <ssd1306_Fill>:



// Initialize the oled screen
void ssd1306_Fill(SSD1306_COLOR color) {
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    unsigned int i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e00d      	b.n	8000c0c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00: 0xFF;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <ssd1306_Fill+0x1a>
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	e000      	b.n	8000bfc <ssd1306_Fill+0x1c>
 8000bfa:	21ff      	movs	r1, #255	; 0xff
 8000bfc:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <ssd1306_Fill+0x40>)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	4413      	add	r3, r2
 8000c02:	460a      	mov	r2, r1
 8000c04:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c12:	d3ed      	bcc.n	8000bf0 <ssd1306_Fill+0x10>
    }
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000090 	.word	0x20000090

08000c24 <ssd1306_UpdateScreen>:


// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
    unsigned char i;
    for(i = 0; i < 8; i++) {
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	71fb      	strb	r3, [r7, #7]
 8000c2e:	e016      	b.n	8000c5e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	3b50      	subs	r3, #80	; 0x50
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ffa2 	bl	8000b80 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	f7ff ff9f 	bl	8000b80 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000c42:	2010      	movs	r0, #16
 8000c44:	f7ff ff9c 	bl	8000b80 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	01db      	lsls	r3, r3, #7
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <ssd1306_UpdateScreen+0x48>)
 8000c4e:	4413      	add	r3, r2
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffa4 	bl	8000ba0 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	2b07      	cmp	r3, #7
 8000c62:	d9e5      	bls.n	8000c30 <ssd1306_UpdateScreen+0xc>
    }
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000090 	.word	0x20000090

08000c70 <delay_ms>:



void delay_ms(int d)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	HAL_Delay(d);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 fce8 	bl	8001650 <HAL_Delay>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <ssd1306_Init>:
void ssd1306_Init(void) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0

    // Wait for the screen to boot
    delay_ms(100);
 8000c8c:	2064      	movs	r0, #100	; 0x64
 8000c8e:	f7ff ffef 	bl	8000c70 <delay_ms>

    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 8000c92:	20ae      	movs	r0, #174	; 0xae
 8000c94:	f7ff ff74 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000c98:	2020      	movs	r0, #32
 8000c9a:	f7ff ff71 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff ff6e 	bl	8000b80 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ca4:	20b0      	movs	r0, #176	; 0xb0
 8000ca6:	f7ff ff6b 	bl	8000b80 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000caa:	20c8      	movs	r0, #200	; 0xc8
 8000cac:	f7ff ff68 	bl	8000b80 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff ff65 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000cb6:	2010      	movs	r0, #16
 8000cb8:	f7ff ff62 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000cbc:	2040      	movs	r0, #64	; 0x40
 8000cbe:	f7ff ff5f 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 8000cc2:	2081      	movs	r0, #129	; 0x81
 8000cc4:	f7ff ff5c 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 8000cc8:	20ff      	movs	r0, #255	; 0xff
 8000cca:	f7ff ff59 	bl	8000b80 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000cce:	20a1      	movs	r0, #161	; 0xa1
 8000cd0:	f7ff ff56 	bl	8000b80 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000cd4:	20a6      	movs	r0, #166	; 0xa6
 8000cd6:	f7ff ff53 	bl	8000b80 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000cda:	20a8      	movs	r0, #168	; 0xa8
 8000cdc:	f7ff ff50 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8000ce0:	203f      	movs	r0, #63	; 0x3f
 8000ce2:	f7ff ff4d 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ce6:	20a4      	movs	r0, #164	; 0xa4
 8000ce8:	f7ff ff4a 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000cec:	20d3      	movs	r0, #211	; 0xd3
 8000cee:	f7ff ff47 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff ff44 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000cf8:	20d5      	movs	r0, #213	; 0xd5
 8000cfa:	f7ff ff41 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000cfe:	20f0      	movs	r0, #240	; 0xf0
 8000d00:	f7ff ff3e 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000d04:	20d9      	movs	r0, #217	; 0xd9
 8000d06:	f7ff ff3b 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000d0a:	2022      	movs	r0, #34	; 0x22
 8000d0c:	f7ff ff38 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000d10:	20da      	movs	r0, #218	; 0xda
 8000d12:	f7ff ff35 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8000d16:	2012      	movs	r0, #18
 8000d18:	f7ff ff32 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000d1c:	20db      	movs	r0, #219	; 0xdb
 8000d1e:	f7ff ff2f 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000d22:	2020      	movs	r0, #32
 8000d24:	f7ff ff2c 	bl	8000b80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000d28:	208d      	movs	r0, #141	; 0x8d
 8000d2a:	f7ff ff29 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000d2e:	2014      	movs	r0, #20
 8000d30:	f7ff ff26 	bl	8000b80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000d34:	20af      	movs	r0, #175	; 0xaf
 8000d36:	f7ff ff23 	bl	8000b80 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff ff50 	bl	8000be0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000d40:	f7ff ff70 	bl	8000c24 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <ssd1306_Init+0xd4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <ssd1306_Init+0xd4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	605a      	str	r2, [r3, #4]

    SSD1306.Initialized = 1;
 8000d50:	4b02      	ldr	r3, [pc, #8]	; (8000d5c <ssd1306_Init+0xd4>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	725a      	strb	r2, [r3, #9]
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000084 	.word	0x20000084

08000d60 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(unsigned char x, unsigned char y, SSD1306_COLOR color) {
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	71bb      	strb	r3, [r7, #6]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db48      	blt.n	8000e0c <ssd1306_DrawPixel+0xac>
 8000d7a:	79bb      	ldrb	r3, [r7, #6]
 8000d7c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d7e:	d845      	bhi.n	8000e0c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8000d80:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <ssd1306_DrawPixel+0xb8>)
 8000d82:	7a1b      	ldrb	r3, [r3, #8]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d006      	beq.n	8000d96 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8000d88:	797b      	ldrb	r3, [r7, #5]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	bf0c      	ite	eq
 8000d8e:	2301      	moveq	r3, #1
 8000d90:	2300      	movne	r3, #0
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if(color == White) {
 8000d96:	797b      	ldrb	r3, [r7, #5]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d11a      	bne.n	8000dd2 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d9c:	79fa      	ldrb	r2, [r7, #7]
 8000d9e:	79bb      	ldrb	r3, [r7, #6]
 8000da0:	08db      	lsrs	r3, r3, #3
 8000da2:	b2d8      	uxtb	r0, r3
 8000da4:	4603      	mov	r3, r0
 8000da6:	01db      	lsls	r3, r3, #7
 8000da8:	4413      	add	r3, r2
 8000daa:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <ssd1306_DrawPixel+0xbc>)
 8000dac:	5cd3      	ldrb	r3, [r2, r3]
 8000dae:	b25a      	sxtb	r2, r3
 8000db0:	79bb      	ldrb	r3, [r7, #6]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	2101      	movs	r1, #1
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	b259      	sxtb	r1, r3
 8000dc2:	79fa      	ldrb	r2, [r7, #7]
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	01db      	lsls	r3, r3, #7
 8000dc8:	4413      	add	r3, r2
 8000dca:	b2c9      	uxtb	r1, r1
 8000dcc:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <ssd1306_DrawPixel+0xbc>)
 8000dce:	54d1      	strb	r1, [r2, r3]
 8000dd0:	e01d      	b.n	8000e0e <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	79bb      	ldrb	r3, [r7, #6]
 8000dd6:	08db      	lsrs	r3, r3, #3
 8000dd8:	b2d8      	uxtb	r0, r3
 8000dda:	4603      	mov	r3, r0
 8000ddc:	01db      	lsls	r3, r3, #7
 8000dde:	4413      	add	r3, r2
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <ssd1306_DrawPixel+0xbc>)
 8000de2:	5cd3      	ldrb	r3, [r2, r3]
 8000de4:	b25a      	sxtb	r2, r3
 8000de6:	79bb      	ldrb	r3, [r7, #6]
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	2101      	movs	r1, #1
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	b25b      	sxtb	r3, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	b25b      	sxtb	r3, r3
 8000df8:	4013      	ands	r3, r2
 8000dfa:	b259      	sxtb	r1, r3
 8000dfc:	79fa      	ldrb	r2, [r7, #7]
 8000dfe:	4603      	mov	r3, r0
 8000e00:	01db      	lsls	r3, r3, #7
 8000e02:	4413      	add	r3, r2
 8000e04:	b2c9      	uxtb	r1, r1
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <ssd1306_DrawPixel+0xbc>)
 8000e08:	54d1      	strb	r1, [r2, r3]
 8000e0a:	e000      	b.n	8000e0e <ssd1306_DrawPixel+0xae>
        return;
 8000e0c:	bf00      	nop
    }
}
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000084 	.word	0x20000084
 8000e1c:	20000090 	.word	0x20000090

08000e20 <ssd1306_SetCursor>:
void ssd1306_SetCursor(unsigned char x, unsigned char y) {
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	460a      	mov	r2, r1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <ssd1306_SetCursor+0x28>)
 8000e34:	6013      	str	r3, [r2, #0]
    SSD1306.CurrentY = y;
 8000e36:	79bb      	ldrb	r3, [r7, #6]
 8000e38:	4a03      	ldr	r2, [pc, #12]	; (8000e48 <ssd1306_SetCursor+0x28>)
 8000e3a:	6053      	str	r3, [r2, #4]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000084 	.word	0x20000084

08000e4c <ssd1306_ClearScreen>:
 void ssd1306_ClearScreen()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff fec5 	bl	8000be0 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8000e56:	f7ff fee5 	bl	8000c24 <ssd1306_UpdateScreen>
    ssd1306_SetCursor(0,0);
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f7ff ffdf 	bl	8000e20 <ssd1306_SetCursor>
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4604      	mov	r4, r0
 8000e70:	1d38      	adds	r0, r7, #4
 8000e72:	e880 0006 	stmia.w	r0, {r1, r2}
 8000e76:	461a      	mov	r2, r3
 8000e78:	4623      	mov	r3, r4
 8000e7a:	73fb      	strb	r3, [r7, #15]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	73bb      	strb	r3, [r7, #14]
    unsigned int i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	2b1f      	cmp	r3, #31
 8000e84:	d902      	bls.n	8000e8c <ssd1306_WriteChar+0x24>
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	2b7e      	cmp	r3, #126	; 0x7e
 8000e8a:	d901      	bls.n	8000e90 <ssd1306_WriteChar+0x28>
        return 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e082      	b.n	8000f96 <ssd1306_WriteChar+0x12e>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000e90:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	793a      	ldrb	r2, [r7, #4]
 8000e96:	4413      	add	r3, r2
 8000e98:	2b80      	cmp	r3, #128	; 0x80
 8000e9a:	d805      	bhi.n	8000ea8 <ssd1306_WriteChar+0x40>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000e9c:	4b40      	ldr	r3, [pc, #256]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	797a      	ldrb	r2, [r7, #5]
 8000ea2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000ea4:	2b40      	cmp	r3, #64	; 0x40
 8000ea6:	d91a      	bls.n	8000ede <ssd1306_WriteChar+0x76>
    {
        // Not enough space on current line
        if(SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth))
 8000ea8:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	793a      	ldrb	r2, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	2b80      	cmp	r3, #128	; 0x80
 8000eb2:	d912      	bls.n	8000eda <ssd1306_WriteChar+0x72>
        {
            if(SSD1306_HEIGHT > (SSD1306.CurrentY + Font.FontHeight))
 8000eb4:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	797a      	ldrb	r2, [r7, #5]
 8000eba:	4413      	add	r3, r2
 8000ebc:	2b3f      	cmp	r3, #63	; 0x3f
 8000ebe:	d80a      	bhi.n	8000ed6 <ssd1306_WriteChar+0x6e>
            {
                ssd1306_SetCursor(0,SSD1306.CurrentY+Font.FontHeight);
 8000ec0:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	797b      	ldrb	r3, [r7, #5]
 8000ec8:	4413      	add	r3, r2
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4619      	mov	r1, r3
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f7ff ffa6 	bl	8000e20 <ssd1306_SetCursor>
 8000ed4:	e001      	b.n	8000eda <ssd1306_WriteChar+0x72>
            }
            else
            {
                ssd1306_ClearScreen();
 8000ed6:	f7ff ffb9 	bl	8000e4c <ssd1306_ClearScreen>
//            else if(SSD1306_WIDTH > (SSD1306.CurrentX + Font.FontWIDTH))
//            {
//                ssd1306_SetCursor(SSD1306.CurrentX+1,0);
//            }
        }
        return 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e05b      	b.n	8000f96 <ssd1306_WriteChar+0x12e>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	e04c      	b.n	8000f7e <ssd1306_WriteChar+0x116>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	3b20      	subs	r3, #32
 8000eea:	7979      	ldrb	r1, [r7, #5]
 8000eec:	fb01 f303 	mul.w	r3, r1, r3
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	440b      	add	r3, r1
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
 8000f02:	e034      	b.n	8000f6e <ssd1306_WriteChar+0x106>
            if((b << j) & 0x8000)  {
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d012      	beq.n	8000f3a <ssd1306_WriteChar+0xd2>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	4413      	add	r3, r2
 8000f20:	b2d8      	uxtb	r0, r3
 8000f22:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	7bba      	ldrb	r2, [r7, #14]
 8000f32:	4619      	mov	r1, r3
 8000f34:	f7ff ff14 	bl	8000d60 <ssd1306_DrawPixel>
 8000f38:	e016      	b.n	8000f68 <ssd1306_WriteChar+0x100>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	4413      	add	r3, r2
 8000f46:	b2d8      	uxtb	r0, r3
 8000f48:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4413      	add	r3, r2
 8000f54:	b2d9      	uxtb	r1, r3
 8000f56:	7bbb      	ldrb	r3, [r7, #14]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf0c      	ite	eq
 8000f5c:	2301      	moveq	r3, #1
 8000f5e:	2300      	movne	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	461a      	mov	r2, r3
 8000f64:	f7ff fefc 	bl	8000d60 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	61bb      	str	r3, [r7, #24]
 8000f6e:	793b      	ldrb	r3, [r7, #4]
 8000f70:	461a      	mov	r2, r3
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d3c5      	bcc.n	8000f04 <ssd1306_WriteChar+0x9c>
    for(i = 0; i < Font.FontHeight; i++) {
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	797b      	ldrb	r3, [r7, #5]
 8000f80:	461a      	mov	r2, r3
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d3ad      	bcc.n	8000ee4 <ssd1306_WriteChar+0x7c>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	793a      	ldrb	r2, [r7, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a03      	ldr	r2, [pc, #12]	; (8000fa0 <ssd1306_WriteChar+0x138>)
 8000f92:	6013      	str	r3, [r2, #0]

    // Return written char for validation
    return ch;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd90      	pop	{r4, r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000084 	.word	0x20000084

08000fa4 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	1d38      	adds	r0, r7, #4
 8000fae:	e880 0006 	stmia.w	r0, {r1, r2}
 8000fb2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000fb4:	e012      	b.n	8000fdc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	7818      	ldrb	r0, [r3, #0]
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	1d3a      	adds	r2, r7, #4
 8000fbe:	ca06      	ldmia	r2, {r1, r2}
 8000fc0:	f7ff ff52 	bl	8000e68 <ssd1306_WriteChar>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d002      	beq.n	8000fd6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	e008      	b.n	8000fe8 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1e8      	bne.n	8000fb6 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <my_spi_write16>:
	ad9833_tri=1
};


void my_spi_write16(SPI_HandleTypeDef *hspi,uint16_t my_data,GPIO_TypeDef *SLAVE_GPIO,uint16_t SLAVE_GPIO_PIN)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	817b      	strh	r3, [r7, #10]
 8001000:	4613      	mov	r3, r2
 8001002:	813b      	strh	r3, [r7, #8]

//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
//	HAL_Delay(1);
//	HAL_GPIO_WritePin(SLAVE_GPIO, SLAVE_GPIO_PIN, 0);
//	HAL_Delay(10);
	HAL_SPI_Transmit(hspi, my_data, 2, 800);
 8001004:	897b      	ldrh	r3, [r7, #10]
 8001006:	4619      	mov	r1, r3
 8001008:	f44f 7348 	mov.w	r3, #800	; 0x320
 800100c:	2202      	movs	r2, #2
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f001 fe49 	bl	8002ca6 <HAL_SPI_Transmit>
//	HAL_Delay(5);
//	HAL_GPIO_WritePin(SLAVE_GPIO, SLAVE_GPIO_PIN, 1);

}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <ad9833_send_command>:
void ad9833_send_command(uint16_t command)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
	my_spi_write16(&hspi1,command, GPIOB,GPIO_PIN_0);
 8001026:	88f9      	ldrh	r1, [r7, #6]
 8001028:	2301      	movs	r3, #1
 800102a:	4a04      	ldr	r2, [pc, #16]	; (800103c <ad9833_send_command+0x20>)
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <ad9833_send_command+0x24>)
 800102e:	f7ff ffdf 	bl	8000ff0 <my_spi_write16>

}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40010c00 	.word	0x40010c00
 8001040:	20000490 	.word	0x20000490
 8001044:	00000000 	.word	0x00000000

08001048 <ad9833_set_mode_and_freq>:
#define ad9833_send_data ad9833_send_command


void ad9833_set_mode_and_freq(char mode,uint32_t freq )
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
	if(!mode)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d104      	bne.n	8001064 <ad9833_set_mode_and_freq+0x1c>
		ad9833_send_command( 1<<13 ); ///sin mode
 800105a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800105e:	f7ff ffdd 	bl	800101c <ad9833_send_command>
 8001062:	e003      	b.n	800106c <ad9833_set_mode_and_freq+0x24>
	else
		ad9833_send_command( 1<<13 | 1<<1); //tri mode
 8001064:	f242 0002 	movw	r0, #8194	; 0x2002
 8001068:	f7ff ffd8 	bl	800101c <ad9833_send_command>


	freq = (float)freq*10.73741824;
 800106c:	6838      	ldr	r0, [r7, #0]
 800106e:	f7ff fd13 	bl	8000a98 <__aeabi_ui2f>
 8001072:	4603      	mov	r3, r0
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff f9cf 	bl	8000418 <__aeabi_f2d>
 800107a:	a317      	add	r3, pc, #92	; (adr r3, 80010d8 <ad9833_set_mode_and_freq+0x90>)
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff fa22 	bl	80004c8 <__aeabi_dmul>
 8001084:	4603      	mov	r3, r0
 8001086:	460c      	mov	r4, r1
 8001088:	4618      	mov	r0, r3
 800108a:	4621      	mov	r1, r4
 800108c:	f7ff fc2e 	bl	80008ec <__aeabi_d2uiz>
 8001090:	4603      	mov	r3, r0
 8001092:	603b      	str	r3, [r7, #0]

	//send lsb first
	ad9833_send_data((freq%(0xffff))| 1<<14);
 8001094:	6839      	ldr	r1, [r7, #0]
 8001096:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <ad9833_set_mode_and_freq+0x98>)
 8001098:	fba3 2301 	umull	r2, r3, r3, r1
 800109c:	0bda      	lsrs	r2, r3, #15
 800109e:	4613      	mov	r3, r2
 80010a0:	041b      	lsls	r3, r3, #16
 80010a2:	1a9b      	subs	r3, r3, r2
 80010a4:	1aca      	subs	r2, r1, r3
 80010a6:	b293      	uxth	r3, r2
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ffb4 	bl	800101c <ad9833_send_command>
	ad9833_send_data((freq/(0xffff))| 1<<14);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <ad9833_set_mode_and_freq+0x98>)
 80010b8:	fba2 2303 	umull	r2, r3, r2, r3
 80010bc:	0bdb      	lsrs	r3, r3, #15
 80010be:	b29b      	uxth	r3, r3
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ffa8 	bl	800101c <ad9833_send_command>


	//#268435456/25000000=10.73741824
	//   freg*(fref/2^28 )  // in my case fref is 25mhz
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd90      	pop	{r4, r7, pc}
 80010d4:	f3af 8000 	nop.w
 80010d8:	e2308c3a 	.word	0xe2308c3a
 80010dc:	4025798e 	.word	0x4025798e
 80010e0:	80008001 	.word	0x80008001

080010e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e8:	f000 fa50 	bl	800158c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ec:	f000 f828 	bl	8001140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f0:	f000 f8c8 	bl	8001284 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010f4:	f000 f860 	bl	80011b8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80010f8:	f000 f88c 	bl	8001214 <MX_SPI1_Init>
//asd
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ssd1306_Init();
 80010fc:	f7ff fdc4 	bl	8000c88 <ssd1306_Init>

  ssd1306_Fill(Black);
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff fd6d 	bl	8000be0 <ssd1306_Fill>
  ssd1306_WriteString("salam chetori", Font_7x10, White);
 8001106:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <main+0x50>)
 8001108:	2301      	movs	r3, #1
 800110a:	ca06      	ldmia	r2, {r1, r2}
 800110c:	480a      	ldr	r0, [pc, #40]	; (8001138 <main+0x54>)
 800110e:	f7ff ff49 	bl	8000fa4 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8001112:	f7ff fd87 	bl	8000c24 <ssd1306_UpdateScreen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ad9833_set_mode_and_freq(ad9833_tri, 1);
 8001116:	2101      	movs	r1, #1
 8001118:	2001      	movs	r0, #1
 800111a:	f7ff ff95 	bl	8001048 <ad9833_set_mode_and_freq>

	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800111e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <main+0x58>)
 8001124:	f000 fd0c 	bl	8001b40 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112c:	f000 fa90 	bl	8001650 <HAL_Delay>
	  ad9833_set_mode_and_freq(ad9833_tri, 1);
 8001130:	e7f1      	b.n	8001116 <main+0x32>
 8001132:	bf00      	nop
 8001134:	20000000 	.word	0x20000000
 8001138:	08003094 	.word	0x08003094
 800113c:	40011000 	.word	0x40011000

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b090      	sub	sp, #64	; 0x40
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0318 	add.w	r3, r7, #24
 800114a:	2228      	movs	r2, #40	; 0x28
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f001 ff8a 	bl	8003068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001162:	2302      	movs	r3, #2
 8001164:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001166:	2301      	movs	r3, #1
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116a:	2310      	movs	r3, #16
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800116e:	2300      	movs	r3, #0
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001172:	f107 0318 	add.w	r3, r7, #24
 8001176:	4618      	mov	r0, r3
 8001178:	f001 f92c 	bl	80023d4 <HAL_RCC_OscConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001182:	f000 f8cb 	bl	800131c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001186:	230f      	movs	r3, #15
 8001188:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 fb98 	bl	80028d4 <HAL_RCC_ClockConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80011aa:	f000 f8b7 	bl	800131c <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3740      	adds	r7, #64	; 0x40
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_I2C1_Init+0x50>)
 80011be:	4a13      	ldr	r2, [pc, #76]	; (800120c <MX_I2C1_Init+0x54>)
 80011c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_I2C1_Init+0x50>)
 80011c4:	4a12      	ldr	r2, [pc, #72]	; (8001210 <MX_I2C1_Init+0x58>)
 80011c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_I2C1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_I2C1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_I2C1_Init+0x50>)
 80011d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <MX_I2C1_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_I2C1_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <MX_I2C1_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_I2C1_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_I2C1_Init+0x50>)
 80011f6:	f000 fcbb 	bl	8001b70 <HAL_I2C_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001200:	f000 f88c 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000030 	.word	0x20000030
 800120c:	40005400 	.word	0x40005400
 8001210:	000186a0 	.word	0x000186a0

08001214 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_SPI1_Init+0x68>)
 800121a:	4a19      	ldr	r2, [pc, #100]	; (8001280 <MX_SPI1_Init+0x6c>)
 800121c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_SPI1_Init+0x68>)
 8001220:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001224:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <MX_SPI1_Init+0x68>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_SPI1_Init+0x68>)
 800122e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001232:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_SPI1_Init+0x68>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800123a:	4b10      	ldr	r3, [pc, #64]	; (800127c <MX_SPI1_Init+0x68>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_SPI1_Init+0x68>)
 8001242:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001246:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_SPI1_Init+0x68>)
 800124a:	2220      	movs	r2, #32
 800124c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800124e:	4b0b      	ldr	r3, [pc, #44]	; (800127c <MX_SPI1_Init+0x68>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_SPI1_Init+0x68>)
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <MX_SPI1_Init+0x68>)
 800125c:	2200      	movs	r2, #0
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_SPI1_Init+0x68>)
 8001262:	220a      	movs	r2, #10
 8001264:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_SPI1_Init+0x68>)
 8001268:	f001 fcbc 	bl	8002be4 <HAL_SPI_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001272:	f000 f853 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000490 	.word	0x20000490
 8001280:	40013000 	.word	0x40013000

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001298:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <MX_GPIO_Init+0x90>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a1d      	ldr	r2, [pc, #116]	; (8001314 <MX_GPIO_Init+0x90>)
 800129e:	f043 0310 	orr.w	r3, r3, #16
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <MX_GPIO_Init+0x90>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0310 	and.w	r3, r3, #16
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_GPIO_Init+0x90>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a17      	ldr	r2, [pc, #92]	; (8001314 <MX_GPIO_Init+0x90>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b15      	ldr	r3, [pc, #84]	; (8001314 <MX_GPIO_Init+0x90>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <MX_GPIO_Init+0x90>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a11      	ldr	r2, [pc, #68]	; (8001314 <MX_GPIO_Init+0x90>)
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_GPIO_Init+0x90>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012e0:	2200      	movs	r2, #0
 80012e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e6:	480c      	ldr	r0, [pc, #48]	; (8001318 <MX_GPIO_Init+0x94>)
 80012e8:	f000 fc12 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4619      	mov	r1, r3
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_GPIO_Init+0x94>)
 8001306:	f000 faa9 	bl	800185c <HAL_GPIO_Init>

}
 800130a:	bf00      	nop
 800130c:	3720      	adds	r7, #32
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	40011000 	.word	0x40011000

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_MspInit+0x5c>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	4a14      	ldr	r2, [pc, #80]	; (8001384 <HAL_MspInit+0x5c>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6193      	str	r3, [r2, #24]
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_MspInit+0x5c>)
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <HAL_MspInit+0x5c>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <HAL_MspInit+0x5c>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	61d3      	str	r3, [r2, #28]
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_MspInit+0x5c>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_MspInit+0x60>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <HAL_MspInit+0x60>)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	40021000 	.word	0x40021000
 8001388:	40010000 	.word	0x40010000

0800138c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a15      	ldr	r2, [pc, #84]	; (80013fc <HAL_I2C_MspInit+0x70>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d123      	bne.n	80013f4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <HAL_I2C_MspInit+0x74>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a13      	ldr	r2, [pc, #76]	; (8001400 <HAL_I2C_MspInit+0x74>)
 80013b2:	f043 0308 	orr.w	r3, r3, #8
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_I2C_MspInit+0x74>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013c4:	23c0      	movs	r3, #192	; 0xc0
 80013c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c8:	2312      	movs	r3, #18
 80013ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	4619      	mov	r1, r3
 80013d6:	480b      	ldr	r0, [pc, #44]	; (8001404 <HAL_I2C_MspInit+0x78>)
 80013d8:	f000 fa40 	bl	800185c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_I2C_MspInit+0x74>)
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <HAL_I2C_MspInit+0x74>)
 80013e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013e6:	61d3      	str	r3, [r2, #28]
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_I2C_MspInit+0x74>)
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40005400 	.word	0x40005400
 8001400:	40021000 	.word	0x40021000
 8001404:	40010c00 	.word	0x40010c00

08001408 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a15      	ldr	r2, [pc, #84]	; (8001478 <HAL_SPI_MspInit+0x70>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d123      	bne.n	8001470 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_SPI_MspInit+0x74>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a13      	ldr	r2, [pc, #76]	; (800147c <HAL_SPI_MspInit+0x74>)
 800142e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_SPI_MspInit+0x74>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_SPI_MspInit+0x74>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a0d      	ldr	r2, [pc, #52]	; (800147c <HAL_SPI_MspInit+0x74>)
 8001446:	f043 0304 	orr.w	r3, r3, #4
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_SPI_MspInit+0x74>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001458:	23b0      	movs	r3, #176	; 0xb0
 800145a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <HAL_SPI_MspInit+0x78>)
 800146c:	f000 f9f6 	bl	800185c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40013000 	.word	0x40013000
 800147c:	40021000 	.word	0x40021000
 8001480:	40010800 	.word	0x40010800

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <HardFault_Handler+0x4>

08001496 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <MemManage_Handler+0x4>

0800149c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <BusFault_Handler+0x4>

080014a2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <UsageFault_Handler+0x4>

080014a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d0:	f000 f8a2 	bl	8001618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80014dc:	4b15      	ldr	r3, [pc, #84]	; (8001534 <SystemInit+0x5c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a14      	ldr	r2, [pc, #80]	; (8001534 <SystemInit+0x5c>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <SystemInit+0x5c>)
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	4911      	ldr	r1, [pc, #68]	; (8001534 <SystemInit+0x5c>)
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <SystemInit+0x60>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <SystemInit+0x5c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <SystemInit+0x5c>)
 80014fa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80014fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001502:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <SystemInit+0x5c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <SystemInit+0x5c>)
 800150a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <SystemInit+0x5c>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <SystemInit+0x5c>)
 8001516:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800151a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <SystemInit+0x5c>)
 800151e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001522:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <SystemInit+0x64>)
 8001526:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800152a:	609a      	str	r2, [r3, #8]
#endif 
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	40021000 	.word	0x40021000
 8001538:	f8ff0000 	.word	0xf8ff0000
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001540:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001542:	e003      	b.n	800154c <LoopCopyDataInit>

08001544 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001546:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001548:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800154a:	3104      	adds	r1, #4

0800154c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800154c:	480a      	ldr	r0, [pc, #40]	; (8001578 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001550:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001552:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001554:	d3f6      	bcc.n	8001544 <CopyDataInit>
  ldr r2, =_sbss
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001558:	e002      	b.n	8001560 <LoopFillZerobss>

0800155a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800155c:	f842 3b04 	str.w	r3, [r2], #4

08001560 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001562:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001564:	d3f9      	bcc.n	800155a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001566:	f7ff ffb7 	bl	80014d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156a:	f001 fd59 	bl	8003020 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800156e:	f7ff fdb9 	bl	80010e4 <main>
  bx lr
 8001572:	4770      	bx	lr
  ldr r3, =_sidata
 8001574:	08003fb0 	.word	0x08003fb0
  ldr r0, =_sdata
 8001578:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800157c:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8001580:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8001584:	200004ec 	.word	0x200004ec

08001588 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001588:	e7fe      	b.n	8001588 <ADC1_2_IRQHandler>
	...

0800158c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_Init+0x28>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <HAL_Init+0x28>)
 8001596:	f043 0310 	orr.w	r3, r3, #16
 800159a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159c:	2003      	movs	r0, #3
 800159e:	f000 f929 	bl	80017f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f000 f808 	bl	80015b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a8:	f7ff febe 	bl	8001328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40022000 	.word	0x40022000

080015b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_InitTick+0x54>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_InitTick+0x58>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f933 	bl	8001842 <HAL_SYSTICK_Config>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00e      	b.n	8001604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d80a      	bhi.n	8001602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ec:	2200      	movs	r2, #0
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f4:	f000 f909 	bl	800180a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f8:	4a06      	ldr	r2, [pc, #24]	; (8001614 <HAL_InitTick+0x5c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000008 	.word	0x20000008
 8001610:	20000010 	.word	0x20000010
 8001614:	2000000c 	.word	0x2000000c

08001618 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_IncTick+0x1c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_IncTick+0x20>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4413      	add	r3, r2
 8001628:	4a03      	ldr	r2, [pc, #12]	; (8001638 <HAL_IncTick+0x20>)
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	20000010 	.word	0x20000010
 8001638:	200004e8 	.word	0x200004e8

0800163c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return uwTick;
 8001640:	4b02      	ldr	r3, [pc, #8]	; (800164c <HAL_GetTick+0x10>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	200004e8 	.word	0x200004e8

08001650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001658:	f7ff fff0 	bl	800163c <HAL_GetTick>
 800165c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001668:	d005      	beq.n	8001676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_Delay+0x40>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4413      	add	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001676:	bf00      	nop
 8001678:	f7ff ffe0 	bl	800163c <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	429a      	cmp	r2, r3
 8001686:	d8f7      	bhi.n	8001678 <HAL_Delay+0x28>
  {
  }
}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000010 	.word	0x20000010

08001694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016b0:	4013      	ands	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c6:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	60d3      	str	r3, [r2, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <__NVIC_GetPriorityGrouping+0x18>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	f003 0307 	and.w	r3, r3, #7
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	db0a      	blt.n	8001722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	b2da      	uxtb	r2, r3
 8001710:	490c      	ldr	r1, [pc, #48]	; (8001744 <__NVIC_SetPriority+0x4c>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	0112      	lsls	r2, r2, #4
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	440b      	add	r3, r1
 800171c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001720:	e00a      	b.n	8001738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4908      	ldr	r1, [pc, #32]	; (8001748 <__NVIC_SetPriority+0x50>)
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	3b04      	subs	r3, #4
 8001730:	0112      	lsls	r2, r2, #4
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	440b      	add	r3, r1
 8001736:	761a      	strb	r2, [r3, #24]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000e100 	.word	0xe000e100
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	; 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f1c3 0307 	rsb	r3, r3, #7
 8001766:	2b04      	cmp	r3, #4
 8001768:	bf28      	it	cs
 800176a:	2304      	movcs	r3, #4
 800176c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3304      	adds	r3, #4
 8001772:	2b06      	cmp	r3, #6
 8001774:	d902      	bls.n	800177c <NVIC_EncodePriority+0x30>
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3b03      	subs	r3, #3
 800177a:	e000      	b.n	800177e <NVIC_EncodePriority+0x32>
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	401a      	ands	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001794:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	43d9      	mvns	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	4313      	orrs	r3, r2
         );
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3724      	adds	r7, #36	; 0x24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c0:	d301      	bcc.n	80017c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00f      	b.n	80017e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <SysTick_Config+0x40>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ce:	210f      	movs	r1, #15
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017d4:	f7ff ff90 	bl	80016f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <SysTick_Config+0x40>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <SysTick_Config+0x40>)
 80017e0:	2207      	movs	r2, #7
 80017e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	e000e010 	.word	0xe000e010

080017f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ff49 	bl	8001694 <__NVIC_SetPriorityGrouping>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800181c:	f7ff ff5e 	bl	80016dc <__NVIC_GetPriorityGrouping>
 8001820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	6978      	ldr	r0, [r7, #20]
 8001828:	f7ff ff90 	bl	800174c <NVIC_EncodePriority>
 800182c:	4602      	mov	r2, r0
 800182e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff5f 	bl	80016f8 <__NVIC_SetPriority>
}
 800183a:	bf00      	nop
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ffb0 	bl	80017b0 <SysTick_Config>
 8001850:	4603      	mov	r3, r0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800185c:	b480      	push	{r7}
 800185e:	b08b      	sub	sp, #44	; 0x2c
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001866:	2300      	movs	r3, #0
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186e:	e127      	b.n	8001ac0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001870:	2201      	movs	r2, #1
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	429a      	cmp	r2, r3
 800188a:	f040 8116 	bne.w	8001aba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b12      	cmp	r3, #18
 8001894:	d034      	beq.n	8001900 <HAL_GPIO_Init+0xa4>
 8001896:	2b12      	cmp	r3, #18
 8001898:	d80d      	bhi.n	80018b6 <HAL_GPIO_Init+0x5a>
 800189a:	2b02      	cmp	r3, #2
 800189c:	d02b      	beq.n	80018f6 <HAL_GPIO_Init+0x9a>
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d804      	bhi.n	80018ac <HAL_GPIO_Init+0x50>
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d031      	beq.n	800190a <HAL_GPIO_Init+0xae>
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d01c      	beq.n	80018e4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018aa:	e048      	b.n	800193e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d043      	beq.n	8001938 <HAL_GPIO_Init+0xdc>
 80018b0:	2b11      	cmp	r3, #17
 80018b2:	d01b      	beq.n	80018ec <HAL_GPIO_Init+0x90>
          break;
 80018b4:	e043      	b.n	800193e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018b6:	4a89      	ldr	r2, [pc, #548]	; (8001adc <HAL_GPIO_Init+0x280>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d026      	beq.n	800190a <HAL_GPIO_Init+0xae>
 80018bc:	4a87      	ldr	r2, [pc, #540]	; (8001adc <HAL_GPIO_Init+0x280>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d806      	bhi.n	80018d0 <HAL_GPIO_Init+0x74>
 80018c2:	4a87      	ldr	r2, [pc, #540]	; (8001ae0 <HAL_GPIO_Init+0x284>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d020      	beq.n	800190a <HAL_GPIO_Init+0xae>
 80018c8:	4a86      	ldr	r2, [pc, #536]	; (8001ae4 <HAL_GPIO_Init+0x288>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d01d      	beq.n	800190a <HAL_GPIO_Init+0xae>
          break;
 80018ce:	e036      	b.n	800193e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80018d0:	4a85      	ldr	r2, [pc, #532]	; (8001ae8 <HAL_GPIO_Init+0x28c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d019      	beq.n	800190a <HAL_GPIO_Init+0xae>
 80018d6:	4a85      	ldr	r2, [pc, #532]	; (8001aec <HAL_GPIO_Init+0x290>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d016      	beq.n	800190a <HAL_GPIO_Init+0xae>
 80018dc:	4a84      	ldr	r2, [pc, #528]	; (8001af0 <HAL_GPIO_Init+0x294>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d013      	beq.n	800190a <HAL_GPIO_Init+0xae>
          break;
 80018e2:	e02c      	b.n	800193e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	623b      	str	r3, [r7, #32]
          break;
 80018ea:	e028      	b.n	800193e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	3304      	adds	r3, #4
 80018f2:	623b      	str	r3, [r7, #32]
          break;
 80018f4:	e023      	b.n	800193e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	3308      	adds	r3, #8
 80018fc:	623b      	str	r3, [r7, #32]
          break;
 80018fe:	e01e      	b.n	800193e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	330c      	adds	r3, #12
 8001906:	623b      	str	r3, [r7, #32]
          break;
 8001908:	e019      	b.n	800193e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001912:	2304      	movs	r3, #4
 8001914:	623b      	str	r3, [r7, #32]
          break;
 8001916:	e012      	b.n	800193e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d105      	bne.n	800192c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001920:	2308      	movs	r3, #8
 8001922:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	611a      	str	r2, [r3, #16]
          break;
 800192a:	e008      	b.n	800193e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800192c:	2308      	movs	r3, #8
 800192e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	615a      	str	r2, [r3, #20]
          break;
 8001936:	e002      	b.n	800193e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
          break;
 800193c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2bff      	cmp	r3, #255	; 0xff
 8001942:	d801      	bhi.n	8001948 <HAL_GPIO_Init+0xec>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	e001      	b.n	800194c <HAL_GPIO_Init+0xf0>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3304      	adds	r3, #4
 800194c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	2bff      	cmp	r3, #255	; 0xff
 8001952:	d802      	bhi.n	800195a <HAL_GPIO_Init+0xfe>
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	e002      	b.n	8001960 <HAL_GPIO_Init+0x104>
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	3b08      	subs	r3, #8
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	210f      	movs	r1, #15
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	401a      	ands	r2, r3
 8001972:	6a39      	ldr	r1, [r7, #32]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	431a      	orrs	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 8096 	beq.w	8001aba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800198e:	4b59      	ldr	r3, [pc, #356]	; (8001af4 <HAL_GPIO_Init+0x298>)
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	4a58      	ldr	r2, [pc, #352]	; (8001af4 <HAL_GPIO_Init+0x298>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6193      	str	r3, [r2, #24]
 800199a:	4b56      	ldr	r3, [pc, #344]	; (8001af4 <HAL_GPIO_Init+0x298>)
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019a6:	4a54      	ldr	r2, [pc, #336]	; (8001af8 <HAL_GPIO_Init+0x29c>)
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	220f      	movs	r2, #15
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4013      	ands	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4b      	ldr	r2, [pc, #300]	; (8001afc <HAL_GPIO_Init+0x2a0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d013      	beq.n	80019fa <HAL_GPIO_Init+0x19e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4a      	ldr	r2, [pc, #296]	; (8001b00 <HAL_GPIO_Init+0x2a4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d00d      	beq.n	80019f6 <HAL_GPIO_Init+0x19a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a49      	ldr	r2, [pc, #292]	; (8001b04 <HAL_GPIO_Init+0x2a8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d007      	beq.n	80019f2 <HAL_GPIO_Init+0x196>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a48      	ldr	r2, [pc, #288]	; (8001b08 <HAL_GPIO_Init+0x2ac>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d101      	bne.n	80019ee <HAL_GPIO_Init+0x192>
 80019ea:	2303      	movs	r3, #3
 80019ec:	e006      	b.n	80019fc <HAL_GPIO_Init+0x1a0>
 80019ee:	2304      	movs	r3, #4
 80019f0:	e004      	b.n	80019fc <HAL_GPIO_Init+0x1a0>
 80019f2:	2302      	movs	r3, #2
 80019f4:	e002      	b.n	80019fc <HAL_GPIO_Init+0x1a0>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <HAL_GPIO_Init+0x1a0>
 80019fa:	2300      	movs	r3, #0
 80019fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fe:	f002 0203 	and.w	r2, r2, #3
 8001a02:	0092      	lsls	r2, r2, #2
 8001a04:	4093      	lsls	r3, r2
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a0c:	493a      	ldr	r1, [pc, #232]	; (8001af8 <HAL_GPIO_Init+0x29c>)
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	089b      	lsrs	r3, r3, #2
 8001a12:	3302      	adds	r3, #2
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d006      	beq.n	8001a34 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a26:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <HAL_GPIO_Init+0x2b0>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4938      	ldr	r1, [pc, #224]	; (8001b0c <HAL_GPIO_Init+0x2b0>)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
 8001a32:	e006      	b.n	8001a42 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a34:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <HAL_GPIO_Init+0x2b0>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	4933      	ldr	r1, [pc, #204]	; (8001b0c <HAL_GPIO_Init+0x2b0>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d006      	beq.n	8001a5c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a4e:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <HAL_GPIO_Init+0x2b0>)
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	492e      	ldr	r1, [pc, #184]	; (8001b0c <HAL_GPIO_Init+0x2b0>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
 8001a5a:	e006      	b.n	8001a6a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a5c:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <HAL_GPIO_Init+0x2b0>)
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	4929      	ldr	r1, [pc, #164]	; (8001b0c <HAL_GPIO_Init+0x2b0>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a76:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <HAL_GPIO_Init+0x2b0>)
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	4924      	ldr	r1, [pc, #144]	; (8001b0c <HAL_GPIO_Init+0x2b0>)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
 8001a82:	e006      	b.n	8001a92 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a84:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <HAL_GPIO_Init+0x2b0>)
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	491f      	ldr	r1, [pc, #124]	; (8001b0c <HAL_GPIO_Init+0x2b0>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <HAL_GPIO_Init+0x2b0>)
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	491a      	ldr	r1, [pc, #104]	; (8001b0c <HAL_GPIO_Init+0x2b0>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	60cb      	str	r3, [r1, #12]
 8001aaa:	e006      	b.n	8001aba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <HAL_GPIO_Init+0x2b0>)
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	4915      	ldr	r1, [pc, #84]	; (8001b0c <HAL_GPIO_Init+0x2b0>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	3301      	adds	r3, #1
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f47f aed0 	bne.w	8001870 <HAL_GPIO_Init+0x14>
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	372c      	adds	r7, #44	; 0x2c
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	10210000 	.word	0x10210000
 8001ae0:	10110000 	.word	0x10110000
 8001ae4:	10120000 	.word	0x10120000
 8001ae8:	10310000 	.word	0x10310000
 8001aec:	10320000 	.word	0x10320000
 8001af0:	10220000 	.word	0x10220000
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010000 	.word	0x40010000
 8001afc:	40010800 	.word	0x40010800
 8001b00:	40010c00 	.word	0x40010c00
 8001b04:	40011000 	.word	0x40011000
 8001b08:	40011400 	.word	0x40011400
 8001b0c:	40010400 	.word	0x40010400

08001b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b20:	787b      	ldrb	r3, [r7, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b2c:	e003      	b.n	8001b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	041a      	lsls	r2, r3, #16
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	611a      	str	r2, [r3, #16]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	887b      	ldrh	r3, [r7, #2]
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b58:	887a      	ldrh	r2, [r7, #2]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001b5e:	e002      	b.n	8001b66 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b60:	887a      	ldrh	r2, [r7, #2]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	611a      	str	r2, [r3, #16]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e10f      	b.n	8001da2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d106      	bne.n	8001b9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fbf8 	bl	800138c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2224      	movs	r2, #36	; 0x24
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bb4:	f000 ffe4 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 8001bb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	4a7b      	ldr	r2, [pc, #492]	; (8001dac <HAL_I2C_Init+0x23c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d807      	bhi.n	8001bd4 <HAL_I2C_Init+0x64>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4a7a      	ldr	r2, [pc, #488]	; (8001db0 <HAL_I2C_Init+0x240>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	bf94      	ite	ls
 8001bcc:	2301      	movls	r3, #1
 8001bce:	2300      	movhi	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	e006      	b.n	8001be2 <HAL_I2C_Init+0x72>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4a77      	ldr	r2, [pc, #476]	; (8001db4 <HAL_I2C_Init+0x244>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	bf94      	ite	ls
 8001bdc:	2301      	movls	r3, #1
 8001bde:	2300      	movhi	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e0db      	b.n	8001da2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4a72      	ldr	r2, [pc, #456]	; (8001db8 <HAL_I2C_Init+0x248>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	0c9b      	lsrs	r3, r3, #18
 8001bf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a64      	ldr	r2, [pc, #400]	; (8001dac <HAL_I2C_Init+0x23c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d802      	bhi.n	8001c24 <HAL_I2C_Init+0xb4>
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	3301      	adds	r3, #1
 8001c22:	e009      	b.n	8001c38 <HAL_I2C_Init+0xc8>
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c2a:	fb02 f303 	mul.w	r3, r2, r3
 8001c2e:	4a63      	ldr	r2, [pc, #396]	; (8001dbc <HAL_I2C_Init+0x24c>)
 8001c30:	fba2 2303 	umull	r2, r3, r2, r3
 8001c34:	099b      	lsrs	r3, r3, #6
 8001c36:	3301      	adds	r3, #1
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4956      	ldr	r1, [pc, #344]	; (8001dac <HAL_I2C_Init+0x23c>)
 8001c54:	428b      	cmp	r3, r1
 8001c56:	d80d      	bhi.n	8001c74 <HAL_I2C_Init+0x104>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1e59      	subs	r1, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c66:	3301      	adds	r3, #1
 8001c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	bf38      	it	cc
 8001c70:	2304      	movcc	r3, #4
 8001c72:	e04f      	b.n	8001d14 <HAL_I2C_Init+0x1a4>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d111      	bne.n	8001ca0 <HAL_I2C_Init+0x130>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1e58      	subs	r0, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	440b      	add	r3, r1
 8001c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	bf0c      	ite	eq
 8001c98:	2301      	moveq	r3, #1
 8001c9a:	2300      	movne	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	e012      	b.n	8001cc6 <HAL_I2C_Init+0x156>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1e58      	subs	r0, r3, #1
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	0099      	lsls	r1, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf0c      	ite	eq
 8001cc0:	2301      	moveq	r3, #1
 8001cc2:	2300      	movne	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_I2C_Init+0x15e>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e022      	b.n	8001d14 <HAL_I2C_Init+0x1a4>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_I2C_Init+0x184>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1e58      	subs	r0, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6859      	ldr	r1, [r3, #4]
 8001cde:	460b      	mov	r3, r1
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	440b      	add	r3, r1
 8001ce4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf2:	e00f      	b.n	8001d14 <HAL_I2C_Init+0x1a4>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1e58      	subs	r0, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	0099      	lsls	r1, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	6809      	ldr	r1, [r1, #0]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6911      	ldr	r1, [r2, #16]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68d2      	ldr	r2, [r2, #12]
 8001d4e:	4311      	orrs	r1, r2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	000186a0 	.word	0x000186a0
 8001db0:	001e847f 	.word	0x001e847f
 8001db4:	003d08ff 	.word	0x003d08ff
 8001db8:	431bde83 	.word	0x431bde83
 8001dbc:	10624dd3 	.word	0x10624dd3

08001dc0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	4608      	mov	r0, r1
 8001dca:	4611      	mov	r1, r2
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4603      	mov	r3, r0
 8001dd0:	817b      	strh	r3, [r7, #10]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	813b      	strh	r3, [r7, #8]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dda:	f7ff fc2f 	bl	800163c <HAL_GetTick>
 8001dde:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b20      	cmp	r3, #32
 8001dea:	f040 80d9 	bne.w	8001fa0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2319      	movs	r3, #25
 8001df4:	2201      	movs	r2, #1
 8001df6:	496d      	ldr	r1, [pc, #436]	; (8001fac <HAL_I2C_Mem_Write+0x1ec>)
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 f965 	bl	80020c8 <I2C_WaitOnFlagUntilTimeout>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e04:	2302      	movs	r3, #2
 8001e06:	e0cc      	b.n	8001fa2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_I2C_Mem_Write+0x56>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e0c5      	b.n	8001fa2 <HAL_I2C_Mem_Write+0x1e2>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d007      	beq.n	8001e3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2221      	movs	r2, #33	; 0x21
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2240      	movs	r2, #64	; 0x40
 8001e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a3a      	ldr	r2, [r7, #32]
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4a4d      	ldr	r2, [pc, #308]	; (8001fb0 <HAL_I2C_Mem_Write+0x1f0>)
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e7e:	88f8      	ldrh	r0, [r7, #6]
 8001e80:	893a      	ldrh	r2, [r7, #8]
 8001e82:	8979      	ldrh	r1, [r7, #10]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	9301      	str	r3, [sp, #4]
 8001e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 f890 	bl	8001fb4 <I2C_RequestMemoryWrite>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d052      	beq.n	8001f40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e081      	b.n	8001fa2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f9e6 	bl	8002274 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00d      	beq.n	8001eca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d107      	bne.n	8001ec6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e06b      	b.n	8001fa2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	781a      	ldrb	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d11b      	bne.n	8001f40 <HAL_I2C_Mem_Write+0x180>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d017      	beq.n	8001f40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	781a      	ldrb	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1aa      	bne.n	8001e9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 f9d2 	bl	80022f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00d      	beq.n	8001f74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d107      	bne.n	8001f70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e016      	b.n	8001fa2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e000      	b.n	8001fa2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001fa0:	2302      	movs	r3, #2
  }
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	00100002 	.word	0x00100002
 8001fb0:	ffff0000 	.word	0xffff0000

08001fb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	4608      	mov	r0, r1
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	817b      	strh	r3, [r7, #10]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	813b      	strh	r3, [r7, #8]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 f86c 	bl	80020c8 <I2C_WaitOnFlagUntilTimeout>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e05f      	b.n	80020ba <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ffa:	897b      	ldrh	r3, [r7, #10]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002008:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	6a3a      	ldr	r2, [r7, #32]
 800200e:	492d      	ldr	r1, [pc, #180]	; (80020c4 <I2C_RequestMemoryWrite+0x110>)
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 f8b0 	bl	8002176 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e04c      	b.n	80020ba <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	695b      	ldr	r3, [r3, #20]
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002038:	6a39      	ldr	r1, [r7, #32]
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f91a 	bl	8002274 <I2C_WaitOnTXEFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00d      	beq.n	8002062 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	2b04      	cmp	r3, #4
 800204c:	d107      	bne.n	800205e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e02b      	b.n	80020ba <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d105      	bne.n	8002074 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002068:	893b      	ldrh	r3, [r7, #8]
 800206a:	b2da      	uxtb	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	611a      	str	r2, [r3, #16]
 8002072:	e021      	b.n	80020b8 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002074:	893b      	ldrh	r3, [r7, #8]
 8002076:	0a1b      	lsrs	r3, r3, #8
 8002078:	b29b      	uxth	r3, r3
 800207a:	b2da      	uxtb	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002084:	6a39      	ldr	r1, [r7, #32]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f8f4 	bl	8002274 <I2C_WaitOnTXEFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00d      	beq.n	80020ae <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	2b04      	cmp	r3, #4
 8002098:	d107      	bne.n	80020aa <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e005      	b.n	80020ba <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020ae:	893b      	ldrh	r3, [r7, #8]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	00010002 	.word	0x00010002

080020c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020d8:	e025      	b.n	8002126 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020e0:	d021      	beq.n	8002126 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e2:	f7ff faab 	bl	800163c <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d302      	bcc.n	80020f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d116      	bne.n	8002126 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f043 0220 	orr.w	r2, r3, #32
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e023      	b.n	800216e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	0c1b      	lsrs	r3, r3, #16
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d10d      	bne.n	800214c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	43da      	mvns	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4013      	ands	r3, r2
 800213c:	b29b      	uxth	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf0c      	ite	eq
 8002142:	2301      	moveq	r3, #1
 8002144:	2300      	movne	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	461a      	mov	r2, r3
 800214a:	e00c      	b.n	8002166 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	43da      	mvns	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4013      	ands	r3, r2
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	bf0c      	ite	eq
 800215e:	2301      	moveq	r3, #1
 8002160:	2300      	movne	r3, #0
 8002162:	b2db      	uxtb	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	429a      	cmp	r2, r3
 800216a:	d0b6      	beq.n	80020da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002184:	e051      	b.n	800222a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002194:	d123      	bne.n	80021de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f043 0204 	orr.w	r2, r3, #4
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e046      	b.n	800226c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e4:	d021      	beq.n	800222a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e6:	f7ff fa29 	bl	800163c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d302      	bcc.n	80021fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d116      	bne.n	800222a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2220      	movs	r2, #32
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f043 0220 	orr.w	r2, r3, #32
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e020      	b.n	800226c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b01      	cmp	r3, #1
 8002232:	d10c      	bne.n	800224e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4013      	ands	r3, r2
 8002240:	b29b      	uxth	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	bf14      	ite	ne
 8002246:	2301      	movne	r3, #1
 8002248:	2300      	moveq	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	e00b      	b.n	8002266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	43da      	mvns	r2, r3
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	4013      	ands	r3, r2
 800225a:	b29b      	uxth	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf14      	ite	ne
 8002260:	2301      	movne	r3, #1
 8002262:	2300      	moveq	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d18d      	bne.n	8002186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002280:	e02d      	b.n	80022de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f878 	bl	8002378 <I2C_IsAcknowledgeFailed>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e02d      	b.n	80022ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002298:	d021      	beq.n	80022de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229a:	f7ff f9cf 	bl	800163c <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d302      	bcc.n	80022b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d116      	bne.n	80022de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2220      	movs	r2, #32
 80022ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f043 0220 	orr.w	r2, r3, #32
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e007      	b.n	80022ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e8:	2b80      	cmp	r3, #128	; 0x80
 80022ea:	d1ca      	bne.n	8002282 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b084      	sub	sp, #16
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002302:	e02d      	b.n	8002360 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 f837 	bl	8002378 <I2C_IsAcknowledgeFailed>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e02d      	b.n	8002370 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800231a:	d021      	beq.n	8002360 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231c:	f7ff f98e 	bl	800163c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	429a      	cmp	r2, r3
 800232a:	d302      	bcc.n	8002332 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d116      	bne.n	8002360 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	f043 0220 	orr.w	r2, r3, #32
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e007      	b.n	8002370 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b04      	cmp	r3, #4
 800236c:	d1ca      	bne.n	8002304 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238e:	d11b      	bne.n	80023c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002398:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f043 0204 	orr.w	r2, r3, #4
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e26c      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8087 	beq.w	8002502 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023f4:	4b92      	ldr	r3, [pc, #584]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d00c      	beq.n	800241a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002400:	4b8f      	ldr	r3, [pc, #572]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b08      	cmp	r3, #8
 800240a:	d112      	bne.n	8002432 <HAL_RCC_OscConfig+0x5e>
 800240c:	4b8c      	ldr	r3, [pc, #560]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002418:	d10b      	bne.n	8002432 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241a:	4b89      	ldr	r3, [pc, #548]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d06c      	beq.n	8002500 <HAL_RCC_OscConfig+0x12c>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d168      	bne.n	8002500 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e246      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243a:	d106      	bne.n	800244a <HAL_RCC_OscConfig+0x76>
 800243c:	4b80      	ldr	r3, [pc, #512]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a7f      	ldr	r2, [pc, #508]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	e02e      	b.n	80024a8 <HAL_RCC_OscConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x98>
 8002452:	4b7b      	ldr	r3, [pc, #492]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a7a      	ldr	r2, [pc, #488]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b78      	ldr	r3, [pc, #480]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a77      	ldr	r2, [pc, #476]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e01d      	b.n	80024a8 <HAL_RCC_OscConfig+0xd4>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0xbc>
 8002476:	4b72      	ldr	r3, [pc, #456]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a71      	ldr	r2, [pc, #452]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b6f      	ldr	r3, [pc, #444]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a6e      	ldr	r2, [pc, #440]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0xd4>
 8002490:	4b6b      	ldr	r3, [pc, #428]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a6a      	ldr	r2, [pc, #424]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b68      	ldr	r3, [pc, #416]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a67      	ldr	r2, [pc, #412]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80024a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff f8c4 	bl	800163c <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff f8c0 	bl	800163c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e1fa      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b5d      	ldr	r3, [pc, #372]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0xe4>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff f8b0 	bl	800163c <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7ff f8ac 	bl	800163c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1e6      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f2:	4b53      	ldr	r3, [pc, #332]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x10c>
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d063      	beq.n	80025d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800250e:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800251a:	4b49      	ldr	r3, [pc, #292]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b08      	cmp	r3, #8
 8002524:	d11c      	bne.n	8002560 <HAL_RCC_OscConfig+0x18c>
 8002526:	4b46      	ldr	r3, [pc, #280]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d116      	bne.n	8002560 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002532:	4b43      	ldr	r3, [pc, #268]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_RCC_OscConfig+0x176>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d001      	beq.n	800254a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e1ba      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254a:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4939      	ldr	r1, [pc, #228]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	e03a      	b.n	80025d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d020      	beq.n	80025aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002568:	4b36      	ldr	r3, [pc, #216]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7ff f865 	bl	800163c <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002576:	f7ff f861 	bl	800163c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e19b      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002588:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4927      	ldr	r1, [pc, #156]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
 80025a8:	e015      	b.n	80025d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025aa:	4b26      	ldr	r3, [pc, #152]	; (8002644 <HAL_RCC_OscConfig+0x270>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7ff f844 	bl	800163c <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b8:	f7ff f840 	bl	800163c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e17a      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d03a      	beq.n	8002658 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d019      	beq.n	800261e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f0:	f7ff f824 	bl	800163c <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f8:	f7ff f820 	bl	800163c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e15a      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_RCC_OscConfig+0x26c>)
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002616:	2001      	movs	r0, #1
 8002618:	f000 fac6 	bl	8002ba8 <RCC_Delay>
 800261c:	e01c      	b.n	8002658 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_RCC_OscConfig+0x274>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002624:	f7ff f80a 	bl	800163c <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262a:	e00f      	b.n	800264c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262c:	f7ff f806 	bl	800163c <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d908      	bls.n	800264c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e140      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
 800263e:	bf00      	nop
 8002640:	40021000 	.word	0x40021000
 8002644:	42420000 	.word	0x42420000
 8002648:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	4b9e      	ldr	r3, [pc, #632]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1e9      	bne.n	800262c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80a6 	beq.w	80027b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002666:	2300      	movs	r3, #0
 8002668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266a:	4b97      	ldr	r3, [pc, #604]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10d      	bne.n	8002692 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	4b94      	ldr	r3, [pc, #592]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4a93      	ldr	r2, [pc, #588]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	61d3      	str	r3, [r2, #28]
 8002682:	4b91      	ldr	r3, [pc, #580]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268e:	2301      	movs	r3, #1
 8002690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	4b8e      	ldr	r3, [pc, #568]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d118      	bne.n	80026d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269e:	4b8b      	ldr	r3, [pc, #556]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a8a      	ldr	r2, [pc, #552]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026aa:	f7fe ffc7 	bl	800163c <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b2:	f7fe ffc3 	bl	800163c <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b64      	cmp	r3, #100	; 0x64
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e0fd      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	4b81      	ldr	r3, [pc, #516]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x312>
 80026d8:	4b7b      	ldr	r3, [pc, #492]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4a7a      	ldr	r2, [pc, #488]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6213      	str	r3, [r2, #32]
 80026e4:	e02d      	b.n	8002742 <HAL_RCC_OscConfig+0x36e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0x334>
 80026ee:	4b76      	ldr	r3, [pc, #472]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4a75      	ldr	r2, [pc, #468]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	6213      	str	r3, [r2, #32]
 80026fa:	4b73      	ldr	r3, [pc, #460]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	4a72      	ldr	r2, [pc, #456]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002700:	f023 0304 	bic.w	r3, r3, #4
 8002704:	6213      	str	r3, [r2, #32]
 8002706:	e01c      	b.n	8002742 <HAL_RCC_OscConfig+0x36e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b05      	cmp	r3, #5
 800270e:	d10c      	bne.n	800272a <HAL_RCC_OscConfig+0x356>
 8002710:	4b6d      	ldr	r3, [pc, #436]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	4a6c      	ldr	r2, [pc, #432]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002716:	f043 0304 	orr.w	r3, r3, #4
 800271a:	6213      	str	r3, [r2, #32]
 800271c:	4b6a      	ldr	r3, [pc, #424]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4a69      	ldr	r2, [pc, #420]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6213      	str	r3, [r2, #32]
 8002728:	e00b      	b.n	8002742 <HAL_RCC_OscConfig+0x36e>
 800272a:	4b67      	ldr	r3, [pc, #412]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4a66      	ldr	r2, [pc, #408]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6213      	str	r3, [r2, #32]
 8002736:	4b64      	ldr	r3, [pc, #400]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a63      	ldr	r2, [pc, #396]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800273c:	f023 0304 	bic.w	r3, r3, #4
 8002740:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d015      	beq.n	8002776 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274a:	f7fe ff77 	bl	800163c <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002750:	e00a      	b.n	8002768 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002752:	f7fe ff73 	bl	800163c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002760:	4293      	cmp	r3, r2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0ab      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002768:	4b57      	ldr	r3, [pc, #348]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ee      	beq.n	8002752 <HAL_RCC_OscConfig+0x37e>
 8002774:	e014      	b.n	80027a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002776:	f7fe ff61 	bl	800163c <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7fe ff5d 	bl	800163c <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e095      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002794:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1ee      	bne.n	800277e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d105      	bne.n	80027b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a6:	4b48      	ldr	r3, [pc, #288]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	4a47      	ldr	r2, [pc, #284]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80027ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8081 	beq.w	80028be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027bc:	4b42      	ldr	r3, [pc, #264]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d061      	beq.n	800288c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d146      	bne.n	800285e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d0:	4b3f      	ldr	r3, [pc, #252]	; (80028d0 <HAL_RCC_OscConfig+0x4fc>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d6:	f7fe ff31 	bl	800163c <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027de:	f7fe ff2d 	bl	800163c <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e067      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f0:	4b35      	ldr	r3, [pc, #212]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f0      	bne.n	80027de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002804:	d108      	bne.n	8002818 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002806:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	492d      	ldr	r1, [pc, #180]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002818:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a19      	ldr	r1, [r3, #32]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	430b      	orrs	r3, r1
 800282a:	4927      	ldr	r1, [pc, #156]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_RCC_OscConfig+0x4fc>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002836:	f7fe ff01 	bl	800163c <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283e:	f7fe fefd 	bl	800163c <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e037      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002850:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x46a>
 800285c:	e02f      	b.n	80028be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <HAL_RCC_OscConfig+0x4fc>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7fe feea 	bl	800163c <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fee6 	bl	800163c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e020      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x498>
 800288a:	e018      	b.n	80028be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e013      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_OscConfig+0x4f4>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40007000 	.word	0x40007000
 80028d0:	42420060 	.word	0x42420060

080028d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0d0      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b6a      	ldr	r3, [pc, #424]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d910      	bls.n	8002918 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b67      	ldr	r3, [pc, #412]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 0207 	bic.w	r2, r3, #7
 80028fe:	4965      	ldr	r1, [pc, #404]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b63      	ldr	r3, [pc, #396]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0b8      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002930:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a58      	ldr	r2, [pc, #352]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002936:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800293a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002948:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	4a52      	ldr	r2, [pc, #328]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 800294e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002952:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002954:	4b50      	ldr	r3, [pc, #320]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	494d      	ldr	r1, [pc, #308]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d040      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d115      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e07f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002992:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e073      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a2:	4b3d      	ldr	r3, [pc, #244]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e06b      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b2:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f023 0203 	bic.w	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4936      	ldr	r1, [pc, #216]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c4:	f7fe fe3a 	bl	800163c <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029cc:	f7fe fe36 	bl	800163c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e053      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 020c 	and.w	r2, r3, #12
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1eb      	bne.n	80029cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f4:	4b27      	ldr	r3, [pc, #156]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d210      	bcs.n	8002a24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 0207 	bic.w	r2, r3, #7
 8002a0a:	4922      	ldr	r1, [pc, #136]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e032      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4916      	ldr	r1, [pc, #88]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	490e      	ldr	r1, [pc, #56]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a62:	f000 f821 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002a66:	4601      	mov	r1, r0
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <HAL_RCC_ClockConfig+0x1c8>)
 8002a74:	5cd3      	ldrb	r3, [r2, r3]
 8002a76:	fa21 f303 	lsr.w	r3, r1, r3
 8002a7a:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <HAL_RCC_ClockConfig+0x1cc>)
 8002a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_ClockConfig+0x1d0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe fd98 	bl	80015b8 <HAL_InitTick>

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40022000 	.word	0x40022000
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	08003f90 	.word	0x08003f90
 8002aa0:	20000008 	.word	0x20000008
 8002aa4:	2000000c 	.word	0x2000000c

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	b490      	push	{r4, r7}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002aae:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ab0:	1d3c      	adds	r4, r7, #4
 8002ab2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ab8:	4b28      	ldr	r3, [pc, #160]	; (8002b5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ad2:	4b23      	ldr	r3, [pc, #140]	; (8002b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d002      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d003      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x46>
 8002ae6:	e02d      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002aea:	623b      	str	r3, [r7, #32]
      break;
 8002aec:	e02d      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	0c9b      	lsrs	r3, r3, #18
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002afa:	4413      	add	r3, r2
 8002afc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b00:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d013      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b0c:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	0c5b      	lsrs	r3, r3, #17
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	4a0f      	ldr	r2, [pc, #60]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b26:	fb02 f203 	mul.w	r2, r2, r3
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
 8002b32:	e004      	b.n	8002b3e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	4a0c      	ldr	r2, [pc, #48]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b38:	fb02 f303 	mul.w	r3, r2, r3
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	623b      	str	r3, [r7, #32]
      break;
 8002b42:	e002      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b44:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b46:	623b      	str	r3, [r7, #32]
      break;
 8002b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3728      	adds	r7, #40	; 0x28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc90      	pop	{r4, r7}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	080030a4 	.word	0x080030a4
 8002b5c:	080030b4 	.word	0x080030b4
 8002b60:	40021000 	.word	0x40021000
 8002b64:	007a1200 	.word	0x007a1200
 8002b68:	003d0900 	.word	0x003d0900

08002b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b70:	4b02      	ldr	r3, [pc, #8]	; (8002b7c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b72:	681b      	ldr	r3, [r3, #0]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	20000008 	.word	0x20000008

08002b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b84:	f7ff fff2 	bl	8002b6c <HAL_RCC_GetHCLKFreq>
 8002b88:	4601      	mov	r1, r0
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	4a03      	ldr	r2, [pc, #12]	; (8002ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b96:	5cd3      	ldrb	r3, [r2, r3]
 8002b98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	08003fa0 	.word	0x08003fa0

08002ba8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <RCC_Delay+0x34>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <RCC_Delay+0x38>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	0a5b      	lsrs	r3, r3, #9
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	fb02 f303 	mul.w	r3, r2, r3
 8002bc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bc4:	bf00      	nop
  }
  while (Delay --);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1e5a      	subs	r2, r3, #1
 8002bca:	60fa      	str	r2, [r7, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f9      	bne.n	8002bc4 <RCC_Delay+0x1c>
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	20000008 	.word	0x20000008
 8002be0:	10624dd3 	.word	0x10624dd3

08002be4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e053      	b.n	8002c9e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d106      	bne.n	8002c16 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7fe fbf9 	bl	8001408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c2c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	ea42 0103 	orr.w	r1, r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	0c1a      	lsrs	r2, r3, #16
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f002 0204 	and.w	r2, r2, #4
 8002c7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69da      	ldr	r2, [r3, #28]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b088      	sub	sp, #32
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_SPI_Transmit+0x22>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e11e      	b.n	8002f06 <HAL_SPI_Transmit+0x260>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cd0:	f7fe fcb4 	bl	800163c <HAL_GetTick>
 8002cd4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d002      	beq.n	8002cec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cea:	e103      	b.n	8002ef4 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_SPI_Transmit+0x52>
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d102      	bne.n	8002cfe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cfc:	e0fa      	b.n	8002ef4 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2203      	movs	r2, #3
 8002d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	88fa      	ldrh	r2, [r7, #6]
 8002d16:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	88fa      	ldrh	r2, [r7, #6]
 8002d1c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d44:	d107      	bne.n	8002d56 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d60:	2b40      	cmp	r3, #64	; 0x40
 8002d62:	d007      	beq.n	8002d74 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d7c:	d14b      	bne.n	8002e16 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <HAL_SPI_Transmit+0xe6>
 8002d86:	8afb      	ldrh	r3, [r7, #22]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d13e      	bne.n	8002e0a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	881a      	ldrh	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	1c9a      	adds	r2, r3, #2
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002db0:	e02b      	b.n	8002e0a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d112      	bne.n	8002de6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	881a      	ldrh	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	1c9a      	adds	r2, r3, #2
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002de4:	e011      	b.n	8002e0a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002de6:	f7fe fc29 	bl	800163c <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d803      	bhi.n	8002dfe <HAL_SPI_Transmit+0x158>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dfc:	d102      	bne.n	8002e04 <HAL_SPI_Transmit+0x15e>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d102      	bne.n	8002e0a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e08:	e074      	b.n	8002ef4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1ce      	bne.n	8002db2 <HAL_SPI_Transmit+0x10c>
 8002e14:	e04c      	b.n	8002eb0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_SPI_Transmit+0x17e>
 8002e1e:	8afb      	ldrh	r3, [r7, #22]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d140      	bne.n	8002ea6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	330c      	adds	r3, #12
 8002e2e:	7812      	ldrb	r2, [r2, #0]
 8002e30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	3b01      	subs	r3, #1
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e4a:	e02c      	b.n	8002ea6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d113      	bne.n	8002e82 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	330c      	adds	r3, #12
 8002e64:	7812      	ldrb	r2, [r2, #0]
 8002e66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e80:	e011      	b.n	8002ea6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e82:	f7fe fbdb 	bl	800163c <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d803      	bhi.n	8002e9a <HAL_SPI_Transmit+0x1f4>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e98:	d102      	bne.n	8002ea0 <HAL_SPI_Transmit+0x1fa>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d102      	bne.n	8002ea6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ea4:	e026      	b.n	8002ef4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1cd      	bne.n	8002e4c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	6839      	ldr	r1, [r7, #0]
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f894 	bl	8002fe2 <SPI_EndRxTxTransaction>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10a      	bne.n	8002ee4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	e000      	b.n	8002ef4 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002ef2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f04:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3720      	adds	r7, #32
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f1e:	e04c      	b.n	8002fba <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f26:	d048      	beq.n	8002fba <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002f28:	f7fe fb88 	bl	800163c <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d902      	bls.n	8002f3e <SPI_WaitFlagStateUntilTimeout+0x30>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d13d      	bne.n	8002fba <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f56:	d111      	bne.n	8002f7c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f60:	d004      	beq.n	8002f6c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6a:	d107      	bne.n	8002f7c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f84:	d10f      	bne.n	8002fa6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e00f      	b.n	8002fda <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	bf0c      	ite	eq
 8002fca:	2301      	moveq	r3, #1
 8002fcc:	2300      	movne	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d1a3      	bne.n	8002f20 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b086      	sub	sp, #24
 8002fe6:	af02      	add	r7, sp, #8
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7ff ff88 	bl	8002f0e <SPI_WaitFlagStateUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d007      	beq.n	8003014 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003008:	f043 0220 	orr.w	r2, r3, #32
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e000      	b.n	8003016 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <__libc_init_array>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	2500      	movs	r5, #0
 8003024:	4e0c      	ldr	r6, [pc, #48]	; (8003058 <__libc_init_array+0x38>)
 8003026:	4c0d      	ldr	r4, [pc, #52]	; (800305c <__libc_init_array+0x3c>)
 8003028:	1ba4      	subs	r4, r4, r6
 800302a:	10a4      	asrs	r4, r4, #2
 800302c:	42a5      	cmp	r5, r4
 800302e:	d109      	bne.n	8003044 <__libc_init_array+0x24>
 8003030:	f000 f822 	bl	8003078 <_init>
 8003034:	2500      	movs	r5, #0
 8003036:	4e0a      	ldr	r6, [pc, #40]	; (8003060 <__libc_init_array+0x40>)
 8003038:	4c0a      	ldr	r4, [pc, #40]	; (8003064 <__libc_init_array+0x44>)
 800303a:	1ba4      	subs	r4, r4, r6
 800303c:	10a4      	asrs	r4, r4, #2
 800303e:	42a5      	cmp	r5, r4
 8003040:	d105      	bne.n	800304e <__libc_init_array+0x2e>
 8003042:	bd70      	pop	{r4, r5, r6, pc}
 8003044:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003048:	4798      	blx	r3
 800304a:	3501      	adds	r5, #1
 800304c:	e7ee      	b.n	800302c <__libc_init_array+0xc>
 800304e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003052:	4798      	blx	r3
 8003054:	3501      	adds	r5, #1
 8003056:	e7f2      	b.n	800303e <__libc_init_array+0x1e>
 8003058:	08003fa8 	.word	0x08003fa8
 800305c:	08003fa8 	.word	0x08003fa8
 8003060:	08003fa8 	.word	0x08003fa8
 8003064:	08003fac 	.word	0x08003fac

08003068 <memset>:
 8003068:	4603      	mov	r3, r0
 800306a:	4402      	add	r2, r0
 800306c:	4293      	cmp	r3, r2
 800306e:	d100      	bne.n	8003072 <memset+0xa>
 8003070:	4770      	bx	lr
 8003072:	f803 1b01 	strb.w	r1, [r3], #1
 8003076:	e7f9      	b.n	800306c <memset+0x4>

08003078 <_init>:
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	bf00      	nop
 800307c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307e:	bc08      	pop	{r3}
 8003080:	469e      	mov	lr, r3
 8003082:	4770      	bx	lr

08003084 <_fini>:
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003086:	bf00      	nop
 8003088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308a:	bc08      	pop	{r3}
 800308c:	469e      	mov	lr, r3
 800308e:	4770      	bx	lr
